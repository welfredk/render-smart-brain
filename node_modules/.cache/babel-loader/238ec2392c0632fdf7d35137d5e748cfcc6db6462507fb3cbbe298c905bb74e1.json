{"ast":null,"code":"/*!\n* Proton v4.2.1\n* https://github.com/drawcall/Proton\n*\n* Copyright 2013-2020, A-JIE\n* Licensed under the MIT license\n* http://www.opensource.org/licenses/mit-license\n*\n*/\n!function (t, e) {\n  \"object\" == typeof exports && \"undefined\" != typeof module ? module.exports = e() : \"function\" == typeof define && define.amd ? define(e) : t.Proton = e();\n}(this, function () {\n  \"use strict\";\n\n  var e = 3.1415926,\n    s = {\n      PI: e,\n      PIx2: 2 * e,\n      PI_2: e / 2,\n      PI_180: e / 180,\n      N180_PI: 180 / e,\n      Infinity: -999,\n      isInfinity: function (t) {\n        return t === this.Infinity || t === 1 / 0;\n      },\n      randomAToB: function (t, e, i) {\n        return 2 < arguments.length && void 0 !== i && i ? Math.floor(Math.random() * (e - t)) + t : t + Math.random() * (e - t);\n      },\n      randomFloating: function (t, e, i) {\n        return this.randomAToB(t - e, t + e, i);\n      },\n      randomColor: function () {\n        return \"#\" + (\"00000\" + (16777216 * Math.random() << 0).toString(16)).slice(-6);\n      },\n      randomZone: function () {},\n      floor: function (t, e) {\n        e = 1 < arguments.length && void 0 !== e ? e : 4, e = Math.pow(10, e);\n        return Math.floor(t * e) / e;\n      },\n      degreeTransform: function (t) {\n        return t * e / 180;\n      },\n      toColor16: function (t) {\n        return \"#\" + t.toString(16);\n      }\n    },\n    i = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (t) {\n      return typeof t;\n    } : function (t) {\n      return t && \"function\" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? \"symbol\" : typeof t;\n    },\n    o = function (t, e) {\n      if (!(t instanceof e)) throw new TypeError(\"Cannot call a class as a function\");\n    },\n    t = function (t, e, i) {\n      return e && a(t.prototype, e), i && a(t, i), t;\n    };\n  function a(t, e) {\n    for (var i = 0; i < e.length; i++) {\n      var a = e[i];\n      a.enumerable = a.enumerable || !1, a.configurable = !0, \"value\" in a && (a.writable = !0), Object.defineProperty(t, a.key, a);\n    }\n  }\n  function n(t, e, i) {\n    null === t && (t = Function.prototype);\n    var a = Object.getOwnPropertyDescriptor(t, e);\n    if (void 0 !== a) {\n      if (\"value\" in a) return a.value;\n      a = a.get;\n      return void 0 !== a ? a.call(i) : void 0;\n    }\n    if (null !== (t = Object.getPrototypeOf(t))) return n(t, e, i);\n  }\n  var r = function (t, e) {\n      if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function, not \" + typeof e);\n      t.prototype = Object.create(e && e.prototype, {\n        constructor: {\n          value: t,\n          enumerable: !1,\n          writable: !0,\n          configurable: !0\n        }\n      }), e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e);\n    },\n    h = function (t, e) {\n      if (!t) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n      return !e || \"object\" != typeof e && \"function\" != typeof e ? t : e;\n    },\n    l = (t(u, [{\n      key: \"getValue\",\n      value: function (t) {\n        t = 0 < arguments.length && void 0 !== t && t;\n        return this.isArray ? P.getRandFromArray(this.a) : this.center ? s.randomFloating(this.a, this.b, t) : s.randomAToB(this.a, this.b, t);\n      }\n    }], [{\n      key: \"setSpanValue\",\n      value: function (t, e, i) {\n        return t instanceof u ? t : void 0 === e ? new u(t) : void 0 === i ? new u(t, e) : new u(t, e, i);\n      }\n    }, {\n      key: \"getSpanValue\",\n      value: function (t) {\n        return t instanceof u ? t.getValue() : t;\n      }\n    }]), u);\n  function u(t, e, i) {\n    o(this, u), P.isArray(t) ? (this.isArray = !0, this.a = t) : (this.isArray = !1, this.a = P.initValue(t, 1), this.b = P.initValue(e, this.a), this.center = P.initValue(i, !1));\n  }\n  var c = function (t) {\n      --t;\n      for (var e = 1; e < 32; e <<= 1) t |= t >> e;\n      return t + 1;\n    },\n    d = function (t, e) {\n      return [1, 0, 0, 0, 1, 0, t, e, 1];\n    },\n    y = function (t) {\n      var e = Math.cos(t),\n        t = Math.sin(t);\n      return [e, -t, 0, t, e, 0, 0, 0, 1];\n    },\n    p = function (t, e) {\n      return [t, 0, 0, 0, e, 0, 0, 0, 1];\n    },\n    f = function (t, e) {\n      var i = t[0],\n        a = t[1],\n        r = t[2],\n        n = t[3],\n        s = t[4],\n        o = t[5],\n        h = t[6],\n        l = t[7],\n        u = t[8],\n        c = e[0],\n        d = e[1],\n        y = e[2],\n        p = e[3],\n        f = e[4],\n        v = e[5],\n        g = e[6],\n        t = e[7],\n        e = e[8];\n      return [i * c + a * p + r * g, i * d + a * f + r * t, i * y + a * v + r * e, n * c + s * p + o * g, n * d + s * f + o * t, n * y + s * v + o * e, h * c + l * p + u * g, h * d + l * f + u * t, h * y + l * v + u * e];\n    },\n    v = {\n      createCanvas: function (t, e, i, a) {\n        var r = 3 < arguments.length && void 0 !== a ? a : \"absolute\",\n          a = document.createElement(\"canvas\");\n        return a.id = t, a.width = e, a.height = i, a.style.opacity = 0, a.style.position = r, this.transform(a, -500, -500, 0, 0), a;\n      },\n      createDiv: function (t, e, i) {\n        var a = document.createElement(\"div\");\n        return a.id = t, a.style.position = \"absolute\", this.resize(a, e, i), a;\n      },\n      resize: function (t, e, i) {\n        t.style.width = e + \"px\", t.style.height = i + \"px\", t.style.marginLeft = -e / 2 + \"px\", t.style.marginTop = -i / 2 + \"px\";\n      },\n      transform: function (t, e, i, a, r) {\n        t.style.willChange = \"transform\";\n        var n = \"translate(\" + e + \"px, \" + i + \"px) scale(\" + a + \") rotate(\" + r + \"deg)\";\n        this.css3(t, \"transform\", n);\n      },\n      transform3d: function (t, e, i, a, r) {\n        t.style.willChange = \"transform\";\n        r = \"translate3d(\" + e + \"px, \" + i + \"px, 0) scale(\" + a + \") rotate(\" + r + \"deg)\";\n        this.css3(t, \"backfaceVisibility\", \"hidden\"), this.css3(t, \"transform\", r);\n      },\n      css3: function (t, e, i) {\n        var a = e.charAt(0).toUpperCase() + e.substr(1);\n        t.style[\"Webkit\" + a] = i, t.style[\"Moz\" + a] = i, t.style[\"O\" + a] = i, t.style[\"ms\" + a] = i, t.style[\"\" + e] = i;\n      }\n    },\n    g = {},\n    m = {},\n    b = 0,\n    _ = function (t, e, i) {\n      t.drawImage(e, i.x, i.y);\n      e = t.getImageData(i.x, i.y, i.width, i.height);\n      return t.clearRect(i.x, i.y, i.width, i.height), e;\n    },\n    x = function (t, e, i) {\n      var a = \"string\" == typeof t ? t : t.src;\n      g[a] ? e(g[a], i) : ((t = new Image()).onload = function (t) {\n        g[a] = t.target, e(g[a], i);\n      }, t.src = a);\n    },\n    k = function (t, e, i) {\n      var a,\n        r,\n        n = t.src;\n      return m[n] || (a = c(t.width), r = c(t.height), (r = v.createCanvas(\"proton_canvas_cache_\" + ++b, a, r)).getContext(\"2d\").drawImage(t, 0, 0, t.width, t.height), m[n] = r), e && e(m[n], i), m[n];\n    },\n    P = {\n      initValue: function (t, e) {\n        return t = null != t ? t : e;\n      },\n      isArray: function (t) {\n        return \"[object Array]\" === Object.prototype.toString.call(t);\n      },\n      emptyArray: function (t) {\n        t && (t.length = 0);\n      },\n      toArray: function (t) {\n        return this.isArray(t) ? t : [t];\n      },\n      getRandFromArray: function (t) {\n        return t ? t[Math.floor(t.length * Math.random())] : null;\n      },\n      emptyObject: function (t, e) {\n        var i,\n          a = 1 < arguments.length && void 0 !== e ? e : null;\n        for (i in t) a && -1 < a.indexOf(i) || delete t[i];\n      },\n      classApply: function (t, e) {\n        e = 1 < arguments.length && void 0 !== e ? e : null;\n        return new (e ? t.bind.apply(t, [null].concat(e)) : t)();\n      },\n      setVectorVal: function (t, e) {\n        e = 1 < arguments.length && void 0 !== e ? e : null;\n        e && (this.hasProp(e, \"x\") && (t.p.x = e.x), this.hasProp(e, \"y\") && (t.p.y = e.y), this.hasProp(e, \"vx\") && (t.v.x = e.vx), this.hasProp(e, \"vy\") && (t.v.y = e.vy), this.hasProp(e, \"ax\") && (t.a.x = e.ax), this.hasProp(e, \"ay\") && (t.a.y = e.ay), this.hasProp(e, \"p\") && t.p.copy(e.p), this.hasProp(e, \"v\") && t.v.copy(e.v), this.hasProp(e, \"a\") && t.a.copy(e.a), this.hasProp(e, \"position\") && t.p.copy(e.position), this.hasProp(e, \"velocity\") && t.v.copy(e.velocity), this.hasProp(e, \"accelerate\") && t.a.copy(e.accelerate));\n      },\n      hasProp: function (t, e) {\n        return !!t && void 0 !== t[e];\n      },\n      setProp: function (t, e) {\n        for (var i in e) t.hasOwnProperty(i) && (t[i] = l.getSpanValue(e[i]));\n        return t;\n      },\n      getImageData: function (t, e, i) {\n        return _(t, e, i);\n      },\n      destroyAll: function (t, e) {\n        for (var i = 1 < arguments.length && void 0 !== e ? e : null, a = t.length; a--;) {\n          try {\n            t[a].destroy(i);\n          } catch (t) {}\n          delete t[a];\n        }\n        t.length = 0;\n      },\n      assign: function (t, e) {\n        if (\"function\" == typeof Object.assign) return Object.assign(t, e);\n        for (var i in e) Object.prototype.hasOwnProperty.call(e, i) && (t[i] = e[i]);\n        return t;\n      }\n    },\n    E = {},\n    A = {\n      _index: 0,\n      _cache: {},\n      id: function (t) {\n        return void 0 !== E[t] && null !== E[t] || (E[t] = 0), t + \"_\" + E[t]++;\n      },\n      getId: function (t) {\n        var e = this.getIdFromCache(t);\n        return e || (e = \"PUID_\" + this._index++, this._cache[e] = t, e);\n      },\n      getIdFromCache: function (t) {\n        var e,\n          i = void 0;\n        for (i in this._cache) {\n          if ((e = this._cache[i]) === t) return i;\n          if (this.isBody(e, t) && e.src === t.src) return i;\n        }\n        return null;\n      },\n      isBody: function (t, e) {\n        return \"object\" === (void 0 === t ? \"undefined\" : i(t)) && \"object\" === (void 0 === e ? \"undefined\" : i(e)) && t.isInner && e.isInner;\n      },\n      getTarget: function (t) {\n        return this._cache[t];\n      }\n    },\n    T = (t(R, [{\n      key: \"get\",\n      value: function (t, e, i) {\n        var a = void 0;\n        return i = i || t.__puid || A.getId(t), (a = this.cache[i] && 0 < this.cache[i].length ? this.cache[i].pop() : this.createOrClone(t, e)).__puid = t.__puid || i, a;\n      }\n    }, {\n      key: \"expire\",\n      value: function (t) {\n        return this.getCache(t.__puid).push(t);\n      }\n    }, {\n      key: \"createOrClone\",\n      value: function (t, e) {\n        return this.total++, this.create ? this.create(t, e) : \"function\" == typeof t ? P.classApply(t, e) : t.clone();\n      }\n    }, {\n      key: \"getCount\",\n      value: function () {\n        var t,\n          e = 0;\n        for (t in this.cache) e += this.cache[t].length;\n        return e++;\n      }\n    }, {\n      key: \"destroy\",\n      value: function () {\n        for (var t in this.cache) this.cache[t].length = 0, delete this.cache[t];\n      }\n    }, {\n      key: \"getCache\",\n      value: function (t) {\n        t = 0 < arguments.length && void 0 !== t ? t : \"default\";\n        return this.cache[t] || (this.cache[t] = []), this.cache[t];\n      }\n    }]), R);\n  function R(t) {\n    o(this, R), this.total = 0, this.cache = {};\n  }\n  var O = (t(w, [{\n    key: \"update\",\n    value: function (t, e) {\n      this.add(t, e);\n      var i = this.getEmitter(),\n        t = this.getRenderer(),\n        e = \"\";\n      switch (this.type) {\n        case 2:\n          e += \"emitter:\" + this.proton.emitters.length + \"<br>\", i && (e += \"em speed:\" + i.emitSpeed + \"<br>\"), i && (e += \"pos:\" + this.getEmitterPos(i));\n          break;\n        case 3:\n          i && (e += \"initializes:\" + i.initializes.length + \"<br>\"), i && (e += '<span style=\"display:inline-block;\">' + this.concatArr(i.initializes) + \"</span><br>\"), i && (e += \"behaviours:\" + i.behaviours.length + \"<br>\"), i && (e += '<span style=\"display:inline-block;\">' + this.concatArr(i.behaviours) + \"</span><br>\");\n          break;\n        case 4:\n          t && (e += t.name + \"<br>\"), t && (e += \"body:\" + this.getCreatedNumber(t) + \"<br>\");\n          break;\n        default:\n          e += \"particles:\" + this.proton.getCount() + \"<br>\", e += \"pool:\" + this.proton.pool.getCount() + \"<br>\", e += \"total:\" + this.proton.pool.total;\n      }\n      this.container.innerHTML = e;\n    }\n  }, {\n    key: \"add\",\n    value: function (t, e) {\n      var i = this;\n      if (!this.container) {\n        this.type = 1, this.container = document.createElement(\"div\"), this.container.style.cssText = [\"position:absolute;bottom:0px;left:0;cursor:pointer;\", \"opacity:0.9;z-index:10000;padding:10px;font-size:12px;font-family:Helvetica,Arial,sans-serif;\", \"width:120px;height:50px;background-color:#002;color:#0ff;\"].join(\"\"), this.container.addEventListener(\"click\", function (t) {\n          i.type++, 4 < i.type && (i.type = 1);\n        }, !1);\n        var a = void 0,\n          r = void 0;\n        switch (t) {\n          case 2:\n            a = \"#201\", r = \"#f08\";\n            break;\n          case 3:\n            a = \"#020\", r = \"#0f0\";\n            break;\n          default:\n            a = \"#002\", r = \"#0ff\";\n        }\n        this.container.style[\"background-color\"] = a, this.container.style.color = r;\n      }\n      this.container.parentNode || (e = e || this.body || document.body).appendChild(this.container);\n    }\n  }, {\n    key: \"getEmitter\",\n    value: function () {\n      return this.proton.emitters[this.emitterIndex];\n    }\n  }, {\n    key: \"getRenderer\",\n    value: function () {\n      return this.proton.renderers[this.rendererIndex];\n    }\n  }, {\n    key: \"concatArr\",\n    value: function (t) {\n      var e = \"\";\n      if (!t || !t.length) return e;\n      for (var i = 0; i < t.length; i++) e += (t[i].name || \"\").substr(0, 1) + \".\";\n      return e;\n    }\n  }, {\n    key: \"getCreatedNumber\",\n    value: function (t) {\n      return t.pool.total || t.cpool && t.cpool.total || 0;\n    }\n  }, {\n    key: \"getEmitterPos\",\n    value: function (t) {\n      return Math.round(t.p.x) + \",\" + Math.round(t.p.y);\n    }\n  }]), w);\n  function w(t) {\n    o(this, w), this.proton = t, this.container = null, this.type = 1, this.emitterIndex = 0, this.rendererIndex = 0;\n  }\n  var C = (t(S, [{\n    key: \"addEventListener\",\n    value: function (t, e) {\n      return this._listeners ? this.removeEventListener(t, e) : this._listeners = {}, this._listeners[t] || (this._listeners[t] = []), this._listeners[t].push(e), e;\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function (t, e) {\n      if (this._listeners && this._listeners[t]) for (var i = this._listeners[t], a = i.length, r = 0; r < a; r++) if (i[r] === e) {\n        1 === a ? delete this._listeners[t] : i.splice(r, 1);\n        break;\n      }\n    }\n  }, {\n    key: \"removeAllEventListeners\",\n    value: function (t) {\n      t ? this._listeners && delete this._listeners[t] : this._listeners = null;\n    }\n  }, {\n    key: \"dispatchEvent\",\n    value: function (t, e) {\n      var i = !1,\n        a = this._listeners;\n      if (t && a) {\n        var r = a[t];\n        if (!r) return i;\n        for (var n = void 0, s = r.length; s--;) n = r[s], i = i || n(e);\n      }\n      return !!i;\n    }\n  }, {\n    key: \"hasEventListener\",\n    value: function (t) {\n      var e = this._listeners;\n      return !(!e || !e[t]);\n    }\n  }], [{\n    key: \"bind\",\n    value: function (t) {\n      t.prototype.dispatchEvent = S.prototype.dispatchEvent, t.prototype.hasEventListener = S.prototype.hasEventListener, t.prototype.addEventListener = S.prototype.addEventListener, t.prototype.removeEventListener = S.prototype.removeEventListener, t.prototype.removeAllEventListeners = S.prototype.removeAllEventListeners;\n    }\n  }]), S);\n  function S() {\n    o(this, S), this._listeners = null;\n  }\n  var I = (t(D, [{\n    key: \"calculate\",\n    value: function (t, e, i) {\n      this.eulerIntegrate(t, e, i);\n    }\n  }, {\n    key: \"eulerIntegrate\",\n    value: function (t, e, i) {\n      t.sleep || (t.old.p.copy(t.p), t.old.v.copy(t.v), t.a.multiplyScalar(1 / t.mass), t.v.add(t.a.multiplyScalar(e)), t.p.add(t.old.v.multiplyScalar(e)), i && t.v.multiplyScalar(i), t.a.clear());\n    }\n  }]), D);\n  function D(t) {\n    o(this, D), this.type = t;\n  }\n  var V = (t(M, [{\n    key: \"addRenderer\",\n    value: function (t) {\n      t.init(this), this.renderers.push(t);\n    }\n  }, {\n    key: \"removeRenderer\",\n    value: function (t) {\n      var e = this.renderers.indexOf(t);\n      this.renderers.splice(e, 1), t.remove(this);\n    }\n  }, {\n    key: \"addEmitter\",\n    value: function (t) {\n      this.emitters.push(t), (t.parent = this).dispatchEvent(M.EMITTER_ADDED, t);\n    }\n  }, {\n    key: \"removeEmitter\",\n    value: function (t) {\n      var e = this.emitters.indexOf(t);\n      this.emitters.splice(e, 1), t.parent = null, this.dispatchEvent(M.EMITTER_REMOVED, t);\n    }\n  }, {\n    key: \"update\",\n    value: function () {\n      \"auto\" === this._fps ? (this.dispatchEvent(M.PROTON_UPDATE), M.USE_CLOCK ? (this.then || (this.then = new Date().getTime()), this.now = new Date().getTime(), this.elapsed = .001 * (this.now - this.then), this.amendChangeTabsBug(), 0 < this.elapsed && this.emittersUpdate(this.elapsed), this.then = this.now) : this.emittersUpdate(M.DEFAULT_INTERVAL), this.dispatchEvent(M.PROTON_UPDATE_AFTER)) : (this.then || (this.then = new Date().getTime()), this.now = new Date().getTime(), this.elapsed = .001 * (this.now - this.then), this.elapsed > this._interval && (this.dispatchEvent(M.PROTON_UPDATE), this.emittersUpdate(this._interval), this.then = this.now - this.elapsed % this._interval * 1e3, this.dispatchEvent(M.PROTON_UPDATE_AFTER)));\n    }\n  }, {\n    key: \"emittersUpdate\",\n    value: function (t) {\n      for (var e = this.emitters.length; e--;) this.emitters[e].update(t);\n    }\n  }, {\n    key: \"amendChangeTabsBug\",\n    value: function () {\n      M.amendChangeTabsBug && .5 < this.elapsed && (this.then = new Date().getTime(), this.elapsed = 0);\n    }\n  }, {\n    key: \"getCount\",\n    value: function () {\n      for (var t = 0, e = this.emitters.length; e--;) t += this.emitters[e].particles.length;\n      return t;\n    }\n  }, {\n    key: \"getAllParticles\",\n    value: function () {\n      for (var t = [], e = this.emitters.length; e--;) t = t.concat(this.emitters[e].particles);\n      return t;\n    }\n  }, {\n    key: \"destroyAllEmitters\",\n    value: function () {\n      P.destroyAll(this.emitters);\n    }\n  }, {\n    key: \"destroy\",\n    value: function (t) {\n      function e() {\n        i.time = 0, i.then = 0, i.pool.destroy(), P.destroyAll(i.emitters), P.destroyAll(i.renderers, i.getAllParticles());\n      }\n      var i = this;\n      0 < arguments.length && void 0 !== t && t ? setTimeout(e, 200) : e();\n    }\n  }, {\n    key: \"fps\",\n    set: function (t) {\n      this._fps = t, this._interval = \"auto\" === t ? M.DEFAULT_INTERVAL : s.floor(1 / t, 7);\n    },\n    get: function () {\n      return this._fps;\n    }\n  }]), M);\n  function M(t) {\n    o(this, M), this.emitters = [], this.renderers = [], this.time = 0, this.now = 0, this.then = 0, this.elapsed = 0, this.stats = new O(this), this.pool = new T(80), this.integrationType = P.initValue(t, M.EULER), this.integrator = new I(this.integrationType), this._fps = \"auto\", this._interval = M.DEFAULT_INTERVAL;\n  }\n  V.USE_CLOCK = !1, V.MEASURE = 100, V.EULER = \"euler\", V.RK2 = \"runge-kutta2\", V.PARTICLE_CREATED = \"PARTICLE_CREATED\", V.PARTICLE_UPDATE = \"PARTICLE_UPDATE\", V.PARTICLE_SLEEP = \"PARTICLE_SLEEP\", V.PARTICLE_DEAD = \"PARTICLE_DEAD\", V.EMITTER_ADDED = \"EMITTER_ADDED\", V.EMITTER_REMOVED = \"EMITTER_REMOVED\", V.PROTON_UPDATE = \"PROTON_UPDATE\", V.PROTON_UPDATE_AFTER = \"PROTON_UPDATE_AFTER\", V.DEFAULT_INTERVAL = .0167, V.amendChangeTabsBug = !0, C.bind(V);\n  var B = (t(L, [{\n    key: \"reset\",\n    value: function () {\n      this.r = 255, this.g = 255, this.b = 255;\n    }\n  }]), L);\n  function L() {\n    var t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 255,\n      e = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 255,\n      i = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 255;\n    o(this, L), this.r = t, this.g = e, this.b = i;\n  }\n  var U = {\n      easeLinear: function (t) {\n        return t;\n      },\n      easeInQuad: function (t) {\n        return Math.pow(t, 2);\n      },\n      easeOutQuad: function (t) {\n        return -(Math.pow(t - 1, 2) - 1);\n      },\n      easeInOutQuad: function (t) {\n        return (t /= .5) < 1 ? .5 * Math.pow(t, 2) : -.5 * ((t -= 2) * t - 2);\n      },\n      easeInCubic: function (t) {\n        return Math.pow(t, 3);\n      },\n      easeOutCubic: function (t) {\n        return Math.pow(t - 1, 3) + 1;\n      },\n      easeInOutCubic: function (t) {\n        return (t /= .5) < 1 ? .5 * Math.pow(t, 3) : .5 * (Math.pow(t - 2, 3) + 2);\n      },\n      easeInQuart: function (t) {\n        return Math.pow(t, 4);\n      },\n      easeOutQuart: function (t) {\n        return -(Math.pow(t - 1, 4) - 1);\n      },\n      easeInOutQuart: function (t) {\n        return (t /= .5) < 1 ? .5 * Math.pow(t, 4) : -.5 * ((t -= 2) * Math.pow(t, 3) - 2);\n      },\n      easeInSine: function (t) {\n        return 1 - Math.cos(t * s.PI_2);\n      },\n      easeOutSine: function (t) {\n        return Math.sin(t * s.PI_2);\n      },\n      easeInOutSine: function (t) {\n        return -.5 * (Math.cos(Math.PI * t) - 1);\n      },\n      easeInExpo: function (t) {\n        return 0 === t ? 0 : Math.pow(2, 10 * (t - 1));\n      },\n      easeOutExpo: function (t) {\n        return 1 === t ? 1 : 1 - Math.pow(2, -10 * t);\n      },\n      easeInOutExpo: function (t) {\n        return 0 === t ? 0 : 1 === t ? 1 : (t /= .5) < 1 ? .5 * Math.pow(2, 10 * (t - 1)) : .5 * (2 - Math.pow(2, -10 * --t));\n      },\n      easeInCirc: function (t) {\n        return -(Math.sqrt(1 - t * t) - 1);\n      },\n      easeOutCirc: function (t) {\n        return Math.sqrt(1 - Math.pow(t - 1, 2));\n      },\n      easeInOutCirc: function (t) {\n        return (t /= .5) < 1 ? -.5 * (Math.sqrt(1 - t * t) - 1) : .5 * (Math.sqrt(1 - (t -= 2) * t) + 1);\n      },\n      easeInBack: function (t) {\n        return t * t * (2.70158 * t - 1.70158);\n      },\n      easeOutBack: function (t) {\n        return --t * t * (2.70158 * t + 1.70158) + 1;\n      },\n      easeInOutBack: function (t) {\n        var e = 1.70158;\n        return (t /= .5) < 1 ? t * t * ((1 + (e *= 1.525)) * t - e) * .5 : .5 * ((t -= 2) * t * ((1 + (e *= 1.525)) * t + e) + 2);\n      },\n      getEasing: function (t) {\n        return \"function\" == typeof t ? t : this[t] || this.easeLinear;\n      }\n    },\n    F = (t(z, [{\n      key: \"set\",\n      value: function (t, e) {\n        return this.x = t, this.y = e, this;\n      }\n    }, {\n      key: \"setX\",\n      value: function (t) {\n        return this.x = t, this;\n      }\n    }, {\n      key: \"setY\",\n      value: function (t) {\n        return this.y = t, this;\n      }\n    }, {\n      key: \"getGradient\",\n      value: function () {\n        return 0 !== this.x ? Math.atan2(this.y, this.x) : 0 < this.y ? s.PI_2 : this.y < 0 ? -s.PI_2 : void 0;\n      }\n    }, {\n      key: \"copy\",\n      value: function (t) {\n        return this.x = t.x, this.y = t.y, this;\n      }\n    }, {\n      key: \"add\",\n      value: function (t, e) {\n        return void 0 !== e ? this.addVectors(t, e) : (this.x += t.x, this.y += t.y, this);\n      }\n    }, {\n      key: \"addXY\",\n      value: function (t, e) {\n        return this.x += t, this.y += e, this;\n      }\n    }, {\n      key: \"addVectors\",\n      value: function (t, e) {\n        return this.x = t.x + e.x, this.y = t.y + e.y, this;\n      }\n    }, {\n      key: \"sub\",\n      value: function (t, e) {\n        return void 0 !== e ? this.subVectors(t, e) : (this.x -= t.x, this.y -= t.y, this);\n      }\n    }, {\n      key: \"subVectors\",\n      value: function (t, e) {\n        return this.x = t.x - e.x, this.y = t.y - e.y, this;\n      }\n    }, {\n      key: \"divideScalar\",\n      value: function (t) {\n        return 0 !== t ? (this.x /= t, this.y /= t) : this.set(0, 0), this;\n      }\n    }, {\n      key: \"multiplyScalar\",\n      value: function (t) {\n        return this.x *= t, this.y *= t, this;\n      }\n    }, {\n      key: \"negate\",\n      value: function () {\n        return this.multiplyScalar(-1);\n      }\n    }, {\n      key: \"dot\",\n      value: function (t) {\n        return this.x * t.x + this.y * t.y;\n      }\n    }, {\n      key: \"lengthSq\",\n      value: function () {\n        return this.x * this.x + this.y * this.y;\n      }\n    }, {\n      key: \"length\",\n      value: function () {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n      }\n    }, {\n      key: \"normalize\",\n      value: function () {\n        return this.divideScalar(this.length());\n      }\n    }, {\n      key: \"distanceTo\",\n      value: function (t) {\n        return Math.sqrt(this.distanceToSquared(t));\n      }\n    }, {\n      key: \"rotate\",\n      value: function (t) {\n        var e = this.x,\n          i = this.y;\n        return this.x = e * Math.cos(t) + i * Math.sin(t), this.y = -e * Math.sin(t) + i * Math.cos(t), this;\n      }\n    }, {\n      key: \"distanceToSquared\",\n      value: function (t) {\n        var e = this.x - t.x,\n          t = this.y - t.y;\n        return e * e + t * t;\n      }\n    }, {\n      key: \"lerp\",\n      value: function (t, e) {\n        return this.x += (t.x - this.x) * e, this.y += (t.y - this.y) * e, this;\n      }\n    }, {\n      key: \"equals\",\n      value: function (t) {\n        return t.x === this.x && t.y === this.y;\n      }\n    }, {\n      key: \"clear\",\n      value: function () {\n        return this.x = 0, this.y = 0, this;\n      }\n    }, {\n      key: \"clone\",\n      value: function () {\n        return new z(this.x, this.y);\n      }\n    }]), z);\n  function z(t, e) {\n    o(this, z), this.x = t || 0, this.y = e || 0;\n  }\n  var j = (t(N, [{\n    key: \"getDirection\",\n    value: function () {\n      return Math.atan2(this.v.x, -this.v.y) * s.N180_PI;\n    }\n  }, {\n    key: \"reset\",\n    value: function () {\n      return this.life = 1 / 0, this.age = 0, this.dead = !1, this.sleep = !1, this.body = null, this.sprite = null, this.parent = null, this.energy = 1, this.mass = 1, this.radius = 10, this.alpha = 1, this.scale = 1, this.rotation = 0, this.color = null, this.p.set(0, 0), this.v.set(0, 0), this.a.set(0, 0), this.old.p.set(0, 0), this.old.v.set(0, 0), this.old.a.set(0, 0), this.easing = U.easeLinear, this.rgb.reset(), P.emptyObject(this.data), this.removeAllBehaviours(), this;\n    }\n  }, {\n    key: \"update\",\n    value: function (t, e) {\n      this.sleep || (this.age += t, this.applyBehaviours(t, e)), this.age < this.life ? (e = this.easing(this.age / this.life), this.energy = Math.max(1 - e, 0)) : this.destroy();\n    }\n  }, {\n    key: \"applyBehaviours\",\n    value: function (t, e) {\n      for (var i = this.behaviours.length, a = void 0, a = 0; a < i; a++) this.behaviours[a] && this.behaviours[a].applyBehaviour(this, t, e);\n    }\n  }, {\n    key: \"addBehaviour\",\n    value: function (t) {\n      this.behaviours.push(t), t.hasOwnProperty(\"parents\") && t.parents.push(this), t.initialize(this);\n    }\n  }, {\n    key: \"addBehaviours\",\n    value: function (t) {\n      for (var e = t.length, i = void 0, i = 0; i < e; i++) this.addBehaviour(t[i]);\n    }\n  }, {\n    key: \"removeBehaviour\",\n    value: function (t) {\n      t = this.behaviours.indexOf(t);\n      -1 < t && (this.behaviours.splice(t, 1).parents = null);\n    }\n  }, {\n    key: \"removeAllBehaviours\",\n    value: function () {\n      P.emptyArray(this.behaviours);\n    }\n  }, {\n    key: \"destroy\",\n    value: function () {\n      this.removeAllBehaviours(), this.energy = 0, this.dead = !0, this.parent = null;\n    }\n  }]), N);\n  function N(t) {\n    o(this, N), this.id = \"\", this.old = {}, this.data = {}, this.behaviours = [], this.p = [], this.v = [], this.a = [], this.rgb = {}, this.name = \"Particle\", this.id = A.id(this.name), this.old = {}, this.data = {}, this.behaviours = [], this.p = new F(), this.v = new F(), this.a = new F(), this.old.p = new F(), this.old.v = new F(), this.old.a = new F(), this.rgb = new B(), this.reset(), t && P.setProp(this, t);\n  }\n  var H = {\n      hexToRgb: function (t) {\n        t = \"#\" === t.charAt(0) ? t.substring(1, 7) : t;\n        return {\n          r: parseInt(t.substring(0, 2), 16),\n          g: parseInt(t.substring(2, 4), 16),\n          b: parseInt(t.substring(4, 6), 16)\n        };\n      },\n      rgbToHex: function (t) {\n        return \"rgb(\" + t.r + \", \" + t.g + \", \" + t.b + \")\";\n      },\n      getHex16FromParticle: function (t) {\n        return 65536 * Number(t.rgb.r) + 256 * Number(t.rgb.g) + Number(t.rgb.b);\n      }\n    },\n    q = (t(G, [{\n      key: \"set\",\n      value: function (t, e) {\n        return this.r = t, this.tha = e, this;\n      }\n    }, {\n      key: \"setR\",\n      value: function (t) {\n        return this.r = t, this;\n      }\n    }, {\n      key: \"setTha\",\n      value: function (t) {\n        return this.tha = t, this;\n      }\n    }, {\n      key: \"copy\",\n      value: function (t) {\n        return this.r = t.r, this.tha = t.tha, this;\n      }\n    }, {\n      key: \"toVector\",\n      value: function () {\n        return new F(this.getX(), this.getY());\n      }\n    }, {\n      key: \"getX\",\n      value: function () {\n        return this.r * Math.sin(this.tha);\n      }\n    }, {\n      key: \"getY\",\n      value: function () {\n        return -this.r * Math.cos(this.tha);\n      }\n    }, {\n      key: \"normalize\",\n      value: function () {\n        return this.r = 1, this;\n      }\n    }, {\n      key: \"equals\",\n      value: function (t) {\n        return t.r === this.r && t.tha === this.tha;\n      }\n    }, {\n      key: \"clear\",\n      value: function () {\n        return this.r = 0, this.tha = 0, this;\n      }\n    }, {\n      key: \"clone\",\n      value: function () {\n        return new G(this.r, this.tha);\n      }\n    }]), G);\n  function G(t, e) {\n    o(this, G), this.r = Math.abs(t) || 0, this.tha = e || 0;\n  }\n  var X = {\n      create: function (t) {\n        var e = new Float32Array(9);\n        return t && this.set(t, e), e;\n      },\n      set: function (t, e) {\n        for (var i = 0; i < 9; i++) e[i] = t[i];\n        return e;\n      },\n      multiply: function (t, e, i) {\n        var a = t[0],\n          r = t[1],\n          n = t[2],\n          s = t[3],\n          o = t[4],\n          h = t[6],\n          l = t[7],\n          u = e[0],\n          c = e[1],\n          d = e[2],\n          y = e[3],\n          p = e[4],\n          t = e[6],\n          e = e[7];\n        return i[0] = u * a + c * s, i[1] = u * r + c * o, i[2] = n * d, i[3] = y * a + p * s, i[4] = y * r + p * o, i[6] = t * a + e * s + h, i[7] = t * r + e * o + l, i;\n      },\n      inverse: function (t, e) {\n        var i = t[0],\n          a = t[1],\n          r = t[3],\n          n = t[4],\n          s = t[6],\n          o = t[7],\n          h = -r,\n          t = o * r - n * s,\n          r = 1 / (i * n + a * h);\n        return e[0] = n * r, e[1] = -a * r, e[3] = h * r, e[4] = i * r, e[6] = t * r, e[7] = (-o * i + a * s) * r, e;\n      },\n      multiplyVec2: function (t, e, i) {\n        var a = e[0],\n          e = e[1];\n        return i[0] = a * t[0] + e * t[3] + t[6], i[1] = a * t[1] + e * t[4] + t[7], i;\n      }\n    },\n    Y = (r(W, l), t(W, [{\n      key: \"getValue\",\n      value: function () {\n        var t = P.getRandFromArray(this._arr);\n        return \"random\" === t || \"Random\" === t ? s.randomColor() : t;\n      }\n    }], [{\n      key: \"createArraySpan\",\n      value: function (t) {\n        return t ? t instanceof W ? t : new W(t) : null;\n      }\n    }]), W);\n  function W(t) {\n    o(this, W);\n    var e = h(this, (W.__proto__ || Object.getPrototypeOf(W)).call(this));\n    return e._arr = P.toArray(t), e;\n  }\n  var Z = (t(Q, [{\n    key: \"contains\",\n    value: function (t, e) {\n      return t <= this.right && t >= this.x && e <= this.bottom && e >= this.y;\n    }\n  }]), Q);\n  function Q(t, e, i, a) {\n    o(this, Q), this.x = t, this.y = e, this.width = i, this.height = a, this.bottom = this.y + this.height, this.right = this.x + this.width;\n  }\n  var K = (t(J, [{\n    key: \"init\",\n    value: function () {\n      this.startTime = 0, this.nextTime = this.timePan.getValue();\n    }\n  }, {\n    key: \"getValue\",\n    value: function (t) {\n      return this.startTime += t, this.startTime >= this.nextTime ? (this.startTime = 0, this.nextTime = this.timePan.getValue(), 1 === this.numPan.b ? .5 < this.numPan.getValue(!1) ? 1 : 0 : this.numPan.getValue(!0)) : 0;\n    }\n  }]), J);\n  function J(t, e) {\n    o(this, J), this.numPan = l.setSpanValue(P.initValue(t, 1)), this.timePan = l.setSpanValue(P.initValue(e, 1)), this.startTime = 0, this.nextTime = 0, this.init();\n  }\n  var $ = (t(tt, [{\n    key: \"reset\",\n    value: function () {}\n  }, {\n    key: \"init\",\n    value: function (t, e) {\n      e ? this.initialize(e) : this.initialize(t);\n    }\n  }, {\n    key: \"initialize\",\n    value: function () {}\n  }]), tt);\n  function tt() {\n    o(this, tt);\n  }\n  var et = (r(it, $), t(it, [{\n    key: \"initialize\",\n    value: function (t) {\n      this.lifePan.a === 1 / 0 ? t.life = 1 / 0 : t.life = this.lifePan.getValue();\n    }\n  }]), it);\n  function it(t, e, i) {\n    o(this, it);\n    var a = h(this, (it.__proto__ || Object.getPrototypeOf(it)).call(this));\n    return a.lifePan = l.setSpanValue(t, e, i), a.name = \"Life\", a;\n  }\n  var at = (t(rt, [{\n    key: \"getPosition\",\n    value: function () {}\n  }, {\n    key: \"crossing\",\n    value: function () {}\n  }]), rt);\n  function rt() {\n    o(this, rt), this.vector = new F(0, 0), this.random = 0, this.crossType = \"dead\", this.alert = !0;\n  }\n  var nt = (r(st, at), t(st, [{\n    key: \"getPosition\",\n    value: function () {\n      return this.vector.x = this.x, this.vector.y = this.y, this.vector;\n    }\n  }, {\n    key: \"crossing\",\n    value: function () {\n      this.alert && (console.error(\"Sorry, PointZone does not support crossing method!\"), this.alert = !1);\n    }\n  }]), st);\n  function st(t, e) {\n    o(this, st);\n    var i = h(this, (st.__proto__ || Object.getPrototypeOf(st)).call(this));\n    return i.x = t, i.y = e, i;\n  }\n  var ot = (r(ht, $), t(ht, [{\n    key: \"reset\",\n    value: function (t) {\n      this.zone = P.initValue(t, new nt());\n    }\n  }, {\n    key: \"initialize\",\n    value: function (t) {\n      this.zone.getPosition(), t.p.x = this.zone.vector.x, t.p.y = this.zone.vector.y;\n    }\n  }]), ht);\n  function ht(t) {\n    o(this, ht);\n    var e = h(this, (ht.__proto__ || Object.getPrototypeOf(ht)).call(this));\n    return e.zone = P.initValue(t, new nt()), e.name = \"Position\", e;\n  }\n  var lt = (r(ut, $), t(ut, [{\n    key: \"reset\",\n    value: function (t, e, i) {\n      this.rPan = l.setSpanValue(t), this.thaPan = l.setSpanValue(e), this.type = P.initValue(i, \"vector\");\n    }\n  }, {\n    key: \"normalizeVelocity\",\n    value: function (t) {\n      return t * V.MEASURE;\n    }\n  }, {\n    key: \"initialize\",\n    value: function (t) {\n      var e;\n      \"p\" === this.type || \"P\" === this.type || \"polar\" === this.type ? (e = new q(this.normalizeVelocity(this.rPan.getValue()), this.thaPan.getValue() * s.PI_180), t.v.x = e.getX(), t.v.y = e.getY()) : (t.v.x = this.normalizeVelocity(this.rPan.getValue()), t.v.y = this.normalizeVelocity(this.thaPan.getValue()));\n    }\n  }]), ut);\n  function ut(t, e, i) {\n    o(this, ut);\n    var a = h(this, (ut.__proto__ || Object.getPrototypeOf(ut)).call(this));\n    return a.rPan = l.setSpanValue(t), a.thaPan = l.setSpanValue(e), a.type = P.initValue(i, \"vector\"), a.name = \"Velocity\", a;\n  }\n  var ct = (r(dt, $), t(dt, [{\n    key: \"initialize\",\n    value: function (t) {\n      t.mass = this.massPan.getValue();\n    }\n  }]), dt);\n  function dt(t, e, i) {\n    o(this, dt);\n    var a = h(this, (dt.__proto__ || Object.getPrototypeOf(dt)).call(this));\n    return a.massPan = l.setSpanValue(t, e, i), a.name = \"Mass\", a;\n  }\n  var yt = (r(pt, $), t(pt, [{\n    key: \"reset\",\n    value: function (t, e, i) {\n      this.radius = l.setSpanValue(t, e, i);\n    }\n  }, {\n    key: \"initialize\",\n    value: function (t) {\n      t.radius = this.radius.getValue(), t.data.oldRadius = t.radius;\n    }\n  }]), pt);\n  function pt(t, e, i) {\n    o(this, pt);\n    var a = h(this, (pt.__proto__ || Object.getPrototypeOf(pt)).call(this));\n    return a.radius = l.setSpanValue(t, e, i), a.name = \"Radius\", a;\n  }\n  var ft = (r(vt, $), t(vt, [{\n    key: \"initialize\",\n    value: function (t) {\n      var e = this.image.getValue();\n      t.body = \"string\" == typeof e ? {\n        width: this.w,\n        height: this.h,\n        src: e,\n        isInner: !0,\n        inner: !0\n      } : e;\n    }\n  }, {\n    key: \"setSpanValue\",\n    value: function (t) {\n      return t instanceof Y ? t : new Y(t);\n    }\n  }]), vt);\n  function vt(t, e, i) {\n    o(this, vt);\n    var a = h(this, (vt.__proto__ || Object.getPrototypeOf(vt)).call(this));\n    return a.image = a.setSpanValue(t), a.w = P.initValue(e, 20), a.h = P.initValue(i, a.w), a.name = \"Body\", a;\n  }\n  var gt = (t(mt, [{\n    key: \"reset\",\n    value: function (t, e) {\n      this.life = P.initValue(t, 1 / 0), this.easing = U.getEasing(e);\n    }\n  }, {\n    key: \"normalizeForce\",\n    value: function (t) {\n      return t.multiplyScalar(V.MEASURE);\n    }\n  }, {\n    key: \"normalizeValue\",\n    value: function (t) {\n      return t * V.MEASURE;\n    }\n  }, {\n    key: \"initialize\",\n    value: function () {}\n  }, {\n    key: \"calculate\",\n    value: function (t, e) {\n      this.age += e, this.age >= this.life || this.dead ? (this.energy = 0, this.dead = !0, this.destroy()) : (t = this.easing(t.age / t.life), this.energy = Math.max(1 - t, 0));\n    }\n  }, {\n    key: \"destroy\",\n    value: function () {\n      for (var t = this.parents.length; t--;) this.parents[t].removeBehaviour(this);\n      this.parents.length = 0;\n    }\n  }]), mt);\n  function mt(t, e) {\n    o(this, mt), this.life = P.initValue(t, 1 / 0), this.easing = U.getEasing(e), this.age = 0, this.energy = 1, this.dead = !1, this.parents = [], this.id = \"Behaviour_\" + mt.id++, this.name = \"Behaviour\";\n  }\n  gt.id = 0;\n  var bt = (r(_t, gt), t(_t, [{\n    key: \"reset\",\n    value: function (t, e, i, a) {\n      this.force = this.normalizeForce(new F(t, e)), i && n(_t.prototype.__proto__ || Object.getPrototypeOf(_t.prototype), \"reset\", this).call(this, i, a);\n    }\n  }, {\n    key: \"applyBehaviour\",\n    value: function (t, e, i) {\n      this.calculate(t, e, i), t.a.add(this.force);\n    }\n  }]), _t);\n  function _t(t, e, i, a) {\n    o(this, _t);\n    a = h(this, (_t.__proto__ || Object.getPrototypeOf(_t)).call(this, i, a));\n    return a.force = a.normalizeForce(new F(t, e)), a.name = \"Force\", a;\n  }\n  var xt = (r(kt, gt), t(kt, [{\n    key: \"reset\",\n    value: function (t, e, i, a, r) {\n      this.targetPosition = P.initValue(t, new F()), this.radius = P.initValue(i, 1e3), this.force = P.initValue(this.normalizeValue(e), 100), this.radiusSq = this.radius * this.radius, this.attractionForce = new F(), this.lengthSq = 0, a && n(kt.prototype.__proto__ || Object.getPrototypeOf(kt.prototype), \"reset\", this).call(this, a, r);\n    }\n  }, {\n    key: \"applyBehaviour\",\n    value: function (t, e, i) {\n      this.calculate(t, e, i), this.attractionForce.copy(this.targetPosition), this.attractionForce.sub(t.p), this.lengthSq = this.attractionForce.lengthSq(), 4e-5 < this.lengthSq && this.lengthSq < this.radiusSq && (this.attractionForce.normalize(), this.attractionForce.multiplyScalar(1 - this.lengthSq / this.radiusSq), this.attractionForce.multiplyScalar(this.force), t.a.add(this.attractionForce));\n    }\n  }]), kt);\n  function kt(t, e, i, a, r) {\n    o(this, kt);\n    r = h(this, (kt.__proto__ || Object.getPrototypeOf(kt)).call(this, a, r));\n    return r.targetPosition = P.initValue(t, new F()), r.radius = P.initValue(i, 1e3), r.force = P.initValue(r.normalizeValue(e), 100), r.radiusSq = r.radius * r.radius, r.attractionForce = new F(), r.lengthSq = 0, r.name = \"Attraction\", r;\n  }\n  var Pt = (r(Et, gt), t(Et, [{\n    key: \"reset\",\n    value: function (t, e, i, a, r) {\n      this.panFoce = new F(t, e), this.panFoce = this.normalizeForce(this.panFoce), this.delay = i, a && n(Et.prototype.__proto__ || Object.getPrototypeOf(Et.prototype), \"reset\", this).call(this, a, r);\n    }\n  }, {\n    key: \"initialize\",\n    value: function (t) {\n      t.data.time = 0;\n    }\n  }, {\n    key: \"applyBehaviour\",\n    value: function (t, e, i) {\n      this.calculate(t, e, i), t.data.time += e, t.data.time >= this.delay && (t.a.addXY(s.randomAToB(-this.panFoce.x, this.panFoce.x), s.randomAToB(-this.panFoce.y, this.panFoce.y)), t.data.time = 0);\n    }\n  }]), Et);\n  function Et(t, e, i, a, r) {\n    o(this, Et);\n    r = h(this, (Et.__proto__ || Object.getPrototypeOf(Et)).call(this, a, r));\n    return r.reset(t, e, i), r.time = 0, r.name = \"RandomDrift\", r;\n  }\n  var At = (r(Tt, bt), t(Tt, [{\n    key: \"reset\",\n    value: function (t, e, i) {\n      n(Tt.prototype.__proto__ || Object.getPrototypeOf(Tt.prototype), \"reset\", this).call(this, 0, t, e, i);\n    }\n  }]), Tt);\n  function Tt(t, e, i) {\n    o(this, Tt);\n    i = h(this, (Tt.__proto__ || Object.getPrototypeOf(Tt)).call(this, 0, t, e, i));\n    return i.name = \"Gravity\", i;\n  }\n  var Rt = (r(Ot, gt), t(Ot, [{\n    key: \"reset\",\n    value: function (t, e, i, a, r) {\n      this.emitter = P.initValue(t, null), this.mass = P.initValue(e, !0), this.callback = P.initValue(i, null), this.collisionPool = [], this.delta = new F(), a && n(Ot.prototype.__proto__ || Object.getPrototypeOf(Ot.prototype), \"reset\", this).call(this, a, r);\n    }\n  }, {\n    key: \"applyBehaviour\",\n    value: function (t, e, i) {\n      for (var a, r, n, s, o, h, l = (this.emitter ? this.emitter.particles : this.pool).slice(i), u = l.length, c = void 0, d = void 0, d = 0; d < u; d++) {\n        (c = l[d]) !== t && (this.delta.copy(c.p), this.delta.sub(t.p), (a = this.delta.lengthSq()) <= (h = t.radius + c.radius) * h && (r = h - Math.sqrt(a), r += .5, n = t.mass + c.mass, s = this.mass ? c.mass / n : .5, o = this.mass ? t.mass / n : .5, t.p.add(this.delta.clone().normalize().multiplyScalar(r * -s)), c.p.add(this.delta.normalize().multiplyScalar(r * o)), this.callback && this.callback(t, c)));\n      }\n    }\n  }]), Ot);\n  function Ot(t, e, i, a, r) {\n    o(this, Ot);\n    r = h(this, (Ot.__proto__ || Object.getPrototypeOf(Ot)).call(this, a, r));\n    return r.reset(t, e, i), r.name = \"Collision\", r;\n  }\n  var wt = (r(Ct, gt), t(Ct, [{\n    key: \"reset\",\n    value: function (t, e, i, a) {\n      this.zone = t, this.zone.crossType = P.initValue(e, \"dead\"), i && n(Ct.prototype.__proto__ || Object.getPrototypeOf(Ct.prototype), \"reset\", this).call(this, i, a);\n    }\n  }, {\n    key: \"applyBehaviour\",\n    value: function (t, e, i) {\n      this.calculate(t, e, i), this.zone.crossing(t);\n    }\n  }]), Ct);\n  function Ct(t, e, i, a) {\n    o(this, Ct);\n    a = h(this, (Ct.__proto__ || Object.getPrototypeOf(Ct)).call(this, i, a));\n    return a.reset(t, e), a.name = \"CrossZone\", a;\n  }\n  var St = (r(It, gt), t(It, [{\n    key: \"reset\",\n    value: function (t, e, i, a) {\n      this.same = null == e, this.a = l.setSpanValue(P.initValue(t, 1)), this.b = l.setSpanValue(e), i && n(It.prototype.__proto__ || Object.getPrototypeOf(It.prototype), \"reset\", this).call(this, i, a);\n    }\n  }, {\n    key: \"initialize\",\n    value: function (t) {\n      t.data.alphaA = this.a.getValue(), this.same ? t.data.alphaB = t.data.alphaA : t.data.alphaB = this.b.getValue();\n    }\n  }, {\n    key: \"applyBehaviour\",\n    value: function (t, e, i) {\n      this.calculate(t, e, i), t.alpha = t.data.alphaB + (t.data.alphaA - t.data.alphaB) * this.energy, t.alpha < .001 && (t.alpha = 0);\n    }\n  }]), It);\n  function It(t, e, i, a) {\n    o(this, It);\n    a = h(this, (It.__proto__ || Object.getPrototypeOf(It)).call(this, i, a));\n    return a.reset(t, e), a.name = \"Alpha\", a;\n  }\n  var Dt = (r(Vt, gt), t(Vt, [{\n    key: \"reset\",\n    value: function (t, e, i, a) {\n      this.same = null == e, this.a = l.setSpanValue(P.initValue(t, 1)), this.b = l.setSpanValue(e), i && n(Vt.prototype.__proto__ || Object.getPrototypeOf(Vt.prototype), \"reset\", this).call(this, i, a);\n    }\n  }, {\n    key: \"initialize\",\n    value: function (t) {\n      t.data.scaleA = this.a.getValue(), t.data.oldRadius = t.radius, t.data.scaleB = this.same ? t.data.scaleA : this.b.getValue();\n    }\n  }, {\n    key: \"applyBehaviour\",\n    value: function (t, e, i) {\n      this.calculate(t, e, i), t.scale = t.data.scaleB + (t.data.scaleA - t.data.scaleB) * this.energy, t.scale < 1e-4 && (t.scale = 0), t.radius = t.data.oldRadius * t.scale;\n    }\n  }]), Vt);\n  function Vt(t, e, i, a) {\n    o(this, Vt);\n    a = h(this, (Vt.__proto__ || Object.getPrototypeOf(Vt)).call(this, i, a));\n    return a.reset(t, e), a.name = \"Scale\", a;\n  }\n  var Mt = (r(Bt, gt), t(Bt, [{\n    key: \"reset\",\n    value: function (t, e, i, a, r) {\n      this.same = null == e, this.a = l.setSpanValue(P.initValue(t, \"Velocity\")), this.b = l.setSpanValue(P.initValue(e, 0)), this.style = P.initValue(i, \"to\"), a && n(Bt.prototype.__proto__ || Object.getPrototypeOf(Bt.prototype), \"reset\", this).call(this, a, r);\n    }\n  }, {\n    key: \"initialize\",\n    value: function (t) {\n      t.rotation = this.a.getValue(), t.data.rotationA = this.a.getValue(), this.same || (t.data.rotationB = this.b.getValue());\n    }\n  }, {\n    key: \"applyBehaviour\",\n    value: function (t, e, i) {\n      this.calculate(t, e, i), this.same ? \"V\" !== this.a.a && \"Velocity\" !== this.a.a && \"v\" !== this.a.a || (t.rotation = t.getDirection()) : \"to\" === this.style || \"TO\" === this.style || \"_\" === this.style ? t.rotation += t.data.rotationB + (t.data.rotationA - t.data.rotationB) * this.energy : t.rotation += t.data.rotationB;\n    }\n  }]), Bt);\n  function Bt(t, e, i, a, r) {\n    o(this, Bt);\n    r = h(this, (Bt.__proto__ || Object.getPrototypeOf(Bt)).call(this, a, r));\n    return r.reset(t, e, i), r.name = \"Rotate\", r;\n  }\n  var Lt = (r(Ut, gt), t(Ut, [{\n    key: \"reset\",\n    value: function (t, e, i, a) {\n      this.a = Y.createArraySpan(t), this.b = Y.createArraySpan(e), i && n(Ut.prototype.__proto__ || Object.getPrototypeOf(Ut.prototype), \"reset\", this).call(this, i, a);\n    }\n  }, {\n    key: \"initialize\",\n    value: function (t) {\n      t.color = this.a.getValue(), t.data.colorA = H.hexToRgb(t.color), this.b && (t.data.colorB = H.hexToRgb(this.b.getValue()));\n    }\n  }, {\n    key: \"applyBehaviour\",\n    value: function (t, e, i) {\n      this.b ? (this.calculate(t, e, i), t.rgb.r = t.data.colorB.r + (t.data.colorA.r - t.data.colorB.r) * this.energy, t.rgb.g = t.data.colorB.g + (t.data.colorA.g - t.data.colorB.g) * this.energy, t.rgb.b = t.data.colorB.b + (t.data.colorA.b - t.data.colorB.b) * this.energy, t.rgb.r = Math.floor(t.rgb.r), t.rgb.g = Math.floor(t.rgb.g), t.rgb.b = Math.floor(t.rgb.b)) : (t.rgb.r = t.data.colorA.r, t.rgb.g = t.data.colorA.g, t.rgb.b = t.data.colorA.b);\n    }\n  }]), Ut);\n  function Ut(t, e, i, a) {\n    o(this, Ut);\n    a = h(this, (Ut.__proto__ || Object.getPrototypeOf(Ut)).call(this, i, a));\n    return a.reset(t, e), a.name = \"Color\", a;\n  }\n  var Ft = \"changing\",\n    zt = (r(jt, gt), t(jt, [{\n      key: \"setAngleAndForce\",\n      value: function (t, e) {\n        this.force = Ft, this.angle = s.PI / 2, \"right\" === t ? this.angle = s.PI / 2 : \"left\" === t ? this.angle = -s.PI / 2 : \"random\" === t ? this.angle = \"random\" : t instanceof l ? (this.angle = \"span\", this.span = t) : t && (this.angle = t), \"changing\" === String(e).toLowerCase() || \"chang\" === String(e).toLowerCase() || \"auto\" === String(e).toLowerCase() ? this.force = Ft : e && (this.force = e);\n      }\n    }, {\n      key: \"reset\",\n      value: function (t, e, i, a) {\n        this.angle = s.PI / 2, this.setAngleAndForce(t, e), i && n(jt.prototype.__proto__ || Object.getPrototypeOf(jt.prototype), \"reset\", this).call(this, i, a);\n      }\n    }, {\n      key: \"initialize\",\n      value: function (t) {\n        \"random\" === this.angle ? t.data.cangle = s.randomAToB(-s.PI, s.PI) : \"span\" === this.angle && (t.data.cangle = this.span.getValue()), t.data.cyclone = new F(0, 0);\n      }\n    }, {\n      key: \"applyBehaviour\",\n      value: function (t, e, i) {\n        this.calculate(t, e, i);\n        e = void 0, i = t.v.getGradient();\n        \"random\" === this.angle || \"span\" === this.angle ? i += t.data.cangle : i += this.angle, e = this.force === Ft ? t.v.length() / 100 : this.force, t.data.cyclone.x = e * Math.cos(i), t.data.cyclone.y = e * Math.sin(i), t.data.cyclone = this.normalizeForce(t.data.cyclone), t.a.add(t.data.cyclone);\n      }\n    }]), jt);\n  function jt(t, e, i, a) {\n    o(this, jt);\n    a = h(this, (jt.__proto__ || Object.getPrototypeOf(jt)).call(this, i, a));\n    return a.setAngleAndForce(t, e), a.name = \"Cyclone\", a;\n  }\n  var Nt = (r(Ht, xt), t(Ht, [{\n    key: \"reset\",\n    value: function (t, e, i, a, r) {\n      n(Ht.prototype.__proto__ || Object.getPrototypeOf(Ht.prototype), \"reset\", this).call(this, t, e, i, a, r), this.force *= -1;\n    }\n  }]), Ht);\n  function Ht(t, e, i, a, r) {\n    o(this, Ht);\n    r = h(this, (Ht.__proto__ || Object.getPrototypeOf(Ht)).call(this, t, e, i, a, r));\n    return r.force *= -1, r.name = \"Repulsion\", r;\n  }\n  var qt = (r(Gt, gt), t(Gt, [{\n    key: \"reset\",\n    value: function (t, e, i, a) {\n      this.distanceVec = new F(), this.centerPoint = P.initValue(t, new F()), this.force = P.initValue(this.normalizeValue(e), 100), i && n(Gt.prototype.__proto__ || Object.getPrototypeOf(Gt.prototype), \"reset\", this).call(this, i, a);\n    }\n  }, {\n    key: \"initialize\",\n    value: function () {}\n  }, {\n    key: \"applyBehaviour\",\n    value: function (t, e) {\n      this.distanceVec.set(this.centerPoint.x - t.p.x, this.centerPoint.y - t.p.y);\n      var i,\n        a = this.distanceVec.lengthSq();\n      0 !== a && (i = this.distanceVec.length(), i = this.force * e / (a * i), t.v.x += i * this.distanceVec.x, t.v.y += i * this.distanceVec.y);\n    }\n  }]), Gt);\n  function Gt(t, e, i, a) {\n    o(this, Gt);\n    a = h(this, (Gt.__proto__ || Object.getPrototypeOf(Gt)).call(this, i, a));\n    return a.distanceVec = new F(), a.centerPoint = P.initValue(t, new F()), a.force = P.initValue(a.normalizeValue(e), 100), a.name = \"GravityWell\", a;\n  }\n  var Xt = {\n      initialize: function (t, e, i) {\n        for (var a = i.length, r = void 0, r = 0; r < a; r++) i[r] instanceof $ ? i[r].init(t, e) : this.init(t, e, i[r]);\n        this.bindEmitter(t, e);\n      },\n      init: function (t, e, i) {\n        P.setProp(e, i), P.setVectorVal(e, i);\n      },\n      bindEmitter: function (t, e) {\n        t.bindEmitter && (e.p.add(t.p), e.v.add(t.v), e.a.add(t.a), e.v.rotate(s.degreeTransform(t.rotation)));\n      }\n    },\n    Yt = (r(Wt, j), t(Wt, [{\n      key: \"emit\",\n      value: function (t, e) {\n        this.stoped = !1, this.emitTime = 0, this.totalTime = P.initValue(t, 1 / 0), !0 === e || \"life\" === e || \"destroy\" === e ? this.life = \"once\" === t ? 1 : this.totalTime : isNaN(e) || (this.life = e), this.rate.init();\n      }\n    }, {\n      key: \"stop\",\n      value: function () {\n        this.totalTime = -1, this.emitTime = 0, this.stoped = !0;\n      }\n    }, {\n      key: \"preEmit\",\n      value: function (t) {\n        var e = this.stoped,\n          i = this.emitTime,\n          a = this.totalTime;\n        this.stoped = !1, this.emitTime = 0, this.totalTime = t, this.rate.init();\n        for (; .0167 < t;) t -= .0167, this.update(.0167);\n        this.stoped = e, this.emitTime = i + Math.max(t, 0), this.totalTime = a;\n      }\n    }, {\n      key: \"removeAllParticles\",\n      value: function () {\n        for (var t = this.particles.length; t--;) this.particles[t].dead = !0;\n      }\n    }, {\n      key: \"addSelfInitialize\",\n      value: function (t) {\n        t.init ? t.init(this) : this.initAll();\n      }\n    }, {\n      key: \"addInitialize\",\n      value: function () {\n        for (var t = arguments.length, e = Array(t), i = 0; i < t; i++) e[i] = arguments[i];\n        for (var a = e.length; a--;) this.initializes.push(e[a]);\n      }\n    }, {\n      key: \"removeInitialize\",\n      value: function (t) {\n        t = this.initializes.indexOf(t);\n        -1 < t && this.initializes.splice(t, 1);\n      }\n    }, {\n      key: \"removeAllInitializers\",\n      value: function () {\n        P.emptyArray(this.initializes);\n      }\n    }, {\n      key: \"addBehaviour\",\n      value: function () {\n        for (var t = arguments.length, e = Array(t), i = 0; i < t; i++) e[i] = arguments[i];\n        for (var a = arguments.length; a--;) {\n          var r = e[a];\n          this.behaviours.push(r), r.parents && r.parents.push(this);\n        }\n      }\n    }, {\n      key: \"removeBehaviour\",\n      value: function (t) {\n        var e = this.behaviours.indexOf(t);\n        return this.behaviours.splice(e, 1), t.parents && (e = t.parents.indexOf(t), t.parents.splice(e, 1)), e;\n      }\n    }, {\n      key: \"removeAllBehaviours\",\n      value: function () {\n        P.emptyArray(this.behaviours);\n      }\n    }, {\n      key: \"update\",\n      value: function (t) {\n        this.age += t, (this.age >= this.life || this.dead) && this.destroy(), this.emitting(t), this.integrate(t);\n      }\n    }, {\n      key: \"integrate\",\n      value: function (t) {\n        if (this.parent) {\n          var e = 1 - this.damping;\n          this.parent.integrator.calculate(this, t, e);\n          for (var i = void 0, a = void 0, i = this.particles.length - 1; 0 <= i; i--) (a = this.particles[i]).update(t, i), this.parent.integrator.calculate(a, t, e), this.dispatch(\"PARTICLE_UPDATE\", a), a.dead && (this.dispatch(\"PARTICLE_DEAD\", a), this.parent.pool.expire(a), this.particles.splice(i, 1));\n        }\n      }\n    }, {\n      key: \"dispatch\",\n      value: function (t, e) {\n        this.parent && this.parent.dispatchEvent(t, e), this.bindEvent && this.dispatchEvent(t, e);\n      }\n    }, {\n      key: \"emitting\",\n      value: function (t) {\n        if (\"once\" === this.totalTime) {\n          var e = void 0,\n            i = this.rate.getValue(99999);\n          for (0 < i && (this.emitSpeed = i), e = 0; e < i; e++) this.createParticle();\n          this.totalTime = \"none\";\n        } else if (this.emitTime += t, this.emitTime < this.totalTime) {\n          var a = this.rate.getValue(t),\n            r = void 0;\n          for (0 < a && (this.emitSpeed = a), r = 0; r < a; r++) this.createParticle();\n        }\n      }\n    }, {\n      key: \"createParticle\",\n      value: function (t, e) {\n        var i = this.parent.pool.get(j);\n        return this.setupParticle(i, t, e), this.dispatch(\"PARTICLE_CREATED\", i), i;\n      }\n    }, {\n      key: \"setupParticle\",\n      value: function (t, e, i) {\n        var a = this.initializes,\n          r = this.behaviours;\n        e && (a = P.toArray(e)), i && (r = P.toArray(i)), t.reset(), Xt.initialize(this, t, a), t.addBehaviours(r), (t.parent = this).particles.push(t);\n      }\n    }, {\n      key: \"remove\",\n      value: function () {\n        this.stop(), P.destroyAll(this.particles);\n      }\n    }, {\n      key: \"destroy\",\n      value: function () {\n        this.dead = !0, this.remove(), this.removeAllInitializers(), this.removeAllBehaviours(), this.parent && this.parent.removeEmitter(this);\n      }\n    }]), Wt);\n  function Wt() {\n    var t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {};\n    o(this, Wt);\n    t = h(this, (Wt.__proto__ || Object.getPrototypeOf(Wt)).call(this, t));\n    return t.particles = [], t.behaviours = [], t.initializes = [], t.emitTime = 0, t.emitSpeed = 0, t.totalTime = -1, t.damping = .006, t.bindEmitter = !0, t.rate = new K(1, .1), t.name = \"Emitter\", t.id = A.id(t.name), t;\n  }\n  C.bind(Yt);\n  var Zt = (r(Qt, Yt), t(Qt, [{\n    key: \"addSelfBehaviour\",\n    value: function () {\n      for (var t = arguments.length, e = Array(t), i = 0; i < t; i++) e[i] = arguments[i];\n      for (var a = void 0, r = e.length, a = 0; a < r; a++) {\n        var n = e[a];\n        this.selfBehaviours.push(n), n.initialize(this);\n      }\n    }\n  }, {\n    key: \"removeSelfBehaviour\",\n    value: function (t) {\n      t = this.selfBehaviours.indexOf(t);\n      -1 < t && this.selfBehaviours.splice(t, 1);\n    }\n  }, {\n    key: \"update\",\n    value: function (t) {\n      if (n(Qt.prototype.__proto__ || Object.getPrototypeOf(Qt.prototype), \"update\", this).call(this, t), !this.sleep) for (var e = this.selfBehaviours.length, i = void 0, i = 0; i < e; i++) this.selfBehaviours[i].applyBehaviour(this, t, i);\n    }\n  }]), Qt);\n  function Qt(t) {\n    o(this, Qt);\n    t = h(this, (Qt.__proto__ || Object.getPrototypeOf(Qt)).call(this, t));\n    return t.selfBehaviours = [], t;\n  }\n  var Kt = (r(Jt, Yt), t(Jt, [{\n    key: \"initEventHandler\",\n    value: function () {\n      var e = this;\n      this.mousemoveHandler = function (t) {\n        return e.mousemove.call(e, t);\n      }, this.mousedownHandler = function (t) {\n        return e.mousedown.call(e, t);\n      }, this.mouseupHandler = function (t) {\n        return e.mouseup.call(e, t);\n      }, this.mouseTarget.addEventListener(\"mousemove\", this.mousemoveHandler, !1);\n    }\n  }, {\n    key: \"emit\",\n    value: function () {\n      this._allowEmitting = !0;\n    }\n  }, {\n    key: \"stop\",\n    value: function () {\n      this._allowEmitting = !1;\n    }\n  }, {\n    key: \"mousemove\",\n    value: function (t) {\n      t.layerX || 0 === t.layerX ? (this.p.x += (t.layerX - this.p.x) * this.ease, this.p.y += (t.layerY - this.p.y) * this.ease) : !t.offsetX && 0 !== t.offsetX || (this.p.x += (t.offsetX - this.p.x) * this.ease, this.p.y += (t.offsetY - this.p.y) * this.ease), this._allowEmitting && n(Jt.prototype.__proto__ || Object.getPrototypeOf(Jt.prototype), \"emit\", this).call(this, \"once\");\n    }\n  }, {\n    key: \"destroy\",\n    value: function () {\n      n(Jt.prototype.__proto__ || Object.getPrototypeOf(Jt.prototype), \"destroy\", this).call(this), this.mouseTarget.removeEventListener(\"mousemove\", this.mousemoveHandler, !1);\n    }\n  }]), Jt);\n  function Jt(t, e, i) {\n    o(this, Jt);\n    i = h(this, (Jt.__proto__ || Object.getPrototypeOf(Jt)).call(this, i));\n    return i.mouseTarget = P.initValue(t, window), i.ease = P.initValue(e, .7), i._allowEmitting = !1, i.initEventHandler(), i;\n  }\n  var $t = (t(te, [{\n    key: \"setStroke\",\n    value: function (t, e) {\n      t = 0 < arguments.length && void 0 !== t ? t : \"#000000\", e = 1 < arguments.length && void 0 !== e ? e : 1;\n      this.stroke = {\n        color: t,\n        thinkness: e\n      };\n    }\n  }, {\n    key: \"initHandler\",\n    value: function () {\n      var e = this;\n      this._protonUpdateHandler = function () {\n        e.onProtonUpdate.call(e);\n      }, this._protonUpdateAfterHandler = function () {\n        e.onProtonUpdateAfter.call(e);\n      }, this._emitterAddedHandler = function (t) {\n        e.onEmitterAdded.call(e, t);\n      }, this._emitterRemovedHandler = function (t) {\n        e.onEmitterRemoved.call(e, t);\n      }, this._particleCreatedHandler = function (t) {\n        e.onParticleCreated.call(e, t);\n      }, this._particleUpdateHandler = function (t) {\n        e.onParticleUpdate.call(e, t);\n      }, this._particleDeadHandler = function (t) {\n        e.onParticleDead.call(e, t);\n      };\n    }\n  }, {\n    key: \"init\",\n    value: function (t) {\n      (this.parent = t).addEventListener(\"PROTON_UPDATE\", this._protonUpdateHandler), t.addEventListener(\"PROTON_UPDATE_AFTER\", this._protonUpdateAfterHandler), t.addEventListener(\"EMITTER_ADDED\", this._emitterAddedHandler), t.addEventListener(\"EMITTER_REMOVED\", this._emitterRemovedHandler), t.addEventListener(\"PARTICLE_CREATED\", this._particleCreatedHandler), t.addEventListener(\"PARTICLE_UPDATE\", this._particleUpdateHandler), t.addEventListener(\"PARTICLE_DEAD\", this._particleDeadHandler);\n    }\n  }, {\n    key: \"resize\",\n    value: function () {}\n  }, {\n    key: \"destroy\",\n    value: function () {\n      this.remove();\n    }\n  }, {\n    key: \"remove\",\n    value: function () {\n      this.parent.removeEventListener(\"PROTON_UPDATE\", this._protonUpdateHandler), this.parent.removeEventListener(\"PROTON_UPDATE_AFTER\", this._protonUpdateAfterHandler), this.parent.removeEventListener(\"EMITTER_ADDED\", this._emitterAddedHandler), this.parent.removeEventListener(\"EMITTER_REMOVED\", this._emitterRemovedHandler), this.parent.removeEventListener(\"PARTICLE_CREATED\", this._particleCreatedHandler), this.parent.removeEventListener(\"PARTICLE_UPDATE\", this._particleUpdateHandler), this.parent.removeEventListener(\"PARTICLE_DEAD\", this._particleDeadHandler), this.parent = null;\n    }\n  }, {\n    key: \"onProtonUpdate\",\n    value: function () {}\n  }, {\n    key: \"onProtonUpdateAfter\",\n    value: function () {}\n  }, {\n    key: \"onEmitterAdded\",\n    value: function () {}\n  }, {\n    key: \"onEmitterRemoved\",\n    value: function () {}\n  }, {\n    key: \"onParticleCreated\",\n    value: function () {}\n  }, {\n    key: \"onParticleUpdate\",\n    value: function () {}\n  }, {\n    key: \"onParticleDead\",\n    value: function () {}\n  }]), te);\n  function te(t, e) {\n    o(this, te), this.pool = new T(), this.element = t, this.stroke = e, this.circleConf = {\n      isCircle: !0\n    }, this.initHandler(), this.name = \"BaseRenderer\";\n  }\n  var ee = (r(ie, $t), t(ie, [{\n    key: \"resize\",\n    value: function (t, e) {\n      this.element.width = t, this.element.height = e;\n    }\n  }, {\n    key: \"onProtonUpdate\",\n    value: function () {\n      this.context.clearRect(0, 0, this.element.width, this.element.height);\n    }\n  }, {\n    key: \"onParticleCreated\",\n    value: function (t) {\n      t.body ? x(t.body, this.addImg2Body, t) : t.color = t.color || \"#ff0000\";\n    }\n  }, {\n    key: \"onParticleUpdate\",\n    value: function (t) {\n      t.body ? t.body instanceof Image && this.drawImage(t) : this.drawCircle(t);\n    }\n  }, {\n    key: \"onParticleDead\",\n    value: function (t) {\n      t.body = null;\n    }\n  }, {\n    key: \"addImg2Body\",\n    value: function (t, e) {\n      e.body = t;\n    }\n  }, {\n    key: \"drawImage\",\n    value: function (t) {\n      var e,\n        i = t.body.width * t.scale | 0,\n        a = t.body.height * t.scale | 0,\n        r = t.p.x - i / 2,\n        n = t.p.y - a / 2;\n      t.color ? (t.data.buffer || (t.data.buffer = this.createBuffer(t.body)), (e = t.data.buffer.getContext(\"2d\")).clearRect(0, 0, t.data.buffer.width, t.data.buffer.height), e.globalAlpha = t.alpha, e.drawImage(t.body, 0, 0), e.globalCompositeOperation = \"source-atop\", e.fillStyle = H.rgbToHex(t.rgb), e.fillRect(0, 0, t.data.buffer.width, t.data.buffer.height), e.globalCompositeOperation = \"source-over\", e.globalAlpha = 1, this.context.drawImage(t.data.buffer, 0, 0, t.data.buffer.width, t.data.buffer.height, r, n, i, a)) : (this.context.save(), this.context.globalAlpha = t.alpha, this.context.translate(t.p.x, t.p.y), this.context.rotate(s.degreeTransform(t.rotation)), this.context.translate(-t.p.x, -t.p.y), this.context.drawImage(t.body, 0, 0, t.body.width, t.body.height, r, n, i, a), this.context.globalAlpha = 1, this.context.restore());\n    }\n  }, {\n    key: \"drawCircle\",\n    value: function (t) {\n      t.rgb ? this.context.fillStyle = \"rgba(\" + t.rgb.r + \",\" + t.rgb.g + \",\" + t.rgb.b + \",\" + t.alpha + \")\" : this.context.fillStyle = t.color, this.context.beginPath(), this.context.arc(t.p.x, t.p.y, t.radius, 0, 2 * Math.PI, !0), this.stroke && (this.context.strokeStyle = this.stroke.color, this.context.lineWidth = this.stroke.thinkness, this.context.stroke()), this.context.closePath(), this.context.fill();\n    }\n  }, {\n    key: \"createBuffer\",\n    value: function (t) {\n      if (t instanceof Image) {\n        var e = t.width + \"_\" + t.height,\n          i = this.bufferCache[e];\n        return i || ((i = document.createElement(\"canvas\")).width = t.width, i.height = t.height, this.bufferCache[e] = i), i;\n      }\n    }\n  }]), ie);\n  function ie(t) {\n    o(this, ie);\n    t = h(this, (ie.__proto__ || Object.getPrototypeOf(ie)).call(this, t));\n    return t.stroke = null, t.context = t.element.getContext(\"2d\"), t.bufferCache = {}, t.name = \"CanvasRenderer\", t;\n  }\n  var ae = (r(re, $t), t(re, [{\n    key: \"onParticleCreated\",\n    value: function (t) {\n      t.body ? x(t.body, this.addImg2Body, t) : (t.body = this.pool.get(this.circleConf, t), this.element.appendChild(t.body));\n    }\n  }, {\n    key: \"onParticleUpdate\",\n    value: function (t) {\n      this.bodyReady(t) && (this.transform3d ? v.transform3d(t.body, t.p.x, t.p.y, t.scale, t.rotation) : v.transform(t.body, t.p.x, t.p.y, t.scale, t.rotation), t.body.style.opacity = t.alpha, t.body.isCircle && (t.body.style.backgroundColor = t.color || \"#ff0000\"));\n    }\n  }, {\n    key: \"onParticleDead\",\n    value: function (t) {\n      this.bodyReady(t) && (this.element.removeChild(t.body), this.pool.expire(t.body), t.body = null);\n    }\n  }, {\n    key: \"bodyReady\",\n    value: function (t) {\n      return \"object\" === i(t.body) && t.body && !t.body.isInner;\n    }\n  }, {\n    key: \"addImg2Body\",\n    value: function (t, e) {\n      e.dead || (e.body = this.pool.get(t, e), v.resize(e.body, t.width, t.height), this.element.appendChild(e.body));\n    }\n  }, {\n    key: \"createBody\",\n    value: function (t, e) {\n      return t.isCircle ? this.createCircle(e) : this.createSprite(t, e);\n    }\n  }, {\n    key: \"createCircle\",\n    value: function (t) {\n      var e = v.createDiv(t.id + \"_dom\", 2 * t.radius, 2 * t.radius);\n      return e.style.borderRadius = t.radius + \"px\", this.stroke && (e.style.borderColor = this.stroke.color, e.style.borderWidth = this.stroke.thinkness + \"px\"), e.isCircle = !0, e;\n    }\n  }, {\n    key: \"createSprite\",\n    value: function (t, e) {\n      var i = \"string\" == typeof t ? t : t.src,\n        t = v.createDiv(e.id + \"_dom\", t.width, t.height);\n      return t.style.backgroundImage = \"url(\" + i + \")\", t;\n    }\n  }]), re);\n  function re(t) {\n    o(this, re);\n    var i = h(this, (re.__proto__ || Object.getPrototypeOf(re)).call(this, t));\n    return i.stroke = null, i.pool.create = function (t, e) {\n      return i.createBody(t, e);\n    }, i.addImg2Body = i.addImg2Body.bind(i), i.transform3d = !1, i.name = \"DomRenderer\", i;\n  }\n  var ne = (r(se, $t), t(se, [{\n    key: \"onParticleCreated\",\n    value: function (t) {\n      t.body ? this.createSprite(t) : this.createCircle(t), this.element.addChild(t.body);\n    }\n  }, {\n    key: \"onParticleUpdate\",\n    value: function (t) {\n      t.body && (t.body.x = t.p.x, t.body.y = t.p.y, t.body.alpha = t.alpha, t.body.scaleX = t.body.scaleY = t.scale, t.body.rotation = t.rotation);\n    }\n  }, {\n    key: \"onParticleDead\",\n    value: function (t) {\n      t.body && (t.body.parent && t.body.parent.removeChild(t.body), this.pool.expire(t.body), t.body = null), t.graphics && this.pool.expire(t.graphics);\n    }\n  }, {\n    key: \"createSprite\",\n    value: function (t) {\n      t.body = this.pool.get(t.body), t.body.parent || t.body.image && (t.body.regX = t.body.image.width / 2, t.body.regY = t.body.image.height / 2);\n    }\n  }, {\n    key: \"createCircle\",\n    value: function (t) {\n      var e = this.pool.get(createjs.Graphics);\n      this.stroke && (this.stroke instanceof String ? e.beginStroke(this.stroke) : e.beginStroke(\"#000000\")), e.beginFill(t.color || \"#ff0000\").drawCircle(0, 0, t.radius);\n      var i = this.pool.get(createjs.Shape, [e]);\n      t.body = i, t.graphics = e;\n    }\n  }]), se);\n  function se(t, e) {\n    o(this, se);\n    t = h(this, (se.__proto__ || Object.getPrototypeOf(se)).call(this, t));\n    return t.stroke = e, t.name = \"EaselRenderer\", t;\n  }\n  var oe = (r(he, $t), t(he, [{\n    key: \"resize\",\n    value: function (t, e) {\n      this.element.width = t, this.element.height = e;\n    }\n  }, {\n    key: \"createImageData\",\n    value: function (t) {\n      this.rectangle = t || new Z(0, 0, this.element.width, this.element.height), this.imageData = this.context.createImageData(this.rectangle.width, this.rectangle.height), this.context.putImageData(this.imageData, this.rectangle.x, this.rectangle.y);\n    }\n  }, {\n    key: \"onProtonUpdate\",\n    value: function () {\n      this.context.clearRect(this.rectangle.x, this.rectangle.y, this.rectangle.width, this.rectangle.height), this.imageData = this.context.getImageData(this.rectangle.x, this.rectangle.y, this.rectangle.width, this.rectangle.height);\n    }\n  }, {\n    key: \"onProtonUpdateAfter\",\n    value: function () {\n      this.context.putImageData(this.imageData, this.rectangle.x, this.rectangle.y);\n    }\n  }, {\n    key: \"onParticleCreated\",\n    value: function () {}\n  }, {\n    key: \"onParticleUpdate\",\n    value: function (t) {\n      this.imageData && this.setPixel(this.imageData, Math.floor(t.p.x - this.rectangle.x), Math.floor(t.p.y - this.rectangle.y), t);\n    }\n  }, {\n    key: \"setPixel\",\n    value: function (t, e, i, a) {\n      var r = a.rgb;\n      e < 0 || e > this.element.width || i < 0 || i > this.elementwidth || (e = 4 * ((i >> 0) * t.width + (e >> 0)), t.data[e] = r.r, t.data[1 + e] = r.g, t.data[2 + e] = r.b, t.data[3 + e] = 255 * a.alpha);\n    }\n  }, {\n    key: \"onParticleDead\",\n    value: function () {}\n  }]), he);\n  function he(t, e) {\n    o(this, he);\n    t = h(this, (he.__proto__ || Object.getPrototypeOf(he)).call(this, t));\n    return t.context = t.element.getContext(\"2d\"), t.imageData = null, t.rectangle = null, t.rectangle = e, t.createImageData(e), t.name = \"PixelRenderer\", t;\n  }\n  var le = void 0,\n    ue = (r(ce, $t), t(ce, [{\n      key: \"setPIXI\",\n      value: function (t) {\n        try {\n          le = t || {\n            Sprite: {}\n          }, this.createFromImage = le.Sprite.from || le.Sprite.fromImage;\n        } catch (t) {}\n      }\n    }, {\n      key: \"onProtonUpdate\",\n      value: function () {}\n    }, {\n      key: \"onParticleCreated\",\n      value: function (t) {\n        t.body ? t.body = this.pool.get(t.body, t) : t.body = this.pool.get(this.circleConf, t), this.blendMode && (t.body.blendMode = this.blendMode), this.element.addChild(t.body);\n      }\n    }, {\n      key: \"onParticleUpdate\",\n      value: function (t) {\n        this.transform(t, t.body), !0 !== this.setColor && !0 !== this.color || (t.body.tint = H.getHex16FromParticle(t));\n      }\n    }, {\n      key: \"onParticleDead\",\n      value: function (t) {\n        this.element.removeChild(t.body), this.pool.expire(t.body), t.body = null;\n      }\n    }, {\n      key: \"destroy\",\n      value: function (t) {\n        n(ce.prototype.__proto__ || Object.getPrototypeOf(ce.prototype), \"destroy\", this).call(this), this.pool.destroy();\n        for (var e = t.length; e--;) {\n          var i = t[e];\n          i.body && this.element.removeChild(i.body);\n        }\n      }\n    }, {\n      key: \"transform\",\n      value: function (t, e) {\n        e.x = t.p.x, e.y = t.p.y, e.alpha = t.alpha, e.scale.x = t.scale, e.scale.y = t.scale, e.rotation = t.rotation * s.PI_180;\n      }\n    }, {\n      key: \"createBody\",\n      value: function (t, e) {\n        return t.isCircle ? this.createCircle(e) : this.createSprite(t);\n      }\n    }, {\n      key: \"createSprite\",\n      value: function (t) {\n        t = t.isInner ? this.createFromImage(t.src) : new le.Sprite(t);\n        return t.anchor.x = .5, t.anchor.y = .5, t;\n      }\n    }, {\n      key: \"createCircle\",\n      value: function (t) {\n        var e,\n          i = new le.Graphics();\n        return this.stroke && (e = this.stroke instanceof String ? this.stroke : 0, i.beginStroke(e)), i.beginFill(t.color || 36077), i.drawCircle(0, 0, t.radius), i.endFill(), i;\n      }\n    }]), ce);\n  function ce(t, e) {\n    o(this, ce);\n    var i = h(this, (ce.__proto__ || Object.getPrototypeOf(ce)).call(this, t));\n    return i.stroke = e, i.color = !1, i.setColor = !1, i.blendMode = null, i.pool.create = function (t, e) {\n      return i.createBody(t, e);\n    }, i.setPIXI(window.PIXI), i.name = \"PixiRenderer\", i;\n  }\n  var de = (t(ye, [{\n    key: \"set\",\n    value: function (t, e) {\n      0 === e ? X.set(t, this.mats[0]) : X.multiply(this.mats[e - 1], t, this.mats[e]), this.size = Math.max(this.size, e + 1);\n    }\n  }, {\n    key: \"push\",\n    value: function (t) {\n      0 === this.size ? X.set(t, this.mats[0]) : X.multiply(this.mats[this.size - 1], t, this.mats[this.size]), this.size++;\n    }\n  }, {\n    key: \"pop\",\n    value: function () {\n      0 < this.size && this.size--;\n    }\n  }, {\n    key: \"top\",\n    value: function () {\n      return this.mats[this.size - 1];\n    }\n  }]), ye);\n  function ye() {\n    o(this, ye), this.mats = [];\n    for (var t = this.size = 0; t < 20; t++) this.mats.push(X.create([0, 0, 0, 0, 0, 0, 0, 0, 0]));\n  }\n  r(pe, $t), t(pe, [{\n    key: \"init\",\n    value: function (t) {\n      n(pe.prototype.__proto__ || Object.getPrototypeOf(pe.prototype), \"init\", this).call(this, t), this.resize(this.element.width, this.element.height);\n    }\n  }, {\n    key: \"resize\",\n    value: function (t, e) {\n      this.umat[4] = -2, this.umat[7] = 1, this.smat[0] = 1 / t, this.smat[4] = 1 / e, this.mstack.set(this.umat, 0), this.mstack.set(this.smat, 1), this.gl.viewport(0, 0, t, e), this.element.width = t, this.element.height = e;\n    }\n  }, {\n    key: \"setMaxRadius\",\n    value: function (t) {\n      this.circleCanvasURL = this.createCircle(t);\n    }\n  }, {\n    key: \"getVertexShader\",\n    value: function () {\n      return [\"uniform vec2 viewport;\", \"attribute vec2 aVertexPosition;\", \"attribute vec2 aTextureCoord;\", \"uniform mat3 tMat;\", \"varying vec2 vTextureCoord;\", \"varying float alpha;\", \"void main() {\", \"vec3 v = tMat * vec3(aVertexPosition, 1.0);\", \"gl_Position = vec4(v.x, v.y, 0, 1);\", \"vTextureCoord = aTextureCoord;\", \"alpha = tMat[0][2];\", \"}\"].join(\"\\n\");\n    }\n  }, {\n    key: \"getFragmentShader\",\n    value: function () {\n      return [\"precision mediump float;\", \"varying vec2 vTextureCoord;\", \"varying float alpha;\", \"uniform sampler2D uSampler;\", \"uniform vec4 color;\", \"uniform bool useTexture;\", \"uniform vec3 uColor;\", \"void main() {\", \"vec4 textureColor = texture2D(uSampler, vTextureCoord);\", \"gl_FragColor = textureColor * vec4(uColor, 1.0);\", \"gl_FragColor.w *= alpha;\", \"}\"].join(\"\\n\");\n    }\n  }, {\n    key: \"initVar\",\n    value: function () {\n      this.mstack = new de(), this.umat = X.create([2, 0, 1, 0, -2, 0, -1, 1, 1]), this.smat = X.create([.01, 0, 1, 0, .01, 0, 0, 0, 1]), this.texturebuffers = {};\n    }\n  }, {\n    key: \"blendEquation\",\n    value: function (t) {\n      this.gl.blendEquation(this.gl[t]);\n    }\n  }, {\n    key: \"blendFunc\",\n    value: function (t, e) {\n      this.gl.blendFunc(this.gl[t], this.gl[e]);\n    }\n  }, {\n    key: \"getShader\",\n    value: function (t, e, i) {\n      i = i ? t.createShader(t.FRAGMENT_SHADER) : t.createShader(t.VERTEX_SHADER);\n      return t.shaderSource(i, e), t.compileShader(i), t.getShaderParameter(i, t.COMPILE_STATUS) ? i : (alert(t.getShaderInfoLog(i)), null);\n    }\n  }, {\n    key: \"initShaders\",\n    value: function () {\n      var t = this.getShader(this.gl, this.getFragmentShader(), !0),\n        e = this.getShader(this.gl, this.getVertexShader(), !1);\n      this.sprogram = this.gl.createProgram(), this.gl.attachShader(this.sprogram, e), this.gl.attachShader(this.sprogram, t), this.gl.linkProgram(this.sprogram), this.gl.getProgramParameter(this.sprogram, this.gl.LINK_STATUS) || alert(\"Could not initialise shaders\"), this.gl.useProgram(this.sprogram), this.sprogram.vpa = this.gl.getAttribLocation(this.sprogram, \"aVertexPosition\"), this.sprogram.tca = this.gl.getAttribLocation(this.sprogram, \"aTextureCoord\"), this.gl.enableVertexAttribArray(this.sprogram.tca), this.gl.enableVertexAttribArray(this.sprogram.vpa), this.sprogram.tMatUniform = this.gl.getUniformLocation(this.sprogram, \"tMat\"), this.sprogram.samplerUniform = this.gl.getUniformLocation(this.sprogram, \"uSampler\"), this.sprogram.useTex = this.gl.getUniformLocation(this.sprogram, \"useTexture\"), this.sprogram.color = this.gl.getUniformLocation(this.sprogram, \"uColor\"), this.gl.uniform1i(this.sprogram.useTex, 1);\n    }\n  }, {\n    key: \"initBuffers\",\n    value: function () {\n      var t;\n      this.unitIBuffer = this.gl.createBuffer(), this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitIBuffer), this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array([0, 3, 1, 0, 2, 3]), this.gl.STATIC_DRAW);\n      for (var e = void 0, i = [], e = 0; e < 100; e++) i.push(e);\n      for (t = new Uint16Array(i), this.unitI33 = this.gl.createBuffer(), this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitI33), this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, t, this.gl.STATIC_DRAW), i = [], e = 0; e < 100; e++) i.push(e, e + 1, e + 2);\n      t = new Uint16Array(i), this.stripBuffer = this.gl.createBuffer(), this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.stripBuffer), this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, t, this.gl.STATIC_DRAW);\n    }\n  }, {\n    key: \"createCircle\",\n    value: function (t) {\n      this.circleCanvasRadius = c(P.initValue(t, 32));\n      var e = v.createCanvas(\"circle_canvas\", 2 * this.circleCanvasRadius, 2 * this.circleCanvasRadius),\n        t = e.getContext(\"2d\");\n      return t.beginPath(), t.arc(this.circleCanvasRadius, this.circleCanvasRadius, this.circleCanvasRadius, 0, 2 * Math.PI, !0), t.closePath(), t.fillStyle = \"#FFF\", t.fill(), e.toDataURL();\n    }\n  }, {\n    key: \"drawImg2Canvas\",\n    value: function (t) {\n      var e = t.body.width,\n        i = t.body.height,\n        a = c(t.body.width),\n        r = c(t.body.height),\n        n = t.body.width / a,\n        s = t.body.height / r;\n      this.texturebuffers[t.data.src] || (this.texturebuffers[t.data.src] = [this.gl.createTexture(), this.gl.createBuffer(), this.gl.createBuffer()]), t.data.texture = this.texturebuffers[t.data.src][0], t.data.vcBuffer = this.texturebuffers[t.data.src][1], t.data.tcBuffer = this.texturebuffers[t.data.src][2], this.gl.bindBuffer(this.gl.ARRAY_BUFFER, t.data.tcBuffer), this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([0, 0, n, 0, 0, s, s, s]), this.gl.STATIC_DRAW), this.gl.bindBuffer(this.gl.ARRAY_BUFFER, t.data.vcBuffer), this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([0, 0, e, 0, 0, i, e, i]), this.gl.STATIC_DRAW);\n      r = t.data.canvas.getContext(\"2d\").getImageData(0, 0, a, r);\n      this.gl.bindTexture(this.gl.TEXTURE_2D, t.data.texture), this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, r), this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR), this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR_MIPMAP_NEAREST), this.gl.generateMipmap(this.gl.TEXTURE_2D), t.data.textureLoaded = !0, t.data.textureWidth = e, t.data.textureHeight = i;\n    }\n  }, {\n    key: \"onProtonUpdate\",\n    value: function () {}\n  }, {\n    key: \"onParticleCreated\",\n    value: function (t) {\n      t.data.textureLoaded = !1, t.data.tmat = X.create(), t.data.tmat[8] = 1, t.data.imat = X.create(), t.data.imat[8] = 1, t.body ? x(t.body, this.addImg2Body, t) : (x(this.circleCanvasURL, this.addImg2Body, t), t.data.oldScale = t.radius / this.circleCanvasRadius);\n    }\n  }, {\n    key: \"addImg2Body\",\n    value: function (t, e) {\n      e.dead || (e.body = t, e.data.src = t.src, e.data.canvas = k(t), e.data.oldScale = 1, this.drawImg2Canvas(e));\n    }\n  }, {\n    key: \"onParticleUpdate\",\n    value: function (t) {\n      t.data.textureLoaded && (this.updateMatrix(t), this.gl.uniform3f(this.sprogram.color, t.rgb.r / 255, t.rgb.g / 255, t.rgb.b / 255), this.gl.uniformMatrix3fv(this.sprogram.tMatUniform, !1, this.mstack.top()), this.gl.bindBuffer(this.gl.ARRAY_BUFFER, t.data.vcBuffer), this.gl.vertexAttribPointer(this.sprogram.vpa, 2, this.gl.FLOAT, !1, 0, 0), this.gl.bindBuffer(this.gl.ARRAY_BUFFER, t.data.tcBuffer), this.gl.vertexAttribPointer(this.sprogram.tca, 2, this.gl.FLOAT, !1, 0, 0), this.gl.bindTexture(this.gl.TEXTURE_2D, t.data.texture), this.gl.uniform1i(this.sprogram.samplerUniform, 0), this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitIBuffer), this.gl.drawElements(this.gl.TRIANGLES, 6, this.gl.UNSIGNED_SHORT, 0), this.mstack.pop());\n    }\n  }, {\n    key: \"onParticleDead\",\n    value: function () {}\n  }, {\n    key: \"updateMatrix\",\n    value: function (t) {\n      var e = d(-t.data.textureWidth / 2, -t.data.textureHeight / 2),\n        i = d(t.p.x, t.p.y),\n        a = t.rotation * s.PI_180,\n        r = y(a),\n        a = t.scale * t.data.oldScale,\n        a = p(a, a),\n        a = f(e, a),\n        a = f(a, r);\n      a = f(a, i), X.inverse(a, t.data.imat), a[2] = t.alpha, this.mstack.push(a);\n    }\n  }]), C = pe;\n  function pe(t) {\n    o(this, pe);\n    t = h(this, (pe.__proto__ || Object.getPrototypeOf(pe)).call(this, t));\n    return t.gl = t.element.getContext(\"experimental-webgl\", {\n      antialias: !0,\n      stencil: !1,\n      depth: !1\n    }), t.gl || alert(\"Sorry your browser do not suppest WebGL!\"), t.initVar(), t.setMaxRadius(), t.initShaders(), t.initBuffers(), t.gl.blendEquation(t.gl.FUNC_ADD), t.gl.blendFunc(t.gl.SRC_ALPHA, t.gl.ONE_MINUS_SRC_ALPHA), t.gl.enable(t.gl.BLEND), t.addImg2Body = t.addImg2Body.bind(t), t.name = \"WebGLRenderer\", t;\n  }\n  r(fe, $t), $t = fe;\n  function fe(t) {\n    o(this, fe);\n    t = h(this, (fe.__proto__ || Object.getPrototypeOf(fe)).call(this, t));\n    return t.name = \"CustomRenderer\", t;\n  }\n  var ve = (r(ge, at), t(ge, [{\n    key: \"getPosition\",\n    value: function () {\n      return this.random = Math.random(), this.vector.x = this.x1 + this.random * this.length * Math.cos(this.gradient), this.vector.y = this.y1 + this.random * this.length * Math.sin(this.gradient), this.vector;\n    }\n  }, {\n    key: \"getDirection\",\n    value: function (t, e) {\n      var i = this.dy,\n        a = -this.dx;\n      return 0 < (i * t + a * e + this.dot) * (0 == a ? 1 : a);\n    }\n  }, {\n    key: \"getDistance\",\n    value: function (t, e) {\n      return (this.dy * t + -this.dx * e + this.dot) / Math.sqrt(this.xxyy);\n    }\n  }, {\n    key: \"getSymmetric\",\n    value: function (t) {\n      var e = t.getGradient(),\n        i = 2 * (this.getGradient() - e),\n        a = t.x,\n        e = t.y;\n      return t.x = a * Math.cos(i) - e * Math.sin(i), t.y = a * Math.sin(i) + e * Math.cos(i), t;\n    }\n  }, {\n    key: \"getGradient\",\n    value: function () {\n      return Math.atan2(this.dy, this.dx);\n    }\n  }, {\n    key: \"rangeOut\",\n    value: function (t) {\n      if (Math.abs(this.getGradient()) <= s.PI / 4) {\n        if (t.p.x <= this.maxx && t.p.x >= this.minx) return !0;\n      } else if (t.p.y <= this.maxy && t.p.y >= this.miny) return !0;\n      return !1;\n    }\n  }, {\n    key: \"getLength\",\n    value: function () {\n      return Math.sqrt(this.dx * this.dx + this.dy * this.dy);\n    }\n  }, {\n    key: \"crossing\",\n    value: function (t) {\n      \"dead\" === this.crossType ? \">\" === this.direction || \"R\" === this.direction || \"right\" === this.direction || \"down\" === this.direction ? this.rangeOut(t) && this.getDirection(t.p.x, t.p.y) && (t.dead = !0) : this.rangeOut(t) && (this.getDirection(t.p.x, t.p.y) || (t.dead = !0)) : \"bound\" === this.crossType ? this.rangeOut(t) && this.getDistance(t.p.x, t.p.y) <= t.radius && (0 === this.dx ? t.v.x *= -1 : 0 === this.dy ? t.v.y *= -1 : this.getSymmetric(t.v)) : \"cross\" === this.crossType && this.alert && (console.error(\"Sorry, LineZone does not support cross method!\"), this.alert = !1);\n    }\n  }]), ge);\n  function ge(t, e, i, a, r) {\n    o(this, ge);\n    var n = h(this, (ge.__proto__ || Object.getPrototypeOf(ge)).call(this));\n    return 0 <= i - t ? (n.x1 = t, n.y1 = e, n.x2 = i, n.y2 = a) : (n.x1 = i, n.y1 = a, n.x2 = t, n.y2 = e), n.dx = n.x2 - n.x1, n.dy = n.y2 - n.y1, n.minx = Math.min(n.x1, n.x2), n.miny = Math.min(n.y1, n.y2), n.maxx = Math.max(n.x1, n.x2), n.maxy = Math.max(n.y1, n.y2), n.dot = n.x2 * n.y1 - n.x1 * n.y2, n.xxyy = n.dx * n.dx + n.dy * n.dy, n.gradient = n.getGradient(), n.length = n.getLength(), n.direction = P.initValue(r, \">\"), n;\n  }\n  var me = (r(be, at), t(be, [{\n    key: \"getPosition\",\n    value: function () {\n      return this.angle = s.PIx2 * Math.random(), this.randomRadius = Math.random() * this.radius, this.vector.x = this.x + this.randomRadius * Math.cos(this.angle), this.vector.y = this.y + this.randomRadius * Math.sin(this.angle), this.vector;\n    }\n  }, {\n    key: \"setCenter\",\n    value: function (t, e) {\n      this.center.x = t, this.center.y = e;\n    }\n  }, {\n    key: \"crossing\",\n    value: function (t) {\n      var e = t.p.distanceTo(this.center);\n      \"dead\" === this.crossType ? e - t.radius > this.radius && (t.dead = !0) : \"bound\" === this.crossType ? e + t.radius >= this.radius && this.getSymmetric(t) : \"cross\" === this.crossType && this.alert && (console.error(\"Sorry, CircleZone does not support cross method!\"), this.alert = !1);\n    }\n  }, {\n    key: \"getSymmetric\",\n    value: function (t) {\n      var e = t.v.getGradient(),\n        i = 2 * (this.getGradient(t) - e),\n        a = t.v.x,\n        e = t.v.y;\n      t.v.x = a * Math.cos(i) - e * Math.sin(i), t.v.y = a * Math.sin(i) + e * Math.cos(i);\n    }\n  }, {\n    key: \"getGradient\",\n    value: function (t) {\n      return -s.PI_2 + Math.atan2(t.p.y - this.center.y, t.p.x - this.center.x);\n    }\n  }]), be);\n  function be(t, e, i) {\n    o(this, be);\n    var a = h(this, (be.__proto__ || Object.getPrototypeOf(be)).call(this));\n    return a.x = t, a.y = e, a.radius = i, a.angle = 0, a.center = {\n      x: t,\n      y: e\n    }, a;\n  }\n  var _e = (r(xe, at), t(xe, [{\n    key: \"getPosition\",\n    value: function () {\n      return this.vector.x = this.x + Math.random() * this.width, this.vector.y = this.y + Math.random() * this.height, this.vector;\n    }\n  }, {\n    key: \"crossing\",\n    value: function (t) {\n      \"dead\" === this.crossType ? ((t.p.x + t.radius < this.x || t.p.x - t.radius > this.x + this.width) && (t.dead = !0), (t.p.y + t.radius < this.y || t.p.y - t.radius > this.y + this.height) && (t.dead = !0)) : \"bound\" === this.crossType ? (t.p.x - t.radius < this.x ? (t.p.x = this.x + t.radius, t.v.x *= -1) : t.p.x + t.radius > this.x + this.width && (t.p.x = this.x + this.width - t.radius, t.v.x *= -1), t.p.y - t.radius < this.y ? (t.p.y = this.y + t.radius, t.v.y *= -1) : t.p.y + t.radius > this.y + this.height && (t.p.y = this.y + this.height - t.radius, t.v.y *= -1)) : \"cross\" === this.crossType && (t.p.x + t.radius < this.x && t.v.x <= 0 ? t.p.x = this.x + this.width + t.radius : t.p.x - t.radius > this.x + this.width && 0 <= t.v.x && (t.p.x = this.x - t.radius), t.p.y + t.radius < this.y && t.v.y <= 0 ? t.p.y = this.y + this.height + t.radius : t.p.y - t.radius > this.y + this.height && 0 <= t.v.y && (t.p.y = this.y - t.radius));\n    }\n  }]), xe);\n  function xe(t, e, i, a) {\n    o(this, xe);\n    var r = h(this, (xe.__proto__ || Object.getPrototypeOf(xe)).call(this));\n    return r.x = t, r.y = e, r.width = i, r.height = a, r;\n  }\n  r(ke, at), t(ke, [{\n    key: \"reset\",\n    value: function (t, e, i, a) {\n      this.imageData = t, this.x = P.initValue(e, 0), this.y = P.initValue(i, 0), this.d = P.initValue(a, 2), this.vectors = [], this.setVectors();\n    }\n  }, {\n    key: \"setVectors\",\n    value: function () {\n      for (var t = void 0, e = void 0, i = this.imageData.width, a = this.imageData.height, t = 0; t < i; t += this.d) for (e = 0; e < a; e += this.d) {\n        var r = 4 * ((e >> 0) * i + (t >> 0));\n        0 < this.imageData.data[3 + r] && this.vectors.push({\n          x: t + this.x,\n          y: e + this.y\n        });\n      }\n      return this.vector;\n    }\n  }, {\n    key: \"getBound\",\n    value: function (t, e) {\n      t = 4 * ((e >> 0) * this.imageData.width + (t >> 0));\n      return 0 < this.imageData.data[3 + t];\n    }\n  }, {\n    key: \"getPosition\",\n    value: function () {\n      var t = P.getRandFromArray(this.vectors);\n      return this.vector.copy(t);\n    }\n  }, {\n    key: \"getColor\",\n    value: function (t, e) {\n      t -= this.x;\n      t = 4 * (((e -= this.y) >> 0) * this.imageData.width + (t >> 0));\n      return {\n        r: this.imageData.data[t],\n        g: this.imageData.data[1 + t],\n        b: this.imageData.data[2 + t],\n        a: this.imageData.data[3 + t]\n      };\n    }\n  }, {\n    key: \"crossing\",\n    value: function (t) {\n      \"dead\" === this.crossType ? this.getBound(t.p.x - this.x, t.p.y - this.y) ? t.dead = !0 : t.dead = !1 : \"bound\" === this.crossType && (this.getBound(t.p.x - this.x, t.p.y - this.y) || t.v.negate());\n    }\n  }]), r = ke;\n  function ke(t, e, i, a) {\n    o(this, ke);\n    var r = h(this, (ke.__proto__ || Object.getPrototypeOf(ke)).call(this));\n    return r.reset(t, e, i, a), r;\n  }\n  t = {\n    addEventListener: function (t, e) {\n      t.addEventListener(\"PROTON_UPDATE_AFTER\", function () {\n        return e();\n      });\n    },\n    getStyle: function (t) {\n      t = H.hexToRgb(0 < arguments.length && void 0 !== t ? t : \"#ff0000\");\n      return \"rgba(\" + t.r + \", \" + t.g + \", \" + t.b + \", 0.5)\";\n    },\n    drawZone: function (t, e, i, a) {\n      var r = e.getContext(\"2d\"),\n        n = this.getStyle();\n      this.addEventListener(t, function () {\n        a && r.clearRect(0, 0, e.width, e.height), i instanceof nt ? (r.beginPath(), r.fillStyle = n, r.arc(i.x, i.y, 10, 0, 2 * Math.PI, !0), r.fill(), r.closePath()) : i instanceof ve ? (r.beginPath(), r.strokeStyle = n, r.moveTo(i.x1, i.y1), r.lineTo(i.x2, i.y2), r.stroke(), r.closePath()) : i instanceof _e ? (r.beginPath(), r.strokeStyle = n, r.drawRect(i.x, i.y, i.width, i.height), r.stroke(), r.closePath()) : i instanceof me && (r.beginPath(), r.strokeStyle = n, r.arc(i.x, i.y, i.radius, 0, 2 * Math.PI, !0), r.stroke(), r.closePath());\n      });\n    },\n    drawEmitter: function (t, e, i, a) {\n      var r = e.getContext(\"2d\"),\n        n = this.getStyle();\n      this.addEventListener(t, function () {\n        a && r.clearRect(0, 0, e.width, e.height), r.beginPath(), r.fillStyle = n, r.arc(i.p.x, i.p.y, 10, 0, 2 * Math.PI, !0), r.fill(), r.closePath();\n      });\n    }\n  };\n  return V.Particle = j, V.Pool = T, V.Util = P, V.ColorUtil = H, V.MathUtil = s, V.Vector2D = V.Vector = F, V.Polar2D = V.Polar = q, V.ArraySpan = Y, V.Rectangle = Z, V.Rate = K, V.ease = U, V.Span = l, V.Mat3 = X, V.getSpan = function (t, e, i) {\n    return new l(t, e, i);\n  }, V.createArraySpan = Y.createArraySpan, V.Initialize = V.Init = $, V.Life = V.L = et, V.Position = V.P = ot, V.Velocity = V.V = lt, V.Mass = V.M = ct, V.Radius = V.R = yt, V.Body = V.B = ft, V.Behaviour = gt, V.Force = V.F = bt, V.Attraction = V.A = xt, V.RandomDrift = V.RD = Pt, V.Gravity = V.G = At, V.Collision = Rt, V.CrossZone = wt, V.Alpha = St, V.Scale = V.S = Dt, V.Rotate = Mt, V.Color = Lt, V.Repulsion = Nt, V.Cyclone = zt, V.GravityWell = qt, V.Emitter = Yt, V.BehaviourEmitter = Zt, V.FollowEmitter = Kt, V.Zone = at, V.LineZone = ve, V.CircleZone = me, V.PointZone = nt, V.RectZone = _e, V.ImageZone = r, V.CanvasRenderer = ee, V.DomRenderer = ae, V.EaselRenderer = ne, V.PixiRenderer = ue, V.PixelRenderer = oe, V.WebGLRenderer = V.WebGlRenderer = C, V.CustomRenderer = $t, V.Debug = t, P.assign(V, U), V;\n});","map":{"version":3,"names":["e","s","PI","PIx2","PI_2","PI_180","N180_PI","Infinity","isInfinity","t","randomAToB","i","arguments","length","Math","floor","random","randomFloating","randomColor","toString","slice","randomZone","pow","degreeTransform","toColor16","Symbol","iterator","constructor","prototype","o","TypeError","a","enumerable","configurable","writable","Object","defineProperty","key","n","Function","getOwnPropertyDescriptor","value","get","call","getPrototypeOf","r","create","setPrototypeOf","__proto__","h","ReferenceError","l","u","isArray","P","getRandFromArray","center","b","getValue","initValue","c","d","y","cos","sin","p","f","v","g","createCanvas","document","createElement","id","width","height","style","opacity","position","transform","createDiv","resize","marginLeft","marginTop","willChange","css3","transform3d","charAt","toUpperCase","substr","m","_","drawImage","x","getImageData","clearRect","src","Image","onload","target","k","getContext","emptyArray","toArray","emptyObject","indexOf","classApply","bind","apply","concat","setVectorVal","hasProp","vx","vy","ax","ay","copy","velocity","accelerate","setProp","hasOwnProperty","getSpanValue","destroyAll","destroy","assign","E","A","_index","_cache","getId","getIdFromCache","isBody","isInner","getTarget","T","R","__puid","cache","pop","createOrClone","getCache","push","total","clone","O","w","add","getEmitter","getRenderer","type","proton","emitters","emitSpeed","getEmitterPos","initializes","concatArr","behaviours","name","getCreatedNumber","getCount","pool","container","innerHTML","cssText","join","addEventListener","color","parentNode","body","appendChild","emitterIndex","renderers","rendererIndex","cpool","round","C","S","_listeners","removeEventListener","splice","dispatchEvent","hasEventListener","removeAllEventListeners","I","D","eulerIntegrate","sleep","old","multiplyScalar","mass","clear","V","M","init","remove","parent","EMITTER_ADDED","EMITTER_REMOVED","_fps","PROTON_UPDATE","USE_CLOCK","then","Date","getTime","now","elapsed","amendChangeTabsBug","emittersUpdate","DEFAULT_INTERVAL","PROTON_UPDATE_AFTER","_interval","update","particles","time","getAllParticles","setTimeout","set","stats","integrationType","EULER","integrator","MEASURE","RK2","PARTICLE_CREATED","PARTICLE_UPDATE","PARTICLE_SLEEP","PARTICLE_DEAD","B","L","U","easeLinear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInSine","easeOutSine","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","sqrt","easeOutCirc","easeInOutCirc","easeInBack","easeOutBack","easeInOutBack","getEasing","F","z","atan2","addVectors","subVectors","divideScalar","distanceToSquared","j","N","life","age","dead","sprite","energy","radius","alpha","scale","rotation","easing","rgb","reset","data","removeAllBehaviours","applyBehaviours","max","applyBehaviour","parents","initialize","addBehaviour","H","hexToRgb","substring","parseInt","rgbToHex","getHex16FromParticle","Number","q","G","tha","getX","getY","abs","X","Float32Array","multiply","inverse","multiplyVec2","Y","W","_arr","Z","Q","right","bottom","K","J","startTime","nextTime","timePan","numPan","setSpanValue","$","tt","et","it","lifePan","at","rt","vector","crossType","alert","nt","st","console","error","ot","ht","zone","getPosition","lt","ut","rPan","thaPan","normalizeVelocity","ct","dt","massPan","yt","pt","oldRadius","ft","vt","image","inner","gt","mt","removeBehaviour","bt","_t","force","normalizeForce","calculate","xt","kt","targetPosition","normalizeValue","radiusSq","attractionForce","lengthSq","sub","normalize","Pt","Et","panFoce","delay","addXY","At","Tt","Rt","Ot","emitter","callback","collisionPool","delta","wt","Ct","crossing","St","It","same","alphaA","alphaB","Dt","Vt","scaleA","scaleB","Mt","Bt","rotationA","rotationB","getDirection","Lt","Ut","createArraySpan","colorA","colorB","Ft","zt","jt","angle","span","String","toLowerCase","setAngleAndForce","cangle","cyclone","getGradient","Nt","Ht","qt","Gt","distanceVec","centerPoint","Xt","bindEmitter","rotate","Yt","Wt","stoped","emitTime","totalTime","isNaN","rate","initAll","Array","emitting","integrate","damping","dispatch","expire","bindEvent","createParticle","setupParticle","addBehaviours","stop","removeAllInitializers","removeEmitter","Zt","Qt","selfBehaviours","Kt","Jt","mousemoveHandler","mousemove","mousedownHandler","mousedown","mouseupHandler","mouseup","mouseTarget","_allowEmitting","layerX","ease","layerY","offsetX","offsetY","window","initEventHandler","$t","te","stroke","thinkness","_protonUpdateHandler","onProtonUpdate","_protonUpdateAfterHandler","onProtonUpdateAfter","_emitterAddedHandler","onEmitterAdded","_emitterRemovedHandler","onEmitterRemoved","_particleCreatedHandler","onParticleCreated","_particleUpdateHandler","onParticleUpdate","_particleDeadHandler","onParticleDead","element","circleConf","isCircle","initHandler","ee","ie","context","addImg2Body","drawCircle","buffer","createBuffer","globalAlpha","globalCompositeOperation","fillStyle","fillRect","save","translate","restore","beginPath","arc","strokeStyle","lineWidth","closePath","fill","bufferCache","ae","re","bodyReady","backgroundColor","removeChild","createCircle","createSprite","borderRadius","borderColor","borderWidth","backgroundImage","createBody","ne","se","addChild","scaleX","scaleY","graphics","regX","regY","createjs","Graphics","beginStroke","beginFill","Shape","oe","he","rectangle","imageData","createImageData","putImageData","setPixel","elementwidth","le","ue","ce","Sprite","createFromImage","from","fromImage","blendMode","setColor","tint","anchor","endFill","setPIXI","PIXI","de","ye","mats","size","pe","umat","smat","mstack","gl","viewport","circleCanvasURL","texturebuffers","blendEquation","blendFunc","createShader","FRAGMENT_SHADER","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","getShader","getFragmentShader","getVertexShader","sprogram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","useProgram","vpa","getAttribLocation","tca","enableVertexAttribArray","tMatUniform","getUniformLocation","samplerUniform","useTex","uniform1i","unitIBuffer","bindBuffer","ELEMENT_ARRAY_BUFFER","bufferData","Uint16Array","STATIC_DRAW","unitI33","stripBuffer","circleCanvasRadius","toDataURL","createTexture","texture","vcBuffer","tcBuffer","ARRAY_BUFFER","canvas","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_NEAREST","generateMipmap","textureLoaded","textureWidth","textureHeight","tmat","imat","oldScale","drawImg2Canvas","updateMatrix","uniform3f","uniformMatrix3fv","top","vertexAttribPointer","FLOAT","drawElements","TRIANGLES","UNSIGNED_SHORT","antialias","stencil","depth","initVar","setMaxRadius","initShaders","initBuffers","FUNC_ADD","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","enable","BLEND","fe","ve","ge","x1","gradient","y1","dy","dx","dot","xxyy","maxx","minx","maxy","miny","direction","rangeOut","getDistance","getSymmetric","x2","y2","min","getLength","me","be","randomRadius","distanceTo","_e","xe","ke","vectors","setVectors","getBound","negate","getStyle","drawZone","moveTo","lineTo","drawRect","drawEmitter","Particle","Pool","Util","ColorUtil","MathUtil","Vector2D","Vector","Polar2D","Polar","ArraySpan","Rectangle","Rate","Span","Mat3","getSpan","Initialize","Init","Life","Position","Velocity","Mass","Radius","Body","Behaviour","Force","Attraction","RandomDrift","RD","Gravity","Collision","CrossZone","Alpha","Scale","Rotate","Color","Repulsion","Cyclone","GravityWell","Emitter","BehaviourEmitter","FollowEmitter","Zone","LineZone","CircleZone","PointZone","RectZone","ImageZone","CanvasRenderer","DomRenderer","EaselRenderer","PixiRenderer","PixelRenderer","WebGLRenderer","WebGlRenderer","CustomRenderer","Debug"],"sources":["C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\math\\MathUtil.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\math\\Span.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\utils\\WebGLUtil.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\utils\\DomUtil.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\utils\\ImgUtil.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\utils\\Util.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\utils\\Puid.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\core\\Pool.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\debug\\Stats.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\events\\EventDispatcher.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\math\\Integration.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\core\\Proton.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\utils\\Rgb.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\math\\ease.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\math\\Vector2D.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\core\\Particle.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\utils\\ColorUtil.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\math\\Polar2D.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\math\\Mat3.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\math\\ArraySpan.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\math\\Rectangle.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\initialize\\Rate.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\initialize\\Initialize.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\initialize\\Life.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\zone\\Zone.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\zone\\PointZone.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\initialize\\Position.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\initialize\\Velocity.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\initialize\\Mass.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\initialize\\Radius.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\initialize\\Body.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\behaviour\\Behaviour.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\behaviour\\Force.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\behaviour\\Attraction.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\behaviour\\RandomDrift.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\behaviour\\Gravity.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\behaviour\\Collision.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\behaviour\\CrossZone.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\behaviour\\Alpha.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\behaviour\\Scale.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\behaviour\\Rotate.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\behaviour\\Color.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\behaviour\\Cyclone.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\behaviour\\Repulsion.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\behaviour\\GravityWell.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\initialize\\InitializeUtil.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\emitter\\Emitter.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\emitter\\BehaviourEmitter.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\emitter\\FollowEmitter.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\render\\BaseRenderer.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\render\\CanvasRenderer.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\render\\DomRenderer.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\render\\EaselRenderer.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\render\\PixelRenderer.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\render\\PixiRenderer.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\utils\\MStack.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\render\\WebGLRenderer.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\render\\CustomRenderer.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\zone\\LineZone.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\zone\\CircleZone.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\zone\\RectZone.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\zone\\ImageZone.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\debug\\Debug.js","C:\\Users\\Welfred\\Desktop\\render-smart-brain\\node_modules\\proton-engine\\src\\index.js"],"sourcesContent":["const PI = 3.1415926;\nconst INFINITY = Infinity;\n\nconst MathUtil = {\n  PI: PI,\n  PIx2: PI * 2,\n  PI_2: PI / 2,\n  PI_180: PI / 180,\n  N180_PI: 180 / PI,\n  Infinity: -999,\n\n  isInfinity(num) {\n    return num === this.Infinity || num === INFINITY;\n  },\n\n  randomAToB(a, b, isInt = false) {\n    if (!isInt) return a + Math.random() * (b - a);\n    else return Math.floor(Math.random() * (b - a)) + a;\n  },\n\n  randomFloating(center, f, isInt) {\n    return this.randomAToB(center - f, center + f, isInt);\n  },\n\n  randomColor() {\n    return (\n      \"#\" +\n      (\"00000\" + ((Math.random() * 0x1000000) << 0).toString(16)).slice(-6)\n    );\n  },\n\n  randomZone(display) {},\n\n  floor(num, k = 4) {\n    const digits = Math.pow(10, k);\n    return Math.floor(num * digits) / digits;\n  },\n\n  degreeTransform(a) {\n    return (a * PI) / 180;\n  },\n\n  toColor16(num) {\n    return `#${num.toString(16)}`;\n  }\n};\n\nexport default MathUtil;\n","import Util from \"../utils/Util\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class Span {\n  constructor(a, b, center) {\n    if (Util.isArray(a)) {\n      this.isArray = true;\n      this.a = a;\n    } else {\n      this.isArray = false;\n      this.a = Util.initValue(a, 1);\n      this.b = Util.initValue(b, this.a);\n      this.center = Util.initValue(center, false);\n    }\n  }\n\n  getValue(isInt = false) {\n    if (this.isArray) {\n      return Util.getRandFromArray(this.a);\n    } else {\n      if (!this.center) {\n        return MathUtil.randomAToB(this.a, this.b, isInt);\n      } else {\n        return MathUtil.randomFloating(this.a, this.b, isInt);\n      }\n    }\n  }\n\n  /**\n   * Returns a new Span object\n   *\n   * @memberof Proton#Proton.Util\n   * @method setSpanValue\n   *\n   * @todo a, b and c should be 'Mixed' or 'Number'?\n   *\n   * @param {Mixed | Span} a\n   * @param {Mixed}               b\n   * @param {Mixed}               c\n   *\n   * @return {Span}\n   */\n  static setSpanValue(a, b, c) {\n    if (a instanceof Span) {\n      return a;\n    } else {\n      if (b === undefined) {\n        return new Span(a);\n      } else {\n        if (c === undefined) return new Span(a, b);\n        else return new Span(a, b, c);\n      }\n    }\n  }\n\n  /**\n   * Returns the value from a Span, if the param is not a Span it will return the given parameter\n   *\n   * @memberof Proton#Proton.Util\n   * @method getValue\n   *\n   * @param {Mixed | Span} pan\n   *\n   * @return {Mixed} the value of Span OR the parameter if it is not a Span\n   */\n  static getSpanValue(pan) {\n    return pan instanceof Span ? pan.getValue() : pan;\n  }\n}\n","export default {\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method ipot\n   *\n   * @todo add description\n   * @todo add length description\n   *\n   * @param {Number} length\n   *\n   * @return {Boolean}\n   */\n  ipot(length) {\n    return (length & (length - 1)) === 0;\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method nhpot\n   *\n   * @todo add description\n   * @todo add length description\n   *\n   * @param {Number} length\n   *\n   * @return {Number}\n   */\n  nhpot(length) {\n    --length;\n    for (let i = 1; i < 32; i <<= 1) {\n      length = length | (length >> i);\n    }\n\n    return length + 1;\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method makeTranslation\n   *\n   * @todo add description\n   * @todo add tx, ty description\n   * @todo add return description\n   *\n   * @param {Number} tx either 0 or 1\n   * @param {Number} ty either 0 or 1\n   *\n   * @return {Object}\n   */\n  makeTranslation(tx, ty) {\n    return [1, 0, 0, 0, 1, 0, tx, ty, 1];\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method makeRotation\n   *\n   * @todo add description\n   * @todo add return description\n   *\n   * @param {Number} angleInRadians\n   *\n   * @return {Object}\n   */\n  makeRotation(angleInRadians) {\n    let c = Math.cos(angleInRadians);\n    let s = Math.sin(angleInRadians);\n\n    return [c, -s, 0, s, c, 0, 0, 0, 1];\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method makeScale\n   *\n   * @todo add description\n   * @todo add tx, ty description\n   * @todo add return description\n   *\n   * @param {Number} sx either 0 or 1\n   * @param {Number} sy either 0 or 1\n   *\n   * @return {Object}\n   */\n  makeScale(sx, sy) {\n    return [sx, 0, 0, 0, sy, 0, 0, 0, 1];\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method matrixMultiply\n   *\n   * @todo add description\n   * @todo add a, b description\n   * @todo add return description\n   *\n   * @param {Object} a\n   * @param {Object} b\n   *\n   * @return {Object}\n   */\n  matrixMultiply(a, b) {\n    let a00 = a[0 * 3 + 0];\n    let a01 = a[0 * 3 + 1];\n    let a02 = a[0 * 3 + 2];\n    let a10 = a[1 * 3 + 0];\n    let a11 = a[1 * 3 + 1];\n    let a12 = a[1 * 3 + 2];\n    let a20 = a[2 * 3 + 0];\n    let a21 = a[2 * 3 + 1];\n    let a22 = a[2 * 3 + 2];\n    let b00 = b[0 * 3 + 0];\n    let b01 = b[0 * 3 + 1];\n    let b02 = b[0 * 3 + 2];\n    let b10 = b[1 * 3 + 0];\n    let b11 = b[1 * 3 + 1];\n    let b12 = b[1 * 3 + 2];\n    let b20 = b[2 * 3 + 0];\n    let b21 = b[2 * 3 + 1];\n    let b22 = b[2 * 3 + 2];\n\n    return [\n      a00 * b00 + a01 * b10 + a02 * b20,\n      a00 * b01 + a01 * b11 + a02 * b21,\n      a00 * b02 + a01 * b12 + a02 * b22,\n      a10 * b00 + a11 * b10 + a12 * b20,\n      a10 * b01 + a11 * b11 + a12 * b21,\n      a10 * b02 + a11 * b12 + a12 * b22,\n      a20 * b00 + a21 * b10 + a22 * b20,\n      a20 * b01 + a21 * b11 + a22 * b21,\n      a20 * b02 + a21 * b12 + a22 * b22\n    ];\n  }\n};\n","export default {\n  /**\n   * Creates and returns a new canvas. The opacity is by default set to 0\n   *\n   * @memberof Proton#Proton.DomUtil\n   * @method createCanvas\n   *\n   * @param {String} $id the canvas' id\n   * @param {Number} $width the canvas' width\n   * @param {Number} $height the canvas' height\n   * @param {String} [$position=absolute] the canvas' position, default is 'absolute'\n   *\n   * @return {Object}\n   */\n  createCanvas(id, width, height, position = \"absolute\") {\n    const dom = document.createElement(\"canvas\");\n\n    dom.id = id;\n    dom.width = width;\n    dom.height = height;\n    dom.style.opacity = 0;\n    dom.style.position = position;\n    this.transform(dom, -500, -500, 0, 0);\n\n    return dom;\n  },\n\n  createDiv(id, width, height) {\n    const dom = document.createElement(\"div\");\n\n    dom.id = id;\n    dom.style.position = \"absolute\";\n    this.resize(dom, width, height);\n\n    return dom;\n  },\n\n  resize(dom, width, height) {\n    dom.style.width = width + \"px\";\n    dom.style.height = height + \"px\";\n    dom.style.marginLeft = -width / 2 + \"px\";\n    dom.style.marginTop = -height / 2 + \"px\";\n  },\n\n  /**\n   * Adds a transform: translate(), scale(), rotate() to a given div dom for all browsers\n   *\n   * @memberof Proton#Proton.DomUtil\n   * @method transform\n   *\n   * @param {HTMLDivElement} div\n   * @param {Number} $x\n   * @param {Number} $y\n   * @param {Number} $scale\n   * @param {Number} $rotate\n   */\n  transform(div, x, y, scale, rotate) {\n    div.style.willChange = \"transform\";\n    const transform = `translate(${x}px, ${y}px) scale(${scale}) rotate(${rotate}deg)`;\n    this.css3(div, \"transform\", transform);\n  },\n\n  transform3d(div, x, y, scale, rotate) {\n    div.style.willChange = \"transform\";\n    const transform = `translate3d(${x}px, ${y}px, 0) scale(${scale}) rotate(${rotate}deg)`;\n    this.css3(div, \"backfaceVisibility\", \"hidden\");\n    this.css3(div, \"transform\", transform);\n  },\n\n  css3(div, key, val) {\n    const bkey = key.charAt(0).toUpperCase() + key.substr(1);\n\n    div.style[`Webkit${bkey}`] = val;\n    div.style[`Moz${bkey}`] = val;\n    div.style[`O${bkey}`] = val;\n    div.style[`ms${bkey}`] = val;\n    div.style[`${key}`] = val;\n  }\n};\n","import WebGLUtil from \"./WebGLUtil\";\nimport DomUtil from \"./DomUtil\";\n\nconst imgsCache = {};\nconst canvasCache = {};\nlet canvasId = 0;\n\nexport default {\n  /**\n   * This will get the image data. It could be necessary to create a Proton.Zone.\n   *\n   * @memberof Proton#Proton.Util\n   * @method getImageData\n   *\n   * @param {HTMLCanvasElement}   context any canvas, must be a 2dContext 'canvas.getContext('2d')'\n   * @param {Object}              image   could be any dom image, e.g. document.getElementById('thisIsAnImgTag');\n   * @param {Proton.Rectangle}    rect\n   */\n  getImageData(context, image, rect) {\n    context.drawImage(image, rect.x, rect.y);\n    const imagedata = context.getImageData(\n      rect.x,\n      rect.y,\n      rect.width,\n      rect.height\n    );\n    context.clearRect(rect.x, rect.y, rect.width, rect.height);\n\n    return imagedata;\n  },\n\n  /**\n   * @memberof Proton#Proton.Util\n   * @method getImgFromCache\n   *\n   * @todo add description\n   * @todo describe func\n   *\n   * @param {Mixed}               img\n   * @param {Proton.Particle}     particle\n   * @param {Boolean}             drawCanvas  set to true if a canvas should be saved into particle.data.canvas\n   * @param {Boolean}             func\n   */\n  getImgFromCache(img, callback, param) {\n    const src = typeof img === \"string\" ? img : img.src;\n\n    if (imgsCache[src]) {\n      callback(imgsCache[src], param);\n    } else {\n      const image = new Image();\n      image.onload = e => {\n        imgsCache[src] = e.target;\n        callback(imgsCache[src], param);\n      };\n\n      image.src = src;\n    }\n  },\n\n  getCanvasFromCache(img, callback, param) {\n    const src = img.src;\n\n    if (!canvasCache[src]) {\n      const width = WebGLUtil.nhpot(img.width);\n      const height = WebGLUtil.nhpot(img.height);\n\n      const canvas = DomUtil.createCanvas(\n        `proton_canvas_cache_${++canvasId}`,\n        width,\n        height\n      );\n      const context = canvas.getContext(\"2d\");\n      context.drawImage(img, 0, 0, img.width, img.height);\n\n      canvasCache[src] = canvas;\n    }\n\n    callback && callback(canvasCache[src], param);\n\n    return canvasCache[src];\n  }\n};\n","import Span from \"../math/Span\";\nimport ImgUtil from \"./ImgUtil\";\n\nexport default {\n  /**\n   * Returns the default if the value is null or undefined\n   *\n   * @memberof Proton#Proton.Util\n   * @method initValue\n   *\n   * @param {Mixed} value a specific value, could be everything but null or undefined\n   * @param {Mixed} defaults the default if the value is null or undefined\n   */\n  initValue(value, defaults) {\n    value = value !== null && value !== undefined ? value : defaults;\n    return value;\n  },\n\n  /**\n   * Checks if the value is a valid array\n   *\n   * @memberof Proton#Proton.Util\n   * @method isArray\n   *\n   * @param {Array} value Any array\n   *\n   * @returns {Boolean}\n   */\n  isArray(value) {\n    return Object.prototype.toString.call(value) === \"[object Array]\";\n  },\n\n  /**\n   * Destroyes the given array\n   *\n   * @memberof Proton#Proton.Util\n   * @method emptyArray\n   *\n   * @param {Array} array Any array\n   */\n  emptyArray(arr) {\n    if (arr) arr.length = 0;\n  },\n\n  toArray(arr) {\n    return this.isArray(arr) ? arr : [arr];\n  },\n\n  getRandFromArray(arr) {\n    if (!arr) return null;\n    return arr[Math.floor(arr.length * Math.random())];\n  },\n\n  /**\n   * Destroyes the given object\n   *\n   * @memberof Proton#Proton.Util\n   * @method emptyObject\n   *\n   * @param {Object} obj Any object\n   */\n  emptyObject(obj, ignore = null) {\n    for (let key in obj) {\n      if (ignore && ignore.indexOf(key) > -1) continue;\n      delete obj[key];\n    }\n  },\n\n  /**\n   * Makes an instance of a class and binds the given array\n   *\n   * @memberof Proton#Proton.Util\n   * @method classApply\n   *\n   * @param {Function} constructor A class to make an instance from\n   * @param {Array} [args] Any array to bind it to the constructor\n   *\n   * @return {Object} The instance of constructor, optionally bind with args\n   */\n  classApply(constructor, args = null) {\n    if (!args) {\n      return new constructor();\n    } else {\n      const FactoryFunc = constructor.bind.apply(\n        constructor,\n        [null].concat(args)\n      );\n      return new FactoryFunc();\n    }\n  },\n\n  /**\n   * @memberof Proton#Proton.Util\n   * @method setVectorVal\n   *\n   * @todo add description for param `target`\n   * @todo add description for param `conf`\n   * @todo add description for function\n   *\n   * @param {Object} target\n   * @param {Object} conf\n   */\n  setVectorVal(particle, conf = null) {\n    if (!conf) return;\n\n    if (this.hasProp(conf, \"x\")) particle.p.x = conf[\"x\"];\n    if (this.hasProp(conf, \"y\")) particle.p.y = conf[\"y\"];\n\n    if (this.hasProp(conf, \"vx\")) particle.v.x = conf[\"vx\"];\n    if (this.hasProp(conf, \"vy\")) particle.v.y = conf[\"vy\"];\n\n    if (this.hasProp(conf, \"ax\")) particle.a.x = conf[\"ax\"];\n    if (this.hasProp(conf, \"ay\")) particle.a.y = conf[\"ay\"];\n\n    if (this.hasProp(conf, \"p\")) particle.p.copy(conf[\"p\"]);\n    if (this.hasProp(conf, \"v\")) particle.v.copy(conf[\"v\"]);\n    if (this.hasProp(conf, \"a\")) particle.a.copy(conf[\"a\"]);\n\n    if (this.hasProp(conf, \"position\")) particle.p.copy(conf[\"position\"]);\n    if (this.hasProp(conf, \"velocity\")) particle.v.copy(conf[\"velocity\"]);\n    if (this.hasProp(conf, \"accelerate\")) particle.a.copy(conf[\"accelerate\"]);\n  },\n\n  hasProp(target, key) {\n    if (!target) return false;\n    return target[key] !== undefined;\n    // return obj.hasOwnProperty(key);\n  },\n\n  /**\n   * set the prototype in a given prototypeObject\n   *\n   * @memberof Proton#Proton.Util\n   * @method setProp\n   *\n   * @todo add description for param `target`\n   * @todo translate desription from chinese to english\n   *\n   * @param {Object} target\n   * @param {Object} prototypeObject An object of single prototypes\n   *\n   * @return {Object} target\n   */\n  setProp(target, props) {\n    for (let prop in props) {\n      if (target.hasOwnProperty(prop)) {\n        target[prop] = Span.getSpanValue(props[prop]);\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * This will get the image data. It could be necessary to create a Proton.Zone.\n   *\n   * @memberof Proton#Proton.Util\n   * @method getImageData\n   *\n   * @param {HTMLCanvasElement}   context any canvas, must be a 2dContext 'canvas.getContext('2d')'\n   * @param {Object}              image   could be any dom image, e.g. document.getElementById('thisIsAnImgTag');\n   * @param {Proton.Rectangle}    rect\n   */\n  getImageData(context, image, rect) {\n    return ImgUtil.getImageData(context, image, rect);\n  },\n\n  destroyAll(arr, param = null) {\n    let i = arr.length;\n\n    while (i--) {\n      try {\n        arr[i].destroy(param);\n      } catch (e) {}\n\n      delete arr[i];\n    }\n\n    arr.length = 0;\n  },\n\n  assign(target, source) {\n    if (typeof Object.assign !== \"function\") {\n      for (let key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n\n      return target;\n    } else {\n      return Object.assign(target, source);\n    }\n  }\n};\n","const idsMap = {};\n\nconst Puid = {\n  _index: 0,\n  _cache: {},\n\n  id(type) {\n    if (idsMap[type] === undefined || idsMap[type] === null) idsMap[type] = 0;\n    return `${type}_${idsMap[type]++}`;\n  },\n\n  getId(target) {\n    let uid = this.getIdFromCache(target);\n    if (uid) return uid;\n\n    uid = `PUID_${this._index++}`;\n    this._cache[uid] = target;\n\n    return uid;\n  },\n\n  getIdFromCache(target) {\n    let obj, id;\n\n    for (id in this._cache) {\n      obj = this._cache[id];\n\n      if (obj === target) return id;\n      if (this.isBody(obj, target) && obj.src === target.src) return id;\n    }\n\n    return null;\n  },\n\n  isBody(obj, target) {\n    return (\n      typeof obj === \"object\" &&\n      typeof target === \"object\" &&\n      obj.isInner &&\n      target.isInner\n    );\n  },\n\n  getTarget(uid) {\n    return this._cache[uid];\n  }\n};\n\nexport default Puid;\n","/**\n * Pool is the cache pool of the proton engine, it is very important.\n *\n * get(target, params, uid)\n *  Class\n *    uid = Puid.getId -> Puid save target cache\n *    target.__puid = uid\n *\n *  body\n *    uid = Puid.getId -> Puid save target cache\n *\n *\n * expire(target)\n *  cache[target.__puid] push target\n *\n */\nimport Util from \"../utils/Util\";\nimport Puid from \"../utils/Puid\";\n\nexport default class Pool {\n  /**\n   * @memberof! Proton#\n   * @constructor\n   * @alias Proton.Pool\n   *\n   * @todo add description\n   * @todo add description of properties\n   *\n   * @property {Number} total\n   * @property {Object} cache\n   */\n  constructor(num) {\n    this.total = 0;\n    this.cache = {};\n  }\n\n  /**\n   * @todo add description\n   *\n   * @method get\n   * @memberof Proton#Proton.Pool\n   *\n   * @param {Object|Function} target\n   * @param {Object} [params] just add if `target` is a function\n   *\n   * @return {Object}\n   */\n  get(target, params, uid) {\n    let p;\n    uid = uid || target.__puid || Puid.getId(target);\n\n    if (this.cache[uid] && this.cache[uid].length > 0) {\n      p = this.cache[uid].pop();\n    } else {\n      p = this.createOrClone(target, params);\n    }\n\n    p.__puid = target.__puid || uid;\n    return p;\n  }\n\n  /**\n   * @todo add description\n   *\n   * @method set\n   * @memberof Proton#Proton.Pool\n   *\n   * @param {Object} target\n   *\n   * @return {Object}\n   */\n  expire(target) {\n    return this.getCache(target.__puid).push(target);\n  }\n\n  /**\n   * Creates a new class instance\n   *\n   * @todo add more documentation\n   *\n   * @method create\n   * @memberof Proton#Proton.Pool\n   *\n   * @param {Object|Function} target any Object or Function\n   * @param {Object} [params] just add if `target` is a function\n   *\n   * @return {Object}\n   */\n  createOrClone(target, params) {\n    this.total++;\n\n    if (this.create) {\n      return this.create(target, params);\n    } else if (typeof target === \"function\") {\n      return Util.classApply(target, params);\n    } else {\n      return target.clone();\n    }\n  }\n\n  /**\n   * @todo add description - what is in the cache?\n   *\n   * @method getCount\n   * @memberof Proton#Proton.Pool\n   *\n   * @return {Number}\n   */\n  getCount() {\n    let count = 0;\n    for (let id in this.cache) count += this.cache[id].length;\n    return count++;\n  }\n\n  /**\n   * Destroyes all items from Pool.cache\n   *\n   * @method destroy\n   * @memberof Proton#Proton.Pool\n   */\n  destroy() {\n    for (let id in this.cache) {\n      this.cache[id].length = 0;\n      delete this.cache[id];\n    }\n  }\n\n  /**\n   * Returns Pool.cache\n   *\n   * @method getCache\n   * @memberof Proton#Proton.Pool\n   * @private\n   *\n   * @param {Number} uid the unique id\n   *\n   * @return {Object}\n   */\n  getCache(uid = \"default\") {\n    if (!this.cache[uid]) this.cache[uid] = [];\n    return this.cache[uid];\n  }\n}\n","export default class Stats {\n  constructor(proton) {\n    this.proton = proton;\n    this.container = null;\n    this.type = 1;\n\n    this.emitterIndex = 0;\n    this.rendererIndex = 0;\n  }\n\n  update(style, body) {\n    this.add(style, body);\n\n    const emitter = this.getEmitter();\n    const renderer = this.getRenderer();\n    let str = \"\";\n\n    switch (this.type) {\n      case 2:\n        str += \"emitter:\" + this.proton.emitters.length + \"<br>\";\n        if (emitter) str += \"em speed:\" + emitter.emitSpeed + \"<br>\";\n        if (emitter) str += \"pos:\" + this.getEmitterPos(emitter);\n        break;\n\n      case 3:\n        if (emitter)\n          str += \"initializes:\" + emitter.initializes.length + \"<br>\";\n        if (emitter)\n          str +=\n            '<span style=\"display:inline-block;\">' +\n            this.concatArr(emitter.initializes) +\n            \"</span><br>\";\n        if (emitter) str += \"behaviours:\" + emitter.behaviours.length + \"<br>\";\n        if (emitter)\n          str +=\n            '<span style=\"display:inline-block;\">' +\n            this.concatArr(emitter.behaviours) +\n            \"</span><br>\";\n        break;\n\n      case 4:\n        if (renderer) str += renderer.name + \"<br>\";\n        if (renderer) str += \"body:\" + this.getCreatedNumber(renderer) + \"<br>\";\n        break;\n\n      default:\n        str += \"particles:\" + this.proton.getCount() + \"<br>\";\n        str += \"pool:\" + this.proton.pool.getCount() + \"<br>\";\n        str += \"total:\" + this.proton.pool.total;\n    }\n\n    this.container.innerHTML = str;\n  }\n\n  add(style, body) {\n    if (!this.container) {\n      this.type = 1;\n\n      this.container = document.createElement(\"div\");\n      this.container.style.cssText = [\n        \"position:absolute;bottom:0px;left:0;cursor:pointer;\",\n        \"opacity:0.9;z-index:10000;padding:10px;font-size:12px;font-family:Helvetica,Arial,sans-serif;\",\n        \"width:120px;height:50px;background-color:#002;color:#0ff;\"\n      ].join(\"\");\n\n      this.container.addEventListener(\n        \"click\",\n        e => {\n          this.type++;\n          if (this.type > 4) this.type = 1;\n        },\n        false\n      );\n\n      let bg, color;\n      switch (style) {\n        case 2:\n          bg = \"#201\";\n          color = \"#f08\";\n          break;\n\n        case 3:\n          bg = \"#020\";\n          color = \"#0f0\";\n          break;\n\n        default:\n          bg = \"#002\";\n          color = \"#0ff\";\n      }\n\n      this.container.style[\"background-color\"] = bg;\n      this.container.style[\"color\"] = color;\n    }\n\n    if (!this.container.parentNode) {\n      body = body || this.body || document.body;\n      body.appendChild(this.container);\n    }\n  }\n\n  getEmitter() {\n    return this.proton.emitters[this.emitterIndex];\n  }\n\n  getRenderer() {\n    return this.proton.renderers[this.rendererIndex];\n  }\n\n  concatArr(arr) {\n    let result = \"\";\n    if (!arr || !arr.length) return result;\n\n    for (let i = 0; i < arr.length; i++) {\n      result += (arr[i].name || \"\").substr(0, 1) + \".\";\n    }\n\n    return result;\n  }\n\n  getCreatedNumber(renderer) {\n    return renderer.pool.total || (renderer.cpool && renderer.cpool.total) || 0;\n  }\n\n  getEmitterPos(e) {\n    return Math.round(e.p.x) + \",\" + Math.round(e.p.y);\n  }\n}\n","/*\n * EventDispatcher\n * This code reference since http://createjs.com/.\n *\n **/\n\nexport default class EventDispatcher {\n  constructor() {\n    this._listeners = null;\n  }\n\n  static bind(target) {\n    target.prototype.dispatchEvent = EventDispatcher.prototype.dispatchEvent;\n\n    target.prototype.hasEventListener =\n      EventDispatcher.prototype.hasEventListener;\n\n    target.prototype.addEventListener =\n      EventDispatcher.prototype.addEventListener;\n\n    target.prototype.removeEventListener =\n      EventDispatcher.prototype.removeEventListener;\n\n    target.prototype.removeAllEventListeners =\n      EventDispatcher.prototype.removeAllEventListeners;\n  }\n\n  addEventListener(type, listener) {\n    if (!this._listeners) {\n      this._listeners = {};\n    } else {\n      this.removeEventListener(type, listener);\n    }\n\n    if (!this._listeners[type]) this._listeners[type] = [];\n    this._listeners[type].push(listener);\n\n    return listener;\n  }\n\n  removeEventListener(type, listener) {\n    if (!this._listeners) return;\n    if (!this._listeners[type]) return;\n\n    const arr = this._listeners[type];\n    const length = arr.length;\n\n    for (let i = 0; i < length; i++) {\n      if (arr[i] === listener) {\n        if (length === 1) {\n          delete this._listeners[type];\n        }\n\n        // allows for faster checks.\n        else {\n          arr.splice(i, 1);\n        }\n\n        break;\n      }\n    }\n  }\n\n  removeAllEventListeners(type) {\n    if (!type) this._listeners = null;\n    else if (this._listeners) delete this._listeners[type];\n  }\n\n  dispatchEvent(type, args) {\n    let result = false;\n    const listeners = this._listeners;\n\n    if (type && listeners) {\n      let arr = listeners[type];\n      if (!arr) return result;\n\n      // arr = arr.slice();\n      // to avoid issues with items being removed or added during the dispatch\n\n      let handler;\n      let i = arr.length;\n      while (i--) {\n        handler = arr[i];\n        result = result || handler(args);\n      }\n    }\n\n    return !!result;\n  }\n\n  hasEventListener(type) {\n    const listeners = this._listeners;\n    return !!(listeners && listeners[type]);\n  }\n}\n","export default class Integration {\n  constructor(type) {\n    this.type = type;\n  }\n\n  calculate(particles, time, damping) {\n    this.eulerIntegrate(particles, time, damping);\n  }\n\n  // Euler Integrate\n  // https://rosettacode.org/wiki/Euler_method\n  eulerIntegrate(particle, time, damping) {\n    if (!particle.sleep) {\n      particle.old.p.copy(particle.p);\n      particle.old.v.copy(particle.v);\n\n      particle.a.multiplyScalar(1 / particle.mass);\n      particle.v.add(particle.a.multiplyScalar(time));\n      particle.p.add(particle.old.v.multiplyScalar(time));\n\n      if (damping) particle.v.multiplyScalar(damping);\n\n      particle.a.clear();\n    }\n  }\n}\n","import Pool from \"./Pool\";\nimport Util from \"../utils/Util\";\nimport Stats from \"../debug/Stats\";\nimport EventDispatcher from \"../events/EventDispatcher\";\nimport MathUtil from \"../math/MathUtil\";\nimport Integration from \"../math/Integration\";\n\nexport default class Proton {\n  static USE_CLOCK = false;\n\n  // measure 1:100\n  static MEASURE = 100;\n  static EULER = \"euler\";\n  static RK2 = \"runge-kutta2\";\n\n  // event name\n  static PARTICLE_CREATED = \"PARTICLE_CREATED\";\n  static PARTICLE_UPDATE = \"PARTICLE_UPDATE\";\n  static PARTICLE_SLEEP = \"PARTICLE_SLEEP\";\n  static PARTICLE_DEAD = \"PARTICLE_DEAD\";\n\n  static EMITTER_ADDED = \"EMITTER_ADDED\";\n  static EMITTER_REMOVED = \"EMITTER_REMOVED\";\n\n  static PROTON_UPDATE = \"PROTON_UPDATE\";\n  static PROTON_UPDATE_AFTER = \"PROTON_UPDATE_AFTER\";\n  static DEFAULT_INTERVAL = 0.0167;\n\n  static amendChangeTabsBug = true;\n\n  /**\n   * The constructor to add emitters\n   *\n   * @constructor Proton\n   *\n   * @todo proParticleCount is not in use\n   * @todo add more documentation of the single properties and parameters\n   *\n   * @param {Number} [proParticleCount] not in use?\n   * @param {Number} [integrationType=Proton.EULER]\n   *\n   * @property {String} [integrationType=Proton.EULER]\n   * @property {Array} emitters   All added emitter\n   * @property {Array} renderers  All added renderer\n   * @property {Number} time      The active time\n   * @property {Number} oldtime   The old time\n   */\n  constructor(integrationType) {\n    this.emitters = [];\n    this.renderers = [];\n\n    this.time = 0;\n    this.now = 0;\n    this.then = 0;\n    this.elapsed = 0;\n\n    this.stats = new Stats(this);\n    this.pool = new Pool(80);\n\n    this.integrationType = Util.initValue(integrationType, Proton.EULER);\n    this.integrator = new Integration(this.integrationType);\n\n    this._fps = \"auto\";\n    this._interval = Proton.DEFAULT_INTERVAL;\n  }\n\n  set fps(fps) {\n    this._fps = fps;\n    this._interval =\n      fps === \"auto\" ? Proton.DEFAULT_INTERVAL : MathUtil.floor(1 / fps, 7);\n  }\n\n  get fps() {\n    return this._fps;\n  }\n\n  /**\n   * add a type of Renderer\n   *\n   * @method addRenderer\n   * @memberof Proton\n   * @instance\n   *\n   * @param {Renderer} render\n   */\n  addRenderer(render) {\n    render.init(this);\n    this.renderers.push(render);\n  }\n\n  /**\n   * @name add a type of Renderer\n   *\n   * @method addRenderer\n   * @param {Renderer} render\n   */\n  removeRenderer(render) {\n    const index = this.renderers.indexOf(render);\n    this.renderers.splice(index, 1);\n    render.remove(this);\n  }\n\n  /**\n   * add the Emitter\n   *\n   * @method addEmitter\n   * @memberof Proton\n   * @instance\n   *\n   * @param {Emitter} emitter\n   */\n  addEmitter(emitter) {\n    this.emitters.push(emitter);\n    emitter.parent = this;\n\n    this.dispatchEvent(Proton.EMITTER_ADDED, emitter);\n  }\n\n  /**\n   * Removes an Emitter\n   *\n   * @method removeEmitter\n   * @memberof Proton\n   * @instance\n   *\n   * @param {Proton.Emitter} emitter\n   */\n  removeEmitter(emitter) {\n    const index = this.emitters.indexOf(emitter);\n    this.emitters.splice(index, 1);\n    emitter.parent = null;\n\n    this.dispatchEvent(Proton.EMITTER_REMOVED, emitter);\n  }\n\n  /**\n   * Updates all added emitters\n   *\n   * @method update\n   * @memberof Proton\n   * @instance\n   */\n  update() {\n    // 'auto' is the default browser refresh rate, the vast majority is 60fps\n    if (this._fps === \"auto\") {\n      this.dispatchEvent(Proton.PROTON_UPDATE);\n\n      if (Proton.USE_CLOCK) {\n        if (!this.then) this.then = new Date().getTime();\n        this.now = new Date().getTime();\n        this.elapsed = (this.now - this.then) * 0.001;\n        // Fix bugs such as chrome browser switching tabs causing excessive time difference\n        this.amendChangeTabsBug();\n\n        if (this.elapsed > 0) this.emittersUpdate(this.elapsed);\n        this.then = this.now;\n      } else {\n        this.emittersUpdate(Proton.DEFAULT_INTERVAL);\n      }\n\n      this.dispatchEvent(Proton.PROTON_UPDATE_AFTER);\n    }\n\n    // If the fps frame rate is set\n    else {\n      if (!this.then) this.then = new Date().getTime();\n      this.now = new Date().getTime();\n      this.elapsed = (this.now - this.then) * 0.001;\n\n      if (this.elapsed > this._interval) {\n        this.dispatchEvent(Proton.PROTON_UPDATE);\n        this.emittersUpdate(this._interval);\n        // https://stackoverflow.com/questions/19764018/controlling-fps-with-requestanimationframe\n        this.then = this.now - (this.elapsed % this._interval) * 1000;\n        this.dispatchEvent(Proton.PROTON_UPDATE_AFTER);\n      }\n    }\n  }\n\n  emittersUpdate(elapsed) {\n    let i = this.emitters.length;\n    while (i--) this.emitters[i].update(elapsed);\n  }\n\n  /**\n   * @todo add description\n   *\n   * @method amendChangeTabsBug\n   * @memberof Proton\n   * @instance\n   */\n  amendChangeTabsBug() {\n    if (!Proton.amendChangeTabsBug) return;\n    if (this.elapsed > 0.5) {\n      this.then = new Date().getTime();\n      this.elapsed = 0;\n    }\n  }\n\n  /**\n   * Counts all particles from all emitters\n   *\n   * @method getCount\n   * @memberof Proton\n   * @instance\n   */\n  getCount() {\n    let total = 0;\n    let i = this.emitters.length;\n\n    while (i--) total += this.emitters[i].particles.length;\n    return total;\n  }\n\n  getAllParticles() {\n    let particles = [];\n    let i = this.emitters.length;\n\n    while (i--) particles = particles.concat(this.emitters[i].particles);\n    return particles;\n  }\n\n  destroyAllEmitters() {\n    Util.destroyAll(this.emitters);\n  }\n\n  /**\n   * Destroys everything related to this Proton instance. This includes all emitters, and all properties\n   *\n   * @method destroy\n   * @memberof Proton\n   * @instance\n   */\n  destroy(remove = false) {\n    const destroyOther = () => {\n      this.time = 0;\n      this.then = 0;\n      this.pool.destroy();\n\n      Util.destroyAll(this.emitters);\n      Util.destroyAll(this.renderers, this.getAllParticles());\n    };\n\n    if (remove) {\n      setTimeout(destroyOther, 200);\n    } else {\n      destroyOther();\n    }\n  }\n}\n\nEventDispatcher.bind(Proton);\n","export default class Rgb {\n  constructor(r = 255, g = 255, b = 255) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n  }\n\n  reset() {\n    this.r = 255;\n    this.g = 255;\n    this.b = 255;\n  }\n}\n","import MathUtil from \"./MathUtil\";\n\nexport default {\n  easeLinear(value) {\n    return value;\n  },\n\n  easeInQuad(value) {\n    return Math.pow(value, 2);\n  },\n\n  easeOutQuad(value) {\n    return -(Math.pow(value - 1, 2) - 1);\n  },\n\n  easeInOutQuad(value) {\n    if ((value /= 0.5) < 1) return 0.5 * Math.pow(value, 2);\n\n    return -0.5 * ((value -= 2) * value - 2);\n  },\n\n  easeInCubic(value) {\n    return Math.pow(value, 3);\n  },\n\n  easeOutCubic(value) {\n    return Math.pow(value - 1, 3) + 1;\n  },\n\n  easeInOutCubic(value) {\n    if ((value /= 0.5) < 1) return 0.5 * Math.pow(value, 3);\n\n    return 0.5 * (Math.pow(value - 2, 3) + 2);\n  },\n\n  easeInQuart(value) {\n    return Math.pow(value, 4);\n  },\n\n  easeOutQuart(value) {\n    return -(Math.pow(value - 1, 4) - 1);\n  },\n\n  easeInOutQuart(value) {\n    if ((value /= 0.5) < 1) return 0.5 * Math.pow(value, 4);\n\n    return -0.5 * ((value -= 2) * Math.pow(value, 3) - 2);\n  },\n\n  easeInSine(value) {\n    return -Math.cos(value * MathUtil.PI_2) + 1;\n  },\n\n  easeOutSine(value) {\n    return Math.sin(value * MathUtil.PI_2);\n  },\n\n  easeInOutSine(value) {\n    return -0.5 * (Math.cos(Math.PI * value) - 1);\n  },\n\n  easeInExpo(value) {\n    return value === 0 ? 0 : Math.pow(2, 10 * (value - 1));\n  },\n\n  easeOutExpo(value) {\n    return value === 1 ? 1 : -Math.pow(2, -10 * value) + 1;\n  },\n\n  easeInOutExpo(value) {\n    if (value === 0) return 0;\n\n    if (value === 1) return 1;\n\n    if ((value /= 0.5) < 1) return 0.5 * Math.pow(2, 10 * (value - 1));\n\n    return 0.5 * (-Math.pow(2, -10 * --value) + 2);\n  },\n\n  easeInCirc(value) {\n    return -(Math.sqrt(1 - value * value) - 1);\n  },\n\n  easeOutCirc(value) {\n    return Math.sqrt(1 - Math.pow(value - 1, 2));\n  },\n\n  easeInOutCirc(value) {\n    if ((value /= 0.5) < 1) return -0.5 * (Math.sqrt(1 - value * value) - 1);\n    return 0.5 * (Math.sqrt(1 - (value -= 2) * value) + 1);\n  },\n\n  easeInBack(value) {\n    let s = 1.70158;\n    return value * value * ((s + 1) * value - s);\n  },\n\n  easeOutBack(value) {\n    let s = 1.70158;\n    return (value = value - 1) * value * ((s + 1) * value + s) + 1;\n  },\n\n  easeInOutBack(value) {\n    let s = 1.70158;\n    if ((value /= 0.5) < 1)\n      return 0.5 * (value * value * (((s *= 1.525) + 1) * value - s));\n    return 0.5 * ((value -= 2) * value * (((s *= 1.525) + 1) * value + s) + 2);\n  },\n\n  getEasing(ease) {\n    if (typeof ease === \"function\") return ease;\n    else return this[ease] || this.easeLinear;\n  }\n};\n","import MathUtil from \"../math/MathUtil\";\n\nexport default class Vector2D {\n  constructor(x, y) {\n    this.x = x || 0;\n    this.y = y || 0;\n  }\n\n  set(x, y) {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  setX(x) {\n    this.x = x;\n    return this;\n  }\n\n  setY(y) {\n    this.y = y;\n    return this;\n  }\n\n  getGradient() {\n    if (this.x !== 0) return Math.atan2(this.y, this.x);\n    else if (this.y > 0) return MathUtil.PI_2;\n    else if (this.y < 0) return -MathUtil.PI_2;\n  }\n\n  copy(v) {\n    this.x = v.x;\n    this.y = v.y;\n\n    return this;\n  }\n\n  add(v, w) {\n    if (w !== undefined) {\n      return this.addVectors(v, w);\n    }\n\n    this.x += v.x;\n    this.y += v.y;\n\n    return this;\n  }\n\n  addXY(a, b) {\n    this.x += a;\n    this.y += b;\n\n    return this;\n  }\n\n  addVectors(a, b) {\n    this.x = a.x + b.x;\n    this.y = a.y + b.y;\n\n    return this;\n  }\n\n  sub(v, w) {\n    if (w !== undefined) {\n      return this.subVectors(v, w);\n    }\n\n    this.x -= v.x;\n    this.y -= v.y;\n\n    return this;\n  }\n\n  subVectors(a, b) {\n    this.x = a.x - b.x;\n    this.y = a.y - b.y;\n\n    return this;\n  }\n\n  divideScalar(s) {\n    if (s !== 0) {\n      this.x /= s;\n      this.y /= s;\n    } else {\n      this.set(0, 0);\n    }\n\n    return this;\n  }\n\n  multiplyScalar(s) {\n    this.x *= s;\n    this.y *= s;\n\n    return this;\n  }\n\n  negate() {\n    return this.multiplyScalar(-1);\n  }\n\n  dot(v) {\n    return this.x * v.x + this.y * v.y;\n  }\n\n  lengthSq() {\n    return this.x * this.x + this.y * this.y;\n  }\n\n  length() {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  normalize() {\n    return this.divideScalar(this.length());\n  }\n\n  distanceTo(v) {\n    return Math.sqrt(this.distanceToSquared(v));\n  }\n\n  rotate(tha) {\n    const x = this.x;\n    const y = this.y;\n\n    this.x = x * Math.cos(tha) + y * Math.sin(tha);\n    this.y = -x * Math.sin(tha) + y * Math.cos(tha);\n\n    return this;\n  }\n\n  distanceToSquared(v) {\n    const dx = this.x - v.x;\n    const dy = this.y - v.y;\n\n    return dx * dx + dy * dy;\n  }\n\n  lerp(v, alpha) {\n    this.x += (v.x - this.x) * alpha;\n    this.y += (v.y - this.y) * alpha;\n\n    return this;\n  }\n\n  equals(v) {\n    return v.x === this.x && v.y === this.y;\n  }\n\n  clear() {\n    this.x = 0.0;\n    this.y = 0.0;\n    return this;\n  }\n\n  clone() {\n    return new Vector2D(this.x, this.y);\n  }\n}\n","/** @typedef {import('../behaviour/Behaviour')} Behaviour */\n/** @typedef {import('../math/Vector2D')} Vector2D */\n/** @typedef {import('../utils/Rgb')} Rgb */\nimport Rgb from \"../utils/Rgb\";\nimport Puid from \"../utils/Puid\";\nimport Util from \"../utils/Util\";\nimport ease from \"../math/ease\";\nimport Vector2D from \"../math/Vector2D\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class Particle {\n  /** @type string */\n  id = ''\n\n  /** @type {{p:Vector2D,v:Vector2D,a:Vector2D}} */\n  old = {}\n\n  /** @type {object} */\n  data = {}\n\n  /** @type {Behaviour[]} */\n  behaviours = []\n\n  /** @type {Vector2D} */\n  p = []\n\n  /** @type {Vector2D} */\n  v = []\n\n  /** @type {Vector2D} */\n  a = []\n\n  /** @type {Rgb} */\n  rgb = {}\n\n  /**\n   * the Particle class\n   *\n   * @class Proton.Particle\n   * @constructor\n   * @param {Object} pObj the parameters object;\n   * for example {life:3,dead:false}\n   */\n  constructor(conf) {\n    /**\n     * The particle's id;\n     * @property id\n     * @type {string}\n     */\n    this.name = \"Particle\";\n    this.id = Puid.id(this.name);\n    this.old = {};\n    this.data = {};\n    this.behaviours = [];\n\n    this.p = new Vector2D();\n    this.v = new Vector2D();\n    this.a = new Vector2D();\n    this.old.p = new Vector2D();\n    this.old.v = new Vector2D();\n    this.old.a = new Vector2D();\n\n    this.rgb = new Rgb();\n    this.reset();\n    conf && Util.setProp(this, conf);\n  }\n\n  getDirection() {\n    return Math.atan2(this.v.x, -this.v.y) * MathUtil.N180_PI;\n  }\n\n  reset() {\n    this.life = Infinity;\n    this.age = 0;\n\n    this.dead = false;\n    this.sleep = false;\n    this.body = null;\n    this.sprite = null;\n    this.parent = null;\n\n    this.energy = 1; // Energy Loss\n    this.mass = 1;\n    this.radius = 10;\n    this.alpha = 1;\n    this.scale = 1;\n    this.rotation = 0;\n    this.color = null;\n\n    this.p.set(0, 0);\n    this.v.set(0, 0);\n    this.a.set(0, 0);\n    this.old.p.set(0, 0);\n    this.old.v.set(0, 0);\n    this.old.a.set(0, 0);\n    this.easing = ease.easeLinear;\n\n    this.rgb.reset();\n    Util.emptyObject(this.data);\n    this.removeAllBehaviours();\n\n    return this;\n  }\n\n  update(time, index) {\n    if (!this.sleep) {\n      this.age += time;\n      this.applyBehaviours(time, index);\n    }\n\n    if (this.age < this.life) {\n      const scale = this.easing(this.age / this.life);\n      this.energy = Math.max(1 - scale, 0);\n    } else {\n      this.destroy();\n    }\n  }\n\n  applyBehaviours(time, index) {\n    const length = this.behaviours.length;\n    let i;\n\n    for (i = 0; i < length; i++) {\n      this.behaviours[i] &&\n        this.behaviours[i].applyBehaviour(this, time, index);\n    }\n  }\n\n  /**\n   * @param {Behaviour} behaviour\n   */\n  addBehaviour(behaviour) {\n    this.behaviours.push(behaviour);\n\n    if (behaviour.hasOwnProperty(\"parents\")) behaviour.parents.push(this);\n    behaviour.initialize(this);\n  }\n\n  /**\n   * @param {Behaviour[]} behaviours\n   */\n  addBehaviours(behaviours) {\n    const length = behaviours.length;\n    let i;\n\n    for (i = 0; i < length; i++) {\n      this.addBehaviour(behaviours[i]);\n    }\n  }\n\n  removeBehaviour(behaviour) {\n    const index = this.behaviours.indexOf(behaviour);\n\n    if (index > -1) {\n      const behaviour = this.behaviours.splice(index, 1);\n      behaviour.parents = null;\n    }\n  }\n\n  removeAllBehaviours() {\n    Util.emptyArray(this.behaviours);\n  }\n\n  /**\n   * Destory this particle\n   * @method destroy\n   */\n  destroy() {\n    this.removeAllBehaviours();\n    this.energy = 0;\n    this.dead = true;\n    this.parent = null;\n  }\n}\n","export default {\n  /**\n   * @typedef  {Object} rgbObject\n   * @property {Number} r red value\n   * @property {Number} g green value\n   * @property {Number} b blue value\n   */\n  /**\n   * converts a hex value to a rgb object\n   *\n   * @memberof Proton#Proton.Util\n   * @method hexToRgb\n   *\n   * @param {String} h any hex value, e.g. #000000 or 000000 for black\n   *\n   * @return {rgbObject}\n   */\n  hexToRgb(h) {\n    const hex16 = h.charAt(0) === \"#\" ? h.substring(1, 7) : h;\n    const r = parseInt(hex16.substring(0, 2), 16);\n    const g = parseInt(hex16.substring(2, 4), 16);\n    const b = parseInt(hex16.substring(4, 6), 16);\n\n    return { r, g, b };\n  },\n\n  /**\n   * converts a rgb value to a rgb string\n   *\n   * @memberof Proton#Proton.Util\n   * @method rgbToHex\n   *\n   * @param {Object | Proton.hexToRgb} rgb a rgb object like in {@link Proton#Proton.}\n   *\n   * @return {String} rgb()\n   */\n  rgbToHex(rbg) {\n    return `rgb(${rbg.r}, ${rbg.g}, ${rbg.b})`;\n  },\n\n  getHex16FromParticle(p) {\n    return Number(p.rgb.r) * 65536 + Number(p.rgb.g) * 256 + Number(p.rgb.b);\n  }\n};\n","import Vector2D from \"./Vector2D\";\n\nexport default class Polar2D {\n  constructor(r, tha) {\n    this.r = Math.abs(r) || 0;\n    this.tha = tha || 0;\n  }\n\n  set(r, tha) {\n    this.r = r;\n    this.tha = tha;\n    return this;\n  }\n\n  setR(r) {\n    this.r = r;\n    return this;\n  }\n\n  setTha(tha) {\n    this.tha = tha;\n    return this;\n  }\n\n  copy(p) {\n    this.r = p.r;\n    this.tha = p.tha;\n    return this;\n  }\n\n  toVector() {\n    return new Vector2D(this.getX(), this.getY());\n  }\n\n  getX() {\n    return this.r * Math.sin(this.tha);\n  }\n\n  getY() {\n    return -this.r * Math.cos(this.tha);\n  }\n\n  normalize() {\n    this.r = 1;\n    return this;\n  }\n\n  equals(v) {\n    return v.r === this.r && v.tha === this.tha;\n  }\n\n  clear() {\n    this.r = 0.0;\n    this.tha = 0.0;\n    return this;\n  }\n\n  clone() {\n    return new Polar2D(this.r, this.tha);\n  }\n}\n","const Mat3 = {\n  create(mat3) {\n    const mat = new Float32Array(9);\n    if (mat3) this.set(mat3, mat);\n\n    return mat;\n  },\n\n  set(mat1, mat2) {\n    for (let i = 0; i < 9; i++) mat2[i] = mat1[i];\n\n    return mat2;\n  },\n\n  multiply(mat, mat2, mat3) {\n    let a00 = mat[0],\n      a01 = mat[1],\n      a02 = mat[2],\n      a10 = mat[3],\n      a11 = mat[4],\n      a20 = mat[6],\n      a21 = mat[7],\n      b00 = mat2[0],\n      b01 = mat2[1],\n      b02 = mat2[2],\n      b10 = mat2[3],\n      b11 = mat2[4],\n      b20 = mat2[6],\n      b21 = mat2[7];\n\n    mat3[0] = b00 * a00 + b01 * a10;\n    mat3[1] = b00 * a01 + b01 * a11;\n    mat3[2] = a02 * b02;\n    mat3[3] = b10 * a00 + b11 * a10;\n    mat3[4] = b10 * a01 + b11 * a11;\n    mat3[6] = b20 * a00 + b21 * a10 + a20;\n    mat3[7] = b20 * a01 + b21 * a11 + a21;\n\n    return mat3;\n  },\n\n  inverse(mat, mat3) {\n    let a00 = mat[0],\n      a01 = mat[1],\n      a10 = mat[3],\n      a11 = mat[4],\n      a20 = mat[6],\n      a21 = mat[7],\n      b01 = a11,\n      b11 = -a10,\n      b21 = a21 * a10 - a11 * a20,\n      d = a00 * b01 + a01 * b11,\n      id;\n\n    id = 1 / d;\n    mat3[0] = b01 * id;\n    mat3[1] = -a01 * id;\n    mat3[3] = b11 * id;\n    mat3[4] = a00 * id;\n    mat3[6] = b21 * id;\n    mat3[7] = (-a21 * a00 + a01 * a20) * id;\n\n    return mat3;\n  },\n\n  multiplyVec2(m, vec, mat3) {\n    let x = vec[0],\n      y = vec[1];\n\n    mat3[0] = x * m[0] + y * m[3] + m[6];\n    mat3[1] = x * m[1] + y * m[4] + m[7];\n\n    return mat3;\n  }\n};\n\nexport default Mat3;\n","import Span from \"./Span\";\nimport Util from \"../utils/Util\";\nimport MathUtil from \"./MathUtil\";\n\nexport default class ArraySpan extends Span {\n  constructor(color) {\n    super();\n    this._arr = Util.toArray(color);\n  }\n\n  getValue() {\n    const val = Util.getRandFromArray(this._arr);\n    return val === \"random\" || val === \"Random\" ? MathUtil.randomColor() : val;\n  }\n\n  /**\n   * Make sure that the color is an instance of Proton.ArraySpan, if not it makes a new instance\n   *\n   * @method setSpanValue\n   * @memberof Proton#Proton.Color\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} the integrate time 1/ms\n   * @param {Int} the particle index\n   */\n  static createArraySpan(arr) {\n    if (!arr) return null;\n\n    if (arr instanceof ArraySpan) return arr;\n    else return new ArraySpan(arr);\n  }\n}\n","export default class Rectangle {\n  constructor(x, y, w, h) {\n    this.x = x;\n    this.y = y;\n\n    this.width = w;\n    this.height = h;\n\n    this.bottom = this.y + this.height;\n    this.right = this.x + this.width;\n  }\n\n  contains(x, y) {\n    if (x <= this.right && x >= this.x && y <= this.bottom && y >= this.y)\n      return true;\n    else return false;\n  }\n}\n","import Span from \"../math/Span\";\nimport Util from \"../utils/Util\";\n\nexport default class Rate {\n  /**\n   * The number of particles per second emission (a [particle]/b [s]);\n   * @namespace\n   * @memberof! Proton#\n   * @constructor\n   * @alias Rate\n   *\n   * @param {Array | Number | Span} numpan the number of each emission;\n   * @param {Array | Number | Span} timepan the time of each emission;\n   * for example: new Rate(new Span(10, 20), new Span(.1, .25));\n   */\n  constructor(numpan, timepan) {\n    this.numPan = Span.setSpanValue(Util.initValue(numpan, 1));\n    this.timePan = Span.setSpanValue(Util.initValue(timepan, 1));\n\n    this.startTime = 0;\n    this.nextTime = 0;\n    this.init();\n  }\n\n  init() {\n    this.startTime = 0;\n    this.nextTime = this.timePan.getValue();\n  }\n\n  getValue(time) {\n    this.startTime += time;\n\n    if (this.startTime >= this.nextTime) {\n      this.startTime = 0;\n      this.nextTime = this.timePan.getValue();\n\n      if (this.numPan.b === 1) {\n        if (this.numPan.getValue(false) > 0.5) return 1;\n        else return 0;\n      } else {\n        return this.numPan.getValue(true);\n      }\n    }\n\n    return 0;\n  }\n}\n","export default class Initialize {\n  reset() {}\n\n  init(emitter, particle) {\n    if (particle) {\n      this.initialize(particle);\n    } else {\n      this.initialize(emitter);\n    }\n  }\n\n  // sub class init\n  initialize(target) {}\n}\n","import Span from \"../math/Span\";\nimport Initialize from \"./Initialize\";\n\nexport default class Life extends Initialize {\n  constructor(a, b, c) {\n    super();\n\n    this.lifePan = Span.setSpanValue(a, b, c);\n    this.name = \"Life\";\n  }\n\n  initialize(target) {\n    if (this.lifePan.a === Infinity) target.life = Infinity;\n    else target.life = this.lifePan.getValue();\n  }\n}\n","import Vector2D from \"../math/Vector2D\";\n\nexport default class Zone {\n  constructor() {\n    this.vector = new Vector2D(0, 0);\n    this.random = 0;\n    this.crossType = \"dead\";\n    this.alert = true;\n  }\n\n  getPosition() {}\n\n  crossing(particle) {}\n}\n","import Zone from \"./Zone\";\n\nexport default class PointZone extends Zone {\n  constructor(x, y) {\n    super();\n\n    this.x = x;\n    this.y = y;\n  }\n\n  getPosition() {\n    this.vector.x = this.x;\n    this.vector.y = this.y;\n\n    return this.vector;\n  }\n\n  crossing(particle) {\n    if (this.alert) {\n      console.error(\"Sorry, PointZone does not support crossing method!\");\n      this.alert = false;\n    }\n  }\n}\n","import Util from \"../utils/Util\";\nimport PointZone from \"../zone/PointZone\";\nimport Initialize from \"./Initialize\";\n\nexport default class Position extends Initialize {\n  constructor(zone) {\n    super();\n    this.zone = Util.initValue(zone, new PointZone());\n    this.name = \"Position\";\n  }\n\n  reset(zone) {\n    this.zone = Util.initValue(zone, new PointZone());\n  }\n\n  initialize(target) {\n    this.zone.getPosition();\n\n    target.p.x = this.zone.vector.x;\n    target.p.y = this.zone.vector.y;\n  }\n}\n","import Proton from \"../core/Proton\";\nimport Span from \"../math/Span\";\nimport Util from \"../utils/Util\";\nimport Initialize from \"./Initialize\";\nimport Polar2D from \"../math/Polar2D\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class Velocity extends Initialize {\n  constructor(rpan, thapan, type) {\n    super();\n\n    this.rPan = Span.setSpanValue(rpan);\n    this.thaPan = Span.setSpanValue(thapan);\n    this.type = Util.initValue(type, \"vector\");\n\n    this.name = \"Velocity\";\n  }\n\n  reset(rpan, thapan, type) {\n    this.rPan = Span.setSpanValue(rpan);\n    this.thaPan = Span.setSpanValue(thapan);\n    this.type = Util.initValue(type, \"vector\");\n  }\n\n  normalizeVelocity(vr) {\n    return vr * Proton.MEASURE;\n  }\n\n  initialize(target) {\n    if (this.type === \"p\" || this.type === \"P\" || this.type === \"polar\") {\n      const polar2d = new Polar2D(\n        this.normalizeVelocity(this.rPan.getValue()),\n        this.thaPan.getValue() * MathUtil.PI_180\n      );\n\n      target.v.x = polar2d.getX();\n      target.v.y = polar2d.getY();\n    } else {\n      target.v.x = this.normalizeVelocity(this.rPan.getValue());\n      target.v.y = this.normalizeVelocity(this.thaPan.getValue());\n    }\n  }\n}\n","import Span from \"../math/Span\";\nimport Initialize from \"./Initialize\";\n\nexport default class Mass extends Initialize {\n  constructor(a, b, c) {\n    super();\n    this.massPan = Span.setSpanValue(a, b, c);\n    this.name = \"Mass\";\n  }\n\n  initialize(target) {\n    target.mass = this.massPan.getValue();\n  }\n}\n","import Span from \"../math/Span\";\nimport Initialize from \"./Initialize\";\n\nexport default class Radius extends Initialize {\n  constructor(a, b, c) {\n    super();\n    this.radius = Span.setSpanValue(a, b, c);\n\n    this.name = \"Radius\";\n  }\n\n  reset(a, b, c) {\n    this.radius = Span.setSpanValue(a, b, c);\n  }\n\n  initialize(particle) {\n    particle.radius = this.radius.getValue();\n    particle.data.oldRadius = particle.radius;\n  }\n}\n","import Util from \"../utils/Util\";\nimport ArraySpan from \"../math/ArraySpan\";\nimport Initialize from \"./Initialize\";\n\nexport default class Body extends Initialize {\n  constructor(image, w, h) {\n    super();\n\n    this.image = this.setSpanValue(image);\n    this.w = Util.initValue(w, 20);\n    this.h = Util.initValue(h, this.w);\n    this.name = \"Body\";\n  }\n\n  initialize(particle) {\n    const imageTarget = this.image.getValue();\n\n    if (typeof imageTarget === \"string\") {\n      particle.body = {\n        width: this.w,\n        height: this.h,\n        src: imageTarget,\n        isInner: true,\n        inner: true\n      };\n    } else {\n      particle.body = imageTarget;\n    }\n  }\n\n  setSpanValue(image) {\n    return image instanceof ArraySpan ? image : new ArraySpan(image);\n  }\n}\n","import Proton from '../core/Proton';\nimport Util from '../utils/Util';\nimport ease from '../math/ease';\n\nexport default class Behaviour {\n    static id = 0;\n\n    /**\n     * The Behaviour class is the base for the other Behaviour\n     *\n     * @memberof! -\n     * @interface\n     * @alias Proton.Behaviour\n     *\n     * @param {Number} life \tthe behaviours life\n     * @param {String} easing \tThe behaviour's decaying trend, for example ease.easeOutQuart\n     *\n     * @property {String}  id \t\tThe behaviours id\n     * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n     * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n     * @property {Number}  age=0 \tHow long the particle should be 'alife'\n     * @property {Number}  energy=1\n     * @property {Boolean} dead=false The particle is dead at first\n     * @property {Array}   parents \tThe behaviour's parents array\n     * @property {String}  name \tThe behaviour name\n     */\n    constructor(life, easing) {\n\n        this.life = Util.initValue(life, Infinity);\n        this.easing = ease.getEasing(easing);\n\n        this.age = 0;\n        this.energy = 1;\n        this.dead = false;\n        this.parents = [];\n\n        this.id = `Behaviour_${Behaviour.id++}`;\n        this.name = 'Behaviour';\n    }\n\n    /**\n     * Reset this behaviour's parameters\n     *\n     * @method reset\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Number} [life=Infinity] \t\tthis behaviour's life\n     * @param {String} [easing=easeLinear] \tthis behaviour's easing\n     */\n    reset(life, easing) {\n        this.life = Util.initValue(life, Infinity);\n        this.easing = ease.getEasing(easing);\n    }\n\n    /**\n     * Normalize a force by 1:100;\n     *\n     * @method normalizeForce\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Proton.Vector2D} force\n     */\n    normalizeForce(force) {\n        return force.multiplyScalar(Proton.MEASURE);\n    }\n\n    /**\n     * Normalize a value by 1:100;\n     *\n     * @method normalizeValue\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Number} value\n     */\n    normalizeValue(value) {\n        return value * Proton.MEASURE;\n    }\n\n    /**\n     * Initialize the behaviour's parameters for all particles\n     *\n     * @method initialize\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Proton.Particle} particle\n     */\n    initialize(particle) {}\n\n    /**\n     * Apply this behaviour for all particles every time\n     *\n     * @method applyBehaviour\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Proton.Particle} particle\n     * @param {Number} \t\t\ttime the integrate time 1/ms\n     * @param {Int} \t\t\tindex the particle index\n     */\n    calculate(particle, time, index) {\n        this.age += time;\n\n        if (this.age >= this.life || this.dead) {\n            this.energy = 0;\n            this.dead = true;\n            this.destroy();\n        } else {\n            const scale = this.easing(particle.age / particle.life);\n            this.energy = Math.max(1 - scale, 0);\n        }\n    }\n\n    /**\n     * Destory this behaviour\n     *\n     * @method destroy\n     * @memberof Proton.Behaviour\n     * @instance\n     */\n    destroy() {\n        let i = this.parents.length;\n        while (i--) {\n            this.parents[i].removeBehaviour(this);\n        }\n\n        this.parents.length = 0;\n    }\n}\n","import Vector2D from '../math/Vector2D';\nimport Behaviour from './Behaviour';\n\nexport default class Force extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Force\n\t *\n\t * @param {Number} fx\n\t * @param {Number} fy\n\t * @param {Number} [life=Infinity] \t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(fx, fy, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.force = this.normalizeForce(new Vector2D(fx, fy));\n\t\tthis.name = 'Force';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Force\n\t * @instance\n\t *\n\t * @param {Number} fx\n\t * @param {Number} fy\n\t * @param {Number} [life=Infinity] \t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(fx, fy, life, easing) {\n\t\tthis.force = this.normalizeForce(new Vector2D(fx, fy));\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#Proton.Force\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} the integrate time 1/ms\n\t * @param {Int} the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.calculate(particle, time, index);\n\t\tparticle.a.add(this.force);\n\t}\n}","import Util from \"../utils/Util\";\nimport Vector2D from \"../math/Vector2D\";\nimport Behaviour from \"./Behaviour\";\n\nexport default class Attraction extends Behaviour {\n  /**\n   * This behaviour let the particles follow one specific Proton.Vector2D\n   *\n   * @memberof! Proton#\n   * @augments Proton.Behaviour\n   * @constructor\n   * @alias Proton.Attraction\n   *\n   * @todo add description for 'force' and 'radius'\n   *\n   * @param {Proton.Vector2D} targetPosition the attraction point coordinates\n   * @param {Number} [force=100]\n   * @param {Number} [radius=1000]\n   * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   *\n   * @property {Proton.Vector2D} targetPosition\n   * @property {Number} radius\n   * @property {Number} force\n   * @property {Number} radiusSq\n   * @property {Proton.Vector2D} attractionForce\n   * @property {Number} lengthSq\n   * @property {String} name The Behaviour name\n   */\n  constructor(targetPosition, force, radius, life, easing) {\n    super(life, easing);\n\n    this.targetPosition = Util.initValue(targetPosition, new Vector2D());\n    this.radius = Util.initValue(radius, 1000);\n    this.force = Util.initValue(this.normalizeValue(force), 100);\n\n    this.radiusSq = this.radius * this.radius;\n    this.attractionForce = new Vector2D();\n    this.lengthSq = 0;\n\n    this.name = \"Attraction\";\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#Proton.Attraction\n   * @instance\n   *\n   * @todo add description for 'force' and 'radius'\n   *\n   * @param {Proton.Vector2D} targetPosition the attraction point coordinates\n   * @param {Number} [force=100]\n   * @param {Number} [radius=1000]\n   * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   */\n  reset(targetPosition, force, radius, life, easing) {\n    this.targetPosition = Util.initValue(targetPosition, new Vector2D());\n    this.radius = Util.initValue(radius, 1000);\n    this.force = Util.initValue(this.normalizeValue(force), 100);\n\n    this.radiusSq = this.radius * this.radius;\n    this.attractionForce = new Vector2D();\n    this.lengthSq = 0;\n\n    life && super.reset(life, easing);\n  }\n\n  /**\n   * Apply this behaviour for all particles every time\n   *\n   * @memberof Proton#Proton.Attraction\n   * @method applyBehaviour\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} \t\t\ttime the integrate time 1/ms\n   * @param {Int} \t\t\tindex the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    this.calculate(particle, time, index);\n\n    this.attractionForce.copy(this.targetPosition);\n    this.attractionForce.sub(particle.p);\n    this.lengthSq = this.attractionForce.lengthSq();\n\n    if (this.lengthSq > 0.00004 && this.lengthSq < this.radiusSq) {\n      this.attractionForce.normalize();\n      this.attractionForce.multiplyScalar(1 - this.lengthSq / this.radiusSq);\n      this.attractionForce.multiplyScalar(this.force);\n\n      particle.a.add(this.attractionForce);\n    }\n  }\n}\n","import Vector2D from \"../math/Vector2D\";\nimport MathUtil from \"../math/MathUtil\";\nimport Behaviour from \"./Behaviour\";\n\nexport default class RandomDrift extends Behaviour {\n  /**\n   * @memberof! Proton#\n   * @augments Behaviour\n   * @constructor\n   * @alias RandomDrift\n   *\n   * @param {Number} driftX \t\t\t\tX value of the new Vector2D\n   * @param {Number} driftY  \t\t\t\tY value of the new Vector2D\n   * @param {Number} delay \t\t\t\tHow much delay the drift should have\n   * @param {Number} [life=Infinity] \t\tthis behaviour's life\n   * @param {String} [easing=easeLinear] \tthis behaviour's easing\n   *\n   * @property {Number} time The time of the drift\n   * @property {String} name The Behaviour name\n   */\n  constructor(driftX, driftY, delay, life, easing) {\n    super(life, easing);\n\n    this.reset(driftX, driftY, delay);\n    this.time = 0;\n    this.name = \"RandomDrift\";\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#RandomDrift\n   * @instance\n   *\n   * @param {Number} driftX \t\t\t\tX value of the new Vector2D\n   * @param {Number} driftY  \t\t\t\tY value of the new Vector2D\n   * @param {Number} delay \t\t\t\tHow much delay the drift should have\n   * @param {Number} [life=Infinity] \t\tthis behaviour's life\n   * @param {String} [easing=easeLinear] \tthis behaviour's easing\n   */\n  reset(driftX, driftY, delay, life, easing) {\n    this.panFoce = new Vector2D(driftX, driftY);\n    this.panFoce = this.normalizeForce(this.panFoce);\n    this.delay = delay;\n\n    life && super.reset(life, easing);\n  }\n\n  initialize(particle) {\n    particle.data.time = 0;\n  }\n\n  /**\n   * Apply this behaviour for all particles every time\n   *\n   * @method applyBehaviour\n   * @memberof Proton#RandomDrift\n   * @instance\n   *\n   * @param {Particle} particle\n   * @param {Number} \t\t\ttime the integrate time 1/ms\n   * @param {Int} \t\t\tindex the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    this.calculate(particle, time, index);\n    particle.data.time += time;\n\n    if (particle.data.time >= this.delay) {\n      particle.a.addXY(\n        MathUtil.randomAToB(-this.panFoce.x, this.panFoce.x),\n        MathUtil.randomAToB(-this.panFoce.y, this.panFoce.y)\n      );\n\n      particle.data.time = 0;\n    }\n  }\n}\n","import Force from './Force';\n\nexport default class Gravity extends Force {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton#Proton.Force\n\t * @constructor\n\t * @alias Proton.Gravity\n\t *\n\t * @param {Number} g \t\t\t\t\t\t\tGravity\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(g, life, easing) {\n\t\tsuper(0, g, life, easing);\n\t\tthis.name = 'Gravity';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Gravity\n\t * @instance\n\t *\n\t * @param {Number} g \t\t\t\t\t\t\tGravity\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(g, life, easing) {\n\t\tsuper.reset(0, g, life, easing);\n\t}\n}","import Util from '../utils/Util';\nimport Vector2D from '../math/Vector2D';\nimport Behaviour from './Behaviour';\n\nexport default class Collision extends Behaviour {\n\n\t/**\n\t * The callback after collision\n\t *\n\t * @callback Callback\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Proton.Paritcle} otherParticle\n\t */\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Collision\n\t *\n\t * @todo add description to mass\n\t *\n\t * @param {Proton.Emitter} \t[emitter=null] \t\tthe attraction point coordinates\n\t * @param {Boolean} \t\t[mass=true]\n\t * @param {Callback}\t \t[callback=null]\t\tthe callback after the collision\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(emitter, mass, callback, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.reset(emitter, mass, callback);\n\t\tthis.name = 'Collision';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @memberof Proton#Proton.Collision\n\t * @method reset\n\t * @instance\n\t *\n\t * @todo add description to mass\n\t *\n\t * @param {Proton.Emitter} \t[emitter=null] \t\tthe attraction point coordinates\n\t * @param {Boolean} \t\t[mass=true]\n\t * @param {Callback}\t \t[callback=null]\t\tthe callback after the collision\n\t * @param {Number} \t\t\t[life=Infinity] \tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(emitter, mass, callback, life, easing) {\n\t\tthis.emitter = Util.initValue(emitter, null);\n\t\tthis.mass = Util.initValue(mass, true);\n\t\tthis.callback = Util.initValue(callback, null);\n\n\t\tthis.collisionPool = [];\n\t\tthis.delta = new Vector2D();\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @memberof Proton#Proton.Collision\n\t * @method applyBehaviour\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} \t\t\ttime the integrate time 1/ms\n\t * @param {Int} \t\t\tindex the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tconst newPool = this.emitter ? this.emitter.particles.slice(index) : this.pool.slice(index);\n\t\tconst length = newPool.length;\n\n\t\tlet otherParticle;\n\t\tlet lengthSq;\n\t\tlet overlap;\n\t\tlet totalMass;\n\t\tlet averageMass1, averageMass2;\n\t\tlet i;\n\n\t\tfor (i = 0; i < length; i++) {\n\t\t\totherParticle = newPool[i];\n\n\t\t\tif (otherParticle !== particle) {\n\t\t\t\tthis.delta.copy(otherParticle.p);\n\t\t\t\tthis.delta.sub(particle.p);\n\n\t\t\t\tlengthSq = this.delta.lengthSq();\n\t\t\t\tconst distance = particle.radius + otherParticle.radius;\n\n\t\t\t\tif (lengthSq <= distance * distance) {\n\t\t\t\t\toverlap = distance - Math.sqrt(lengthSq);\n\t\t\t\t\toverlap += 0.5;\n\n\t\t\t\t\ttotalMass = particle.mass + otherParticle.mass;\n\t\t\t\t\taverageMass1 = this.mass ? otherParticle.mass / totalMass : 0.5;\n\t\t\t\t\taverageMass2 = this.mass ? particle.mass / totalMass : 0.5;\n\n\t\t\t\t\tparticle.p.add(this.delta.clone().normalize().multiplyScalar(overlap * -averageMass1));\n\t\t\t\t\totherParticle.p.add(this.delta.normalize().multiplyScalar(overlap * averageMass2));\n\n\t\t\t\t\tthis.callback && this.callback(particle, otherParticle);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}","import Util from '../utils/Util';\nimport Behaviour from './Behaviour';\n\nexport default class CrossZone extends Behaviour {\n\n    /**\n     * Defines what happens if the particles come to the end of the specified zone\n     *\n     * @memberof! Proton#\n     * @augments Proton.Behaviour\n     * @constructor\n     * @alias Proton.CrossZone\n     *\n     * @param {Proton.Zone} zone \t\t\t\t\t\tcan be any Proton.Zone - e.g. Proton.RectZone()\n     * @param {String} \t\t[crossType=dead] \t\t\twhat happens if the particles pass the zone - allowed strings: dead | bound | cross\n     * @param {Number} \t\t[life=Infinity] \t\t\tthis behaviour's life\n     * @param {String} \t\t[easing=ease.easeLinear] \tthis behaviour's easing\n     *\n     * @property {String} name The Behaviour name\n     */\n    constructor(zone, crossType, life, easing) {\n        super(life, easing);\n\n        this.reset(zone, crossType);\n        this.name = 'CrossZone';\n    }\n\n    /**\n     * Reset this behaviour's parameters\n     *\n     * @method reset\n     * @memberof Proton#Proton.CrossZone\n     * @instance\n     *\n     * @param {Proton.Zone} zone \t\t\t\tcan be any Proton.Zone - e.g. Proton.RectZone()\n     * @param {String} \t\t[crossType=dead] \twhat happens if the particles pass the zone - allowed strings: dead | bound | cross\n     * @param {Number} \t\t[life=Infinity] \tthis behaviour's life\n     * @param {String} \t\t[easing=easeLinear]\tthis behaviour's easing\n     */\n    reset(zone, crossType, life, easing) {\n        this.zone = zone;\n        this.zone.crossType = Util.initValue(crossType, 'dead');\n\n        life && super.reset(life, easing);\n    }\n\n    /**\n     * Apply this behaviour for all particles every time\n     *\n     * @method applyBehaviour\n     * @memberof Proton#Proton.CrossZone\n     * @instance\n     *\n     * @param {Proton.Particle} particle\n     * @param {Number} the integrate time 1/ms\n     * @param {Int} the particle index\n     */\n    applyBehaviour(particle, time, index) {\n        this.calculate(particle, time, index);\n        this.zone.crossing(particle);\n    };\n}","import Util from \"../utils/Util\";\nimport Span from \"../math/Span\";\nimport Behaviour from \"./Behaviour\";\n\nexport default class Alpha extends Behaviour {\n  /**\n   * @memberof! Proton#\n   * @augments Proton.Behaviour\n   * @constructor\n   * @alias Proton.Alpha\n   *\n   * @todo add description for 'a' and 'b'\n   *\n   * @param {Number} a\n   * @param {String} b\n   * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   *\n   * @property {String} name The Behaviour name\n   */\n  constructor(a, b, life, easing) {\n    super(life, easing);\n\n    this.reset(a, b);\n    this.name = \"Alpha\";\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#Proton.Alpha\n   * @instance\n   *\n   * @todo add description for 'a' and 'b'\n   *\n   * @param {Number} a\n   * @param {String} b\n   * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   */\n  reset(a, b, life, easing) {\n    this.same = b === null || b === undefined ? true : false;\n    this.a = Span.setSpanValue(Util.initValue(a, 1));\n    this.b = Span.setSpanValue(b);\n\n    life && super.reset(life, easing);\n  }\n\n  /**\n   * Sets the new alpha value of the particle\n   *\n   * @method initialize\n   * @memberof Proton#Proton.Alpha\n   * @instance\n   *\n   * @param {Proton.Particle} particle A single Proton generated particle\n   */\n  initialize(particle) {\n    particle.data.alphaA = this.a.getValue();\n\n    if (this.same) particle.data.alphaB = particle.data.alphaA;\n    else particle.data.alphaB = this.b.getValue();\n  }\n\n  /**\n   * @method applyBehaviour\n   * @memberof Proton#Proton.Alpha\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} \t\t\ttime the integrate time 1/ms\n   * @param {Int} \t\t\tindex the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    this.calculate(particle, time, index);\n\n    particle.alpha =\n      particle.data.alphaB +\n      (particle.data.alphaA - particle.data.alphaB) * this.energy;\n\n    if (particle.alpha < 0.001) particle.alpha = 0;\n  }\n}\n","import Span from \"../math/Span\";\nimport Util from '../utils/Util';\nimport Behaviour from './Behaviour';\n\nexport default class Scale extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Scale\n\t *\n\t * @todo add description for 'a' and 'b'\n\t *\n\t * @param {Number} a\n\t * @param {String} b\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(a, b, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.reset(a, b);\n\t\tthis.name = 'Scale';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Scale\n\t * @instance\n\t *\n\t * @param {Number} a\n\t * @param {String} b\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(a, b, life, easing) {\n\t\tthis.same = b === null || b === undefined ? true : false;\n\t\tthis.a = Span.setSpanValue(Util.initValue(a, 1));\n\t\tthis.b = Span.setSpanValue(b);\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Initialize the behaviour's parameters for all particles\n\t *\n\t * @method initialize\n\t * @memberof Proton#Proton.Scale\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t */\n\tinitialize(particle) {\n\t\tparticle.data.scaleA = this.a.getValue();\n\t\tparticle.data.oldRadius = particle.radius;\n\t\tparticle.data.scaleB = this.same ? particle.data.scaleA : this.b.getValue();\n\t};\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#Proton.Scale\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} \t\t\ttime the integrate time 1/ms\n\t * @param {Int} \t\t\tindex the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.calculate(particle, time, index);\n\t\tparticle.scale = particle.data.scaleB + (particle.data.scaleA - particle.data.scaleB) * this.energy;\n\n\t\tif (particle.scale < 0.0001) particle.scale = 0;\n\t\tparticle.radius = particle.data.oldRadius * particle.scale;\n\t}\n}","import Span from \"../math/Span\";\nimport Util from '../utils/Util';\nimport Behaviour from './Behaviour';\n\nexport default class Rotate extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Rotate\n\t *\n\t * @todo add description for 'a', 'b' and 'style'\n\t *\n\t * @param {String} [influence=Velocity] The rotation's influence\n\t * @param {String} b\n\t * @param {String} [style=to]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(influence, b, style, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.reset(influence, b, style);\n\t\tthis.name = 'Rotate';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Rotate\n\t * @instance\n\t *\n\t * @todo add description for 'a', 'b' and 'style'\n\t *\n\t * @param {String} a\n\t * @param {String} b\n\t * @param {String} [style=to]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(a, b, style, life, easing) {\n\t\tthis.same = b === null || b === undefined ? true : false;\n\n\t\tthis.a = Span.setSpanValue(Util.initValue(a, 'Velocity'));\n\t\tthis.b = Span.setSpanValue(Util.initValue(b, 0));\n\t\tthis.style = Util.initValue(style, 'to');\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Initialize the behaviour's parameters for all particles\n\t *\n\t * @method initialize\n\t * @memberof Proton#Proton.Rotate\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t */\n\tinitialize(particle) {\n\t\tparticle.rotation = this.a.getValue();\n\t\tparticle.data.rotationA = this.a.getValue();\n\n\t\tif (!this.same) particle.data.rotationB = this.b.getValue();\n\t};\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#Proton.Rotate\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} \t\t\ttime the integrate time 1/ms\n\t * @param {Int} \t\t\tindex the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.calculate(particle, time, index);\n\n\t\tif (!this.same) {\n\t\t\tif (this.style === 'to' || this.style === 'TO' || this.style === '_') {\n\t\t\t\tparticle.rotation += particle.data.rotationB + (particle.data.rotationA - particle.data.rotationB) * this.energy\n\t\t\t} else {\n\t\t\t\tparticle.rotation += particle.data.rotationB;\n\t\t\t}\n\t\t} else if (this.a.a === 'V' || this.a.a === 'Velocity' || this.a.a === 'v') {\n\t\t\t// beta...\n\t\t\tparticle.rotation = particle.getDirection();\n\t\t}\n\t}\n\n}\n","import ColorUtil from \"../utils/ColorUtil\";\nimport ArraySpan from \"../math/ArraySpan\";\nimport Behaviour from \"./Behaviour\";\n\nexport default class Color extends Behaviour {\n  /**\n   * @memberof! Proton#\n   * @augments Proton.Behaviour\n   * @constructor\n   * @alias Proton.Color\n   *\n   * @param {Proton.ArraySpan | String} a the string should be a hex e.g. #000000 for black\n   * @param {Proton.ArraySpan | String} b the string should be a hex e.g. #000000 for black\n   * @param {Number} [life=Infinity] \tthis behaviour's life\n   * @param {String} [easing=easeLinear] \tthis behaviour's easing\n   *\n   * @property {String} name The Behaviour name\n   */\n  constructor(a, b, life, easing) {\n    super(life, easing);\n\n    this.reset(a, b);\n    this.name = \"Color\";\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#Proton.Color\n   * @instance\n   *\n   * @param {Proton.ArraySpan | String} a the string should be a hex e.g. #000000 for black\n   * @param {Proton.ArraySpan | String} b the string should be a hex e.g. #000000 for black\n   * @param {Number} [life=Infinity] \tthis behaviour's life\n   * @param {String} [easing=easeLinear] \tthis behaviour's easing\n   */\n  reset(a, b, life, easing) {\n    this.a = ArraySpan.createArraySpan(a);\n    this.b = ArraySpan.createArraySpan(b);\n    life && super.reset(life, easing);\n  }\n\n  /**\n   * Initialize the behaviour's parameters for all particles\n   *\n   * @method initialize\n   * @memberof Proton#Proton.Color\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   */\n  initialize(particle) {\n    particle.color = this.a.getValue();\n    particle.data.colorA = ColorUtil.hexToRgb(particle.color);\n\n    if (this.b) particle.data.colorB = ColorUtil.hexToRgb(this.b.getValue());\n  }\n\n  /**\n   * Apply this behaviour for all particles every time\n   *\n   * @method applyBehaviour\n   * @memberof Proton#Proton.Color\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} the integrate time 1/ms\n   * @param {Int} the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    if (this.b) {\n      this.calculate(particle, time, index);\n\n      particle.rgb.r =\n        particle.data.colorB.r +\n        (particle.data.colorA.r - particle.data.colorB.r) * this.energy;\n      particle.rgb.g =\n        particle.data.colorB.g +\n        (particle.data.colorA.g - particle.data.colorB.g) * this.energy;\n      particle.rgb.b =\n        particle.data.colorB.b +\n        (particle.data.colorA.b - particle.data.colorB.b) * this.energy;\n\n      particle.rgb.r = Math.floor(particle.rgb.r);\n      particle.rgb.g = Math.floor(particle.rgb.g);\n      particle.rgb.b = Math.floor(particle.rgb.b);\n    } else {\n      particle.rgb.r = particle.data.colorA.r;\n      particle.rgb.g = particle.data.colorA.g;\n      particle.rgb.b = particle.data.colorA.b;\n    }\n  }\n}\n","import MathUtil from \"../math/MathUtil\";\nimport Vector2D from \"../math/Vector2D\";\nimport Span from \"../math/Span\";\nimport Behaviour from \"./Behaviour\";\n\nconst CHANGING = \"changing\";\n\nexport default class Cyclone extends Behaviour {\n  /**\n   * @memberof! Proton#\n   * @augments Proton.Behaviour\n   * @constructor\n   * @alias Proton.Cyclone\n   *\n   * @param {Number} angle\n   * @param {Number} force\n   * @param {Number} [life=Infinity] \t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   *\n   * @property {String} name The Behaviour name\n   */\n  constructor(angle, force, life, easing) {\n    super(life, easing);\n    this.setAngleAndForce(angle, force);\n    this.name = \"Cyclone\";\n  }\n\n  setAngleAndForce(angle, force) {\n    this.force = CHANGING;\n    this.angle = MathUtil.PI / 2;\n\n    if (angle === \"right\") {\n      this.angle = MathUtil.PI / 2;\n    } else if (angle === \"left\") {\n      this.angle = -MathUtil.PI / 2;\n    } else if (angle === \"random\") {\n      this.angle = \"random\";\n    } else if (angle instanceof Span) {\n      this.angle = \"span\";\n      this.span = angle;\n    } else if (angle) {\n      this.angle = angle;\n    }\n\n    if (\n      String(force).toLowerCase() === \"changing\" ||\n      String(force).toLowerCase() === \"chang\" ||\n      String(force).toLowerCase() === \"auto\"\n    ) {\n      this.force = CHANGING;\n    } else if (force) {\n      this.force = force;\n    }\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#Proton.Cyclone\n   * @instance\n   *\n   * @param {Number} angle\n   * @param {Number} force\n   * @param {Number} [life=Infinity] \t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   */\n  reset(angle, force, life, easing) {\n    this.angle = MathUtil.PI / 2;\n    this.setAngleAndForce(angle, force);\n    life && super.reset(life, easing);\n  }\n\n  initialize(particle) {\n    if (this.angle === \"random\") {\n      particle.data.cangle = MathUtil.randomAToB(-MathUtil.PI, MathUtil.PI);\n    } else if (this.angle === \"span\") {\n      particle.data.cangle = this.span.getValue();\n    }\n\n    particle.data.cyclone = new Vector2D(0, 0);\n  }\n\n  /**\n   * Apply this behaviour for all particles every time\n   *\n   * @method applyBehaviour\n   * @memberof Proton#Proton.Cyclone\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} the integrate time 1/ms\n   * @param {Int} the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    this.calculate(particle, time, index);\n\n    let length;\n    let gradient = particle.v.getGradient();\n    if (this.angle === \"random\" || this.angle === \"span\") {\n      gradient += particle.data.cangle;\n    } else {\n      gradient += this.angle;\n    }\n\n    if (this.force === CHANGING) {\n      length = particle.v.length() / 100;\n    } else {\n      length = this.force;\n    }\n\n    particle.data.cyclone.x = length * Math.cos(gradient);\n    particle.data.cyclone.y = length * Math.sin(gradient);\n    particle.data.cyclone = this.normalizeForce(particle.data.cyclone);\n    particle.a.add(particle.data.cyclone);\n  }\n}\n","import Attraction from './Attraction';\n\nexport default class Repulsion extends Attraction {\n\n\t/**\n\t * The oppisite of Proton.Attraction - turns the force\n\t *\n\t * @memberof! Proton#\n\t * @augments Proton#Proton.Attraction\n\t * @constructor\n\t * @alias Proton.Repulsion\n\t *\n\t * @todo add description for 'force' and 'radius'\n\t *\n\t * @param {Proton.Vector2D} targetPosition the attraction point coordinates\n\t * @param {Number} [force=100]\n\t * @param {Number} [radius=1000]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {Number} force\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(targetPosition, force, radius, life, easing) {\n\t\tsuper(targetPosition, force, radius, life, easing);\n\n\t\tthis.force *= -1;\n\t\tthis.name = 'Repulsion';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Repulsion\n\t * @instance\n\t *\n\t * @todo add description for 'force' and 'radius'\n\t *\n\t * @param {Proton.Vector2D} targetPosition the attraction point coordinates\n\t * @param {Number} [force=100]\n\t * @param {Number} [radius=1000]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(targetPosition, force, radius, life, easing) {\n\t\tsuper.reset(targetPosition, force, radius, life, easing);\n\t\tthis.force *= -1;\n\t}\n}\n","import Util from '../utils/Util';\nimport Vector2D from '../math/Vector2D';\nimport Behaviour from './Behaviour';\n\nexport default class GravityWell extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Behaviour\n\t * @constructor\n\t * @alias GravityWell\n\t *\n\t * @param {Vector2D} [centerPoint=new Vector2D] The point in the center\n\t * @param {Number} [force=100]\t\t\t\t\tThe force\n\t * @param {Number} [life=Infinity]\t\t\t\tthis behaviour's life\n\t * @param {String} [easing=easeLinear]\tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(centerPoint, force, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.distanceVec = new Vector2D();\n\t\tthis.centerPoint = Util.initValue(centerPoint, new Vector2D);\n\t\tthis.force = Util.initValue(this.normalizeValue(force), 100);\n\n\t\tthis.name = 'GravityWell';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#GravityWell\n\t * @instance\n\t *\n\t * @param {Vector2D} [centerPoint=new Vector2D] The point in the center\n\t * @param {Number} [force=100]\t\t\t\t\tThe force\n\t * @param {Number} [life=Infinity]\t\t\t\tthis behaviour's life\n\t * @param {String} [easing=easeLinear]\tthis behaviour's easing\n\t */\n\treset(centerPoint, force, life, easing) {\n\t\tthis.distanceVec = new Vector2D();\n\t\tthis.centerPoint = Util.initValue(centerPoint, new Vector2D);\n\t\tthis.force = Util.initValue(this.normalizeValue(force), 100);\n\n\t\tlife && super.reset(life, easing);\n\t};\n\n\t/**\n\t * @inheritdoc\n\t */\n\tinitialize(particle) {\n\t};\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#GravityWell\n\t * @instance\n\t *\n\t * @param {Particle} particle\n\t * @param {Number} the integrate time 1/ms\n\t * @param {Int} the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.distanceVec.set(this.centerPoint.x - particle.p.x, this.centerPoint.y - particle.p.y);\n\t\tconst distanceSq = this.distanceVec.lengthSq();\n\n\t\tif (distanceSq !== 0) {\n\t\t\tconst distance = this.distanceVec.length();\n\t\t\tconst factor = (this.force * time) / (distanceSq * distance);\n\n\t\t\tparticle.v.x += factor * this.distanceVec.x;\n\t\t\tparticle.v.y += factor * this.distanceVec.y;\n\t\t}\n\t}\n}","import Util from \"../utils/Util\";\nimport Initialize from \"./Initialize\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default {\n  initialize(emitter, particle, initializes) {\n    const length = initializes.length;\n    let i;\n\n    for (i = 0; i < length; i++) {\n      if (initializes[i] instanceof Initialize) {\n        initializes[i].init(emitter, particle);\n      } else {\n        this.init(emitter, particle, initializes[i]);\n      }\n    }\n\n    this.bindEmitter(emitter, particle);\n  },\n\n  // init\n  init(emitter, particle, initialize) {\n    Util.setProp(particle, initialize);\n    Util.setVectorVal(particle, initialize);\n  },\n\n  bindEmitter(emitter, particle) {\n    if (emitter.bindEmitter) {\n      particle.p.add(emitter.p);\n      particle.v.add(emitter.v);\n      particle.a.add(emitter.a);\n\n      particle.v.rotate(MathUtil.degreeTransform(emitter.rotation));\n    }\n  }\n};\n","import Util from \"../utils/Util\";\nimport Puid from \"../utils/Puid\";\nimport Particle from \"../core/Particle\";\nimport EventDispatcher from \"../events/EventDispatcher\";\n\nimport Rate from \"../initialize/Rate\";\nimport InitializeUtil from \"../initialize/InitializeUtil\";\n\nexport default class Emitter extends Particle {\n  /**\n   * You can use this emit particles.\n   *\n   * It will dispatch follow events:\n   * PARTICLE_CREATED\n   * PARTICLE_UPDATA\n   * PARTICLE_DEAD\n   *\n   * @class Emitter\n   * @constructor\n   * @param {Object} conf the parameters object;\n   * for example {damping:0.01,bindEmitter:false}\n   */\n  constructor(conf = {}) {\n    super(conf);\n\n    this.particles = [];\n    this.behaviours = [];\n    this.initializes = [];\n\n    this.emitTime = 0;\n    this.emitSpeed = 0;\n    this.totalTime = -1;\n\n    /**\n     * The friction coefficient for all particle emit by This;\n     * @property damping\n     * @type {Number}\n     * @default 0.006\n     */\n    this.damping = 0.006;\n\n    /**\n     * If bindEmitter the particles can bind this emitter's property;\n     * @property bindEmitter\n     * @type {Boolean}\n     * @default true\n     */\n    this.bindEmitter = true;\n\n    /**\n     * The number of particles per second emit (a [particle]/b [s]);\n     * @property rate\n     * @type {Rate}\n     * @default Rate(1, .1)\n     */\n    this.rate = new Rate(1, 0.1);\n\n    this.name = \"Emitter\";\n    this.id = Puid.id(this.name);\n  }\n\n  /**\n   * start emit particle\n   * @method emit\n   * @param {Number} emitTime begin emit time;\n   * @param {String} life the life of this emitter\n   */\n  emit(totalTime, life) {\n    this.stoped = false;\n    this.emitTime = 0;\n    this.totalTime = Util.initValue(totalTime, Infinity);\n\n    if (life === true || life === \"life\" || life === \"destroy\") {\n      this.life = totalTime === \"once\" ? 1 : this.totalTime;\n    } else if (!isNaN(life)) {\n      this.life = life;\n    }\n\n    this.rate.init();\n  }\n\n  /**\n   * stop emiting\n   * @method stop\n   */\n  stop() {\n    this.totalTime = -1;\n    this.emitTime = 0;\n    this.stoped = true;\n  }\n\n  preEmit(time) {\n    let oldStoped = this.stoped;\n    let oldEmitTime = this.emitTime;\n    let oldTotalTime = this.totalTime;\n\n    this.stoped = false;\n    this.emitTime = 0;\n    this.totalTime = time;\n    this.rate.init();\n\n    const step = 0.0167;\n    while (time > step) {\n      time -= step;\n      this.update(step);\n    }\n\n    this.stoped = oldStoped;\n    this.emitTime = oldEmitTime + Math.max(time, 0);\n    this.totalTime = oldTotalTime;\n  }\n\n  /**\n   * remove current all particles\n   * @method removeAllParticles\n   */\n  removeAllParticles() {\n    let i = this.particles.length;\n    while (i--) this.particles[i].dead = true;\n  }\n\n  /**\n   * add initialize to this emitter\n   * @method addSelfInitialize\n   */\n  addSelfInitialize(initialize) {\n    if (initialize[\"init\"]) {\n      initialize.init(this);\n    } else {\n      this.initAll();\n    }\n  }\n\n  /**\n   * add the Initialize to particles;\n   *\n   * you can use initializes array:for example emitter.addInitialize(initialize1,initialize2,initialize3);\n   * @method addInitialize\n   * @param {Initialize} initialize like this new Radius(1, 12)\n   */\n  addInitialize(...rest) {\n    let i = rest.length;\n    while (i--) this.initializes.push(rest[i]);\n  }\n\n  /**\n   * remove the Initialize\n   * @method removeInitialize\n   * @param {Initialize} initialize a initialize\n   */\n  removeInitialize(initializer) {\n    const index = this.initializes.indexOf(initializer);\n    if (index > -1) this.initializes.splice(index, 1);\n  }\n\n  /**\n   * remove all Initializes\n   * @method removeInitializers\n   */\n  removeAllInitializers() {\n    Util.emptyArray(this.initializes);\n  }\n\n  /**\n   * add the Behaviour to particles;\n   *\n   * you can use Behaviours array:emitter.addBehaviour(Behaviour1,Behaviour2,Behaviour3);\n   * @method addBehaviour\n   * @param {Behaviour} behaviour like this new Color('random')\n   */\n  addBehaviour(...rest) {\n    let i = arguments.length;\n    while (i--) {\n      let behaviour = rest[i];\n      this.behaviours.push(behaviour);\n      if (behaviour.parents) behaviour.parents.push(this);\n    }\n  }\n\n  /**\n   * remove the Behaviour\n   * @method removeBehaviour\n   * @param {Behaviour} behaviour a behaviour\n   */\n  removeBehaviour(behaviour) {\n    let index = this.behaviours.indexOf(behaviour);\n    this.behaviours.splice(index, 1);\n\n    if (behaviour.parents) {\n      index = behaviour.parents.indexOf(behaviour);\n      behaviour.parents.splice(index, 1);\n    }\n\n    return index;\n  }\n\n  /**\n   * remove all behaviours\n   * @method removeAllBehaviours\n   */\n  removeAllBehaviours() {\n    Util.emptyArray(this.behaviours);\n  }\n\n  // emitter update\n  update(time) {\n    this.age += time;\n    if (this.age >= this.life || this.dead) this.destroy();\n\n    this.emitting(time);\n    this.integrate(time);\n  }\n\n  integrate(time) {\n    if (!this.parent) return;\n\n    const damping = 1 - this.damping;\n    this.parent.integrator.calculate(this, time, damping);\n\n    const length = this.particles.length;\n    let i, particle;\n\n    for (i = length - 1; i >= 0; i--) {\n      particle = this.particles[i];\n\n      // particle update\n      particle.update(time, i);\n      this.parent.integrator.calculate(particle, time, damping);\n      this.dispatch(\"PARTICLE_UPDATE\", particle);\n\n      // check dead\n      if (particle.dead) {\n        this.dispatch(\"PARTICLE_DEAD\", particle);\n\n        this.parent.pool.expire(particle);\n        this.particles.splice(i, 1);\n      }\n    }\n  }\n\n  dispatch(event, target) {\n    this.parent && this.parent.dispatchEvent(event, target);\n    this.bindEvent && this.dispatchEvent(event, target);\n  }\n\n  emitting(time) {\n    if (this.totalTime === \"once\") {\n      let i;\n      const length = this.rate.getValue(99999);\n\n      if (length > 0) this.emitSpeed = length;\n      for (i = 0; i < length; i++) this.createParticle();\n      this.totalTime = \"none\";\n    } else {\n      this.emitTime += time;\n\n      if (this.emitTime < this.totalTime) {\n        const length = this.rate.getValue(time);\n        let i;\n\n        if (length > 0) this.emitSpeed = length;\n        for (i = 0; i < length; i++) this.createParticle();\n      }\n    }\n  }\n\n  /**\n   * create single particle;\n   *\n   * can use emit({x:10},new Gravity(10),{'particleUpdate',fun}) or emit([{x:10},new Initialize],new Gravity(10),{'particleUpdate',fun})\n   * @method removeAllParticles\n   */\n  createParticle(initialize, behaviour) {\n    const particle = this.parent.pool.get(Particle);\n    this.setupParticle(particle, initialize, behaviour);\n    this.dispatch(\"PARTICLE_CREATED\", particle);\n\n    return particle;\n  }\n\n  setupParticle(particle, initialize, behaviour) {\n    let initializes = this.initializes;\n    let behaviours = this.behaviours;\n\n    if (initialize) initializes = Util.toArray(initialize);\n    if (behaviour) behaviours = Util.toArray(behaviour);\n\n    particle.reset();\n    InitializeUtil.initialize(this, particle, initializes);\n    particle.addBehaviours(behaviours);\n    particle.parent = this;\n\n    this.particles.push(particle);\n  }\n\n  remove() {\n    this.stop();\n    Util.destroyAll(this.particles);\n  }\n\n  /**\n   * Destory this Emitter\n   * @method destroy\n   */\n  destroy() {\n    this.dead = true;\n    this.remove();\n    this.removeAllInitializers();\n    this.removeAllBehaviours();\n    this.parent && this.parent.removeEmitter(this);\n  }\n}\n\nEventDispatcher.bind(Emitter);\n","import Emitter from \"./Emitter\";\n\nexport default class BehaviourEmitter extends Emitter {\n  /**\n   * The BehaviourEmitter class inherits from Proton.Emitter\n   *\n   * use the BehaviourEmitter you can add behaviours to self;\n   * @class Proton.BehaviourEmitter\n   * @constructor\n   * @param {Object} conf the parameters object;\n   */\n  constructor(conf) {\n    super(conf);\n\n    this.selfBehaviours = [];\n  }\n\n  /**\n   * add the Behaviour to emitter;\n   *\n   * you can use Behaviours array:emitter.addSelfBehaviour(Behaviour1,Behaviour2,Behaviour3);\n   * @method addSelfBehaviour\n   * @param {Proton.Behaviour} behaviour like this new Proton.Color('random')\n   */\n  addSelfBehaviour(...rest) {\n    let i,\n      length = rest.length;\n\n    for (i = 0; i < length; i++) {\n      let behaviour = rest[i];\n      this.selfBehaviours.push(behaviour);\n      behaviour.initialize(this);\n    }\n  }\n\n  /**\n   * remove the Behaviour for self\n   * @method removeSelfBehaviour\n   * @param {Proton.Behaviour} behaviour a behaviour\n   */\n  removeSelfBehaviour(behaviour) {\n    const index = this.selfBehaviours.indexOf(behaviour);\n    if (index > -1) this.selfBehaviours.splice(index, 1);\n  }\n\n  update(time) {\n    super.update(time);\n\n    if (!this.sleep) {\n      const length = this.selfBehaviours.length;\n      let i;\n\n      for (i = 0; i < length; i++) {\n        this.selfBehaviours[i].applyBehaviour(this, time, i);\n      }\n    }\n  }\n}\n","import Util from \"../utils/Util\";\nimport Emitter from \"./Emitter\";\n\nexport default class FollowEmitter extends Emitter {\n  /**\n   * The FollowEmitter class inherits from Proton.Emitter\n   *\n   * use the FollowEmitter will emit particle when mousemoving\n   *\n   * @class Proton.FollowEmitter\n   * @constructor\n   * @param {Element} mouseTarget mouseevent's target;\n   * @param {Number} ease the easing of following speed;\n   * @default 0.7\n   * @param {Object} conf the parameters object;\n   */\n  constructor(mouseTarget, ease, conf) {\n    super(conf);\n\n    this.mouseTarget = Util.initValue(mouseTarget, window);\n    this.ease = Util.initValue(ease, 0.7);\n\n    this._allowEmitting = false;\n    this.initEventHandler();\n  }\n\n  initEventHandler() {\n    this.mousemoveHandler = e => this.mousemove.call(this, e);\n    this.mousedownHandler = e => this.mousedown.call(this, e);\n    this.mouseupHandler = e => this.mouseup.call(this, e);\n\n    this.mouseTarget.addEventListener(\n      \"mousemove\",\n      this.mousemoveHandler,\n      false\n    );\n  }\n\n  /**\n   * start emit particle\n   * @method emit\n   */\n  emit() {\n    this._allowEmitting = true;\n  }\n\n  /**\n   * stop emiting\n   * @method stop\n   */\n  stop() {\n    this._allowEmitting = false;\n  }\n\n  mousemove(e) {\n    if (e.layerX || e.layerX === 0) {\n      this.p.x += (e.layerX - this.p.x) * this.ease;\n      this.p.y += (e.layerY - this.p.y) * this.ease;\n    } else if (e.offsetX || e.offsetX === 0) {\n      this.p.x += (e.offsetX - this.p.x) * this.ease;\n      this.p.y += (e.offsetY - this.p.y) * this.ease;\n    }\n\n    if (this._allowEmitting) super.emit(\"once\");\n  }\n\n  /**\n   * Destory this Emitter\n   * @method destroy\n   */\n  destroy() {\n    super.destroy();\n    this.mouseTarget.removeEventListener(\n      \"mousemove\",\n      this.mousemoveHandler,\n      false\n    );\n  }\n}\n","import Pool from \"../core/Pool\";\n\nexport default class BaseRenderer {\n    constructor(element, stroke) {\n        this.pool = new Pool();\n        this.element = element;\n        this.stroke = stroke;\n        this.circleConf = { isCircle: true };\n\n        this.initHandler();\n        this.name = \"BaseRenderer\";\n    }\n\n    setStroke(color = \"#000000\", thinkness = 1) {\n        this.stroke = { color, thinkness };\n    }\n\n    initHandler() {\n        this._protonUpdateHandler = () => {\n            this.onProtonUpdate.call(this);\n        };\n\n        this._protonUpdateAfterHandler = () => {\n            this.onProtonUpdateAfter.call(this);\n        };\n\n        this._emitterAddedHandler = emitter => {\n            this.onEmitterAdded.call(this, emitter);\n        };\n\n        this._emitterRemovedHandler = emitter => {\n            this.onEmitterRemoved.call(this, emitter);\n        };\n\n        this._particleCreatedHandler = particle => {\n            this.onParticleCreated.call(this, particle);\n        };\n\n        this._particleUpdateHandler = particle => {\n            this.onParticleUpdate.call(this, particle);\n        };\n\n        this._particleDeadHandler = particle => {\n            this.onParticleDead.call(this, particle);\n        };\n    }\n\n    init(proton) {\n        this.parent = proton;\n\n        proton.addEventListener(\"PROTON_UPDATE\", this._protonUpdateHandler);\n        proton.addEventListener(\n            \"PROTON_UPDATE_AFTER\",\n            this._protonUpdateAfterHandler\n        );\n\n        proton.addEventListener(\"EMITTER_ADDED\", this._emitterAddedHandler);\n        proton.addEventListener(\"EMITTER_REMOVED\", this._emitterRemovedHandler);\n\n        proton.addEventListener(\n            \"PARTICLE_CREATED\",\n            this._particleCreatedHandler\n        );\n        proton.addEventListener(\"PARTICLE_UPDATE\", this._particleUpdateHandler);\n        proton.addEventListener(\"PARTICLE_DEAD\", this._particleDeadHandler);\n    }\n\n    resize(width, height) {}\n\n    destroy() {\n        this.remove();\n    }\n\n    remove(proton) {\n        this.parent.removeEventListener(\n            \"PROTON_UPDATE\",\n            this._protonUpdateHandler\n        );\n        this.parent.removeEventListener(\n            \"PROTON_UPDATE_AFTER\",\n            this._protonUpdateAfterHandler\n        );\n\n        this.parent.removeEventListener(\n            \"EMITTER_ADDED\",\n            this._emitterAddedHandler\n        );\n        this.parent.removeEventListener(\n            \"EMITTER_REMOVED\",\n            this._emitterRemovedHandler\n        );\n\n        this.parent.removeEventListener(\n            \"PARTICLE_CREATED\",\n            this._particleCreatedHandler\n        );\n        this.parent.removeEventListener(\n            \"PARTICLE_UPDATE\",\n            this._particleUpdateHandler\n        );\n        this.parent.removeEventListener(\n            \"PARTICLE_DEAD\",\n            this._particleDeadHandler\n        );\n\n        this.parent = null;\n    }\n\n    onProtonUpdate() {}\n    onProtonUpdateAfter() {}\n\n    onEmitterAdded(emitter) {}\n    onEmitterRemoved(emitter) {}\n\n    onParticleCreated(particle) {}\n    onParticleUpdate(particle) {}\n    onParticleDead(particle) {}\n}\n","import ImgUtil from \"../utils/ImgUtil\";\nimport ColorUtil from \"../utils/ColorUtil\";\nimport MathUtil from \"../math/MathUtil\";\nimport BaseRenderer from \"./BaseRenderer\";\n\nexport default class CanvasRenderer extends BaseRenderer {\n    constructor(element) {\n        super(element);\n\n        this.stroke = null;\n        this.context = this.element.getContext(\"2d\");\n        this.bufferCache = {};\n        this.name = \"CanvasRenderer\";\n    }\n\n    resize(width, height) {\n        this.element.width = width;\n        this.element.height = height;\n    }\n\n    onProtonUpdate() {\n        this.context.clearRect(0, 0, this.element.width, this.element.height);\n    }\n\n    onParticleCreated(particle) {\n        if (particle.body) {\n            ImgUtil.getImgFromCache(particle.body, this.addImg2Body, particle);\n        } else {\n            particle.color = particle.color || \"#ff0000\";\n        }\n    }\n\n    onParticleUpdate(particle) {\n        if (particle.body) {\n            if (particle.body instanceof Image) this.drawImage(particle);\n        } else {\n            this.drawCircle(particle);\n        }\n    }\n\n    onParticleDead(particle) {\n        particle.body = null;\n    }\n\n    // private\n    addImg2Body(img, particle) {\n        particle.body = img;\n    }\n\n    // private drawCircle\n    drawImage(particle) {\n        const w = (particle.body.width * particle.scale) | 0;\n        const h = (particle.body.height * particle.scale) | 0;\n        const x = particle.p.x - w / 2;\n        const y = particle.p.y - h / 2;\n\n        if (!!particle.color) {\n            if (!particle.data[\"buffer\"])\n                particle.data.buffer = this.createBuffer(particle.body);\n\n            const bufContext = particle.data.buffer.getContext(\"2d\");\n            bufContext.clearRect(\n                0,\n                0,\n                particle.data.buffer.width,\n                particle.data.buffer.height\n            );\n            bufContext.globalAlpha = particle.alpha;\n            bufContext.drawImage(particle.body, 0, 0);\n\n            bufContext.globalCompositeOperation = \"source-atop\";\n            bufContext.fillStyle = ColorUtil.rgbToHex(particle.rgb);\n            bufContext.fillRect(\n                0,\n                0,\n                particle.data.buffer.width,\n                particle.data.buffer.height\n            );\n            bufContext.globalCompositeOperation = \"source-over\";\n            bufContext.globalAlpha = 1;\n\n            this.context.drawImage(\n                particle.data.buffer,\n                0,\n                0,\n                particle.data.buffer.width,\n                particle.data.buffer.height,\n                x,\n                y,\n                w,\n                h\n            );\n        } else {\n            this.context.save();\n\n            this.context.globalAlpha = particle.alpha;\n            this.context.translate(particle.p.x, particle.p.y);\n            this.context.rotate(MathUtil.degreeTransform(particle.rotation));\n            this.context.translate(-particle.p.x, -particle.p.y);\n            this.context.drawImage(\n                particle.body,\n                0,\n                0,\n                particle.body.width,\n                particle.body.height,\n                x,\n                y,\n                w,\n                h\n            );\n\n            this.context.globalAlpha = 1;\n            this.context.restore();\n        }\n    }\n\n    // private drawCircle --\n    drawCircle(particle) {\n        if (particle.rgb) {\n            this.context.fillStyle = `rgba(${particle.rgb.r},${particle.rgb.g},${particle.rgb.b},${particle.alpha})`;\n        } else {\n            this.context.fillStyle = particle.color;\n        }\n\n        // draw circle\n        this.context.beginPath();\n        this.context.arc(\n            particle.p.x,\n            particle.p.y,\n            particle.radius,\n            0,\n            Math.PI * 2,\n            true\n        );\n\n        if (this.stroke) {\n            this.context.strokeStyle = this.stroke.color;\n            this.context.lineWidth = this.stroke.thinkness;\n            this.context.stroke();\n        }\n\n        this.context.closePath();\n        this.context.fill();\n    }\n\n    // private createBuffer\n    createBuffer(image) {\n        if (image instanceof Image) {\n            const size = image.width + \"_\" + image.height;\n            let canvas = this.bufferCache[size];\n\n            if (!canvas) {\n                canvas = document.createElement(\"canvas\");\n                canvas.width = image.width;\n                canvas.height = image.height;\n                this.bufferCache[size] = canvas;\n            }\n\n            return canvas;\n        }\n    }\n}\n","import DomUtil from \"../utils/DomUtil\";\nimport ImgUtil from \"../utils/ImgUtil\";\nimport BaseRenderer from \"./BaseRenderer\";\n\nexport default class DomRenderer extends BaseRenderer {\n  constructor(element) {\n    super(element);\n\n    this.stroke = null;\n    this.pool.create = (body, particle) => this.createBody(body, particle);\n    this.addImg2Body = this.addImg2Body.bind(this);\n\n    this.transform3d = false;\n    this.name = \"DomRenderer\";\n  }\n\n  onParticleCreated(particle) {\n    if (particle.body) {\n      ImgUtil.getImgFromCache(particle.body, this.addImg2Body, particle);\n    } else {\n      particle.body = this.pool.get(this.circleConf, particle);\n      this.element.appendChild(particle.body);\n    }\n  }\n\n  onParticleUpdate(particle) {\n    if (this.bodyReady(particle)) {\n      if (this.transform3d)\n        DomUtil.transform3d(\n          particle.body,\n          particle.p.x,\n          particle.p.y,\n          particle.scale,\n          particle.rotation\n        );\n      else\n        DomUtil.transform(\n          particle.body,\n          particle.p.x,\n          particle.p.y,\n          particle.scale,\n          particle.rotation\n        );\n\n      particle.body.style.opacity = particle.alpha;\n      if (particle.body.isCircle) {\n        particle.body.style.backgroundColor = particle.color || \"#ff0000\";\n      }\n    }\n  }\n\n  onParticleDead(particle) {\n    if (this.bodyReady(particle)) {\n      this.element.removeChild(particle.body);\n      this.pool.expire(particle.body);\n      particle.body = null;\n    }\n  }\n\n  bodyReady(particle) {\n    return (\n      typeof particle.body === \"object\" &&\n      particle.body &&\n      !particle.body.isInner\n    );\n  }\n\n  // private\n  addImg2Body(img, particle) {\n    if (particle.dead) return;\n    particle.body = this.pool.get(img, particle);\n    DomUtil.resize(particle.body, img.width, img.height);\n\n    this.element.appendChild(particle.body);\n  }\n\n  createBody(body, particle) {\n    if (body.isCircle) return this.createCircle(particle);\n    else return this.createSprite(body, particle);\n  }\n\n  // private --\n  createCircle(particle) {\n    const dom = DomUtil.createDiv(\n      `${particle.id}_dom`,\n      2 * particle.radius,\n      2 * particle.radius\n    );\n    dom.style.borderRadius = `${particle.radius}px`;\n\n    if (this.stroke) {\n      dom.style.borderColor = this.stroke.color;\n      dom.style.borderWidth = `${this.stroke.thinkness}px`;\n    }\n    dom.isCircle = true;\n\n    return dom;\n  }\n\n  createSprite(body, particle) {\n    const url = typeof body === \"string\" ? body : body.src;\n    const dom = DomUtil.createDiv(\n      `${particle.id}_dom`,\n      body.width,\n      body.height\n    );\n    dom.style.backgroundImage = `url(${url})`;\n\n    return dom;\n  }\n}\n","import BaseRenderer from \"./BaseRenderer\";\n\nexport default class EaselRenderer extends BaseRenderer {\n  constructor(element, stroke) {\n    super(element);\n\n    this.stroke = stroke;\n    this.name = \"EaselRenderer\";\n  }\n\n  onParticleCreated(particle) {\n    if (particle.body) {\n      this.createSprite(particle);\n    } else {\n      this.createCircle(particle);\n    }\n\n    this.element.addChild(particle.body);\n  }\n\n  onParticleUpdate(particle) {\n    if (particle.body) {\n      particle.body.x = particle.p.x;\n      particle.body.y = particle.p.y;\n\n      particle.body.alpha = particle.alpha;\n      particle.body.scaleX = particle.body.scaleY = particle.scale;\n      particle.body.rotation = particle.rotation;\n    }\n  }\n\n  onParticleDead(particle) {\n    if (particle.body) {\n      particle.body.parent && particle.body.parent.removeChild(particle.body);\n      this.pool.expire(particle.body);\n      particle.body = null;\n    }\n\n    if (particle.graphics) this.pool.expire(particle.graphics);\n  }\n\n  // private\n  createSprite(particle) {\n    particle.body = this.pool.get(particle.body);\n\n    if (particle.body.parent) return;\n    if (particle.body[\"image\"]) {\n      particle.body.regX = particle.body.image.width / 2;\n      particle.body.regY = particle.body.image.height / 2;\n    }\n  }\n\n  createCircle(particle) {\n    const graphics = this.pool.get(createjs.Graphics);\n\n    if (this.stroke) {\n      if (this.stroke instanceof String) graphics.beginStroke(this.stroke);\n      else graphics.beginStroke(\"#000000\");\n    }\n    graphics\n      .beginFill(particle.color || \"#ff0000\")\n      .drawCircle(0, 0, particle.radius);\n\n    const shape = this.pool.get(createjs.Shape, [graphics]);\n\n    particle.body = shape;\n    particle.graphics = graphics;\n  }\n}\n","import Rectangle from \"../math/Rectangle\";\nimport BaseRenderer from \"./BaseRenderer\";\n\nexport default class PixelRenderer extends BaseRenderer {\n  constructor(element, rectangle) {\n    super(element);\n\n    this.context = this.element.getContext(\"2d\");\n    this.imageData = null;\n    this.rectangle = null;\n    this.rectangle = rectangle;\n    this.createImageData(rectangle);\n\n    this.name = \"PixelRenderer\";\n  }\n\n  resize(width, height) {\n    this.element.width = width;\n    this.element.height = height;\n  }\n\n  createImageData(rectangle) {\n    this.rectangle = rectangle\n      ? rectangle\n      : new Rectangle(0, 0, this.element.width, this.element.height);\n    this.imageData = this.context.createImageData(\n      this.rectangle.width,\n      this.rectangle.height\n    );\n    this.context.putImageData(\n      this.imageData,\n      this.rectangle.x,\n      this.rectangle.y\n    );\n  }\n\n  onProtonUpdate() {\n    this.context.clearRect(\n      this.rectangle.x,\n      this.rectangle.y,\n      this.rectangle.width,\n      this.rectangle.height\n    );\n    this.imageData = this.context.getImageData(\n      this.rectangle.x,\n      this.rectangle.y,\n      this.rectangle.width,\n      this.rectangle.height\n    );\n  }\n\n  onProtonUpdateAfter() {\n    this.context.putImageData(\n      this.imageData,\n      this.rectangle.x,\n      this.rectangle.y\n    );\n  }\n\n  onParticleCreated(particle) {}\n\n  onParticleUpdate(particle) {\n    if (this.imageData) {\n      this.setPixel(\n        this.imageData,\n        Math.floor(particle.p.x - this.rectangle.x),\n        Math.floor(particle.p.y - this.rectangle.y),\n        particle\n      );\n    }\n  }\n\n  setPixel(imagedata, x, y, particle) {\n    const rgb = particle.rgb;\n    if (x < 0 || x > this.element.width || y < 0 || y > this.elementwidth)\n      return;\n\n    const i = ((y >> 0) * imagedata.width + (x >> 0)) * 4;\n\n    imagedata.data[i] = rgb.r;\n    imagedata.data[i + 1] = rgb.g;\n    imagedata.data[i + 2] = rgb.b;\n    imagedata.data[i + 3] = particle.alpha * 255;\n  }\n\n  onParticleDead(particle) {}\n}\n","import ColorUtil from \"../utils/ColorUtil\";\nimport MathUtil from \"../math/MathUtil\";\nimport BaseRenderer from \"./BaseRenderer\";\n\nlet PIXIClass;\nexport default class PixiRenderer extends BaseRenderer {\n  constructor(element, stroke) {\n    super(element);\n\n    this.stroke = stroke;\n    this.color = false;\n    this.setColor = false;\n    this.blendMode = null;\n    this.pool.create = (body, particle) => this.createBody(body, particle);\n    this.setPIXI(window.PIXI);\n\n    this.name = \"PixiRenderer\";\n  }\n\n  setPIXI(PIXI) {\n    try {\n      PIXIClass = PIXI || { Sprite: {} };\n      this.createFromImage =\n        PIXIClass.Sprite.from || PIXIClass.Sprite.fromImage;\n    } catch (e) {}\n  }\n\n  onProtonUpdate() {}\n\n  /**\n   * @param particle\n   */\n  onParticleCreated(particle) {\n    if (particle.body) {\n      particle.body = this.pool.get(particle.body, particle);\n    } else {\n      particle.body = this.pool.get(this.circleConf, particle);\n    }\n\n    if (this.blendMode) {\n      particle.body.blendMode = this.blendMode;\n    }\n\n    this.element.addChild(particle.body);\n  }\n\n  /**\n   * @param particle\n   */\n  onParticleUpdate(particle) {\n    this.transform(particle, particle.body);\n\n    if (this.setColor === true || this.color === true) {\n      particle.body.tint = ColorUtil.getHex16FromParticle(particle);\n    }\n  }\n\n  /**\n   * @param particle\n   */\n  onParticleDead(particle) {\n    this.element.removeChild(particle.body);\n    this.pool.expire(particle.body);\n    particle.body = null;\n  }\n\n  destroy(particles) {\n    super.destroy();\n    this.pool.destroy();\n\n    let i = particles.length;\n    while (i--) {\n      let particle = particles[i];\n      if (particle.body) {\n        this.element.removeChild(particle.body);\n      }\n    }\n  }\n\n  transform(particle, target) {\n    target.x = particle.p.x;\n    target.y = particle.p.y;\n\n    target.alpha = particle.alpha;\n\n    target.scale.x = particle.scale;\n    target.scale.y = particle.scale;\n\n    // using cached version of MathUtil.PI_180 for slight performance increase.\n    target.rotation = particle.rotation * MathUtil.PI_180; // MathUtil.PI_180;\n  }\n\n  createBody(body, particle) {\n    if (body.isCircle) return this.createCircle(particle);\n    else return this.createSprite(body);\n  }\n\n  createSprite(body) {\n    const sprite = body.isInner\n      ? this.createFromImage(body.src)\n      : new PIXIClass.Sprite(body);\n\n    sprite.anchor.x = 0.5;\n    sprite.anchor.y = 0.5;\n\n    return sprite;\n  }\n\n  createCircle(particle) {\n    const graphics = new PIXIClass.Graphics();\n\n    if (this.stroke) {\n      const stroke = this.stroke instanceof String ? this.stroke : 0x000000;\n      graphics.beginStroke(stroke);\n    }\n\n    graphics.beginFill(particle.color || 0x008ced);\n    graphics.drawCircle(0, 0, particle.radius);\n    graphics.endFill();\n\n    return graphics;\n  }\n}\n","import Mat3 from \"../math/Mat3\";\n\nexport default class MStack {\n  constructor() {\n    this.mats = [];\n    this.size = 0;\n\n    for (let i = 0; i < 20; i++)\n      this.mats.push(Mat3.create([0, 0, 0, 0, 0, 0, 0, 0, 0]));\n  }\n\n  set(m, i) {\n    if (i === 0) Mat3.set(m, this.mats[0]);\n    else Mat3.multiply(this.mats[i - 1], m, this.mats[i]);\n\n    this.size = Math.max(this.size, i + 1);\n  }\n\n  push(m) {\n    if (this.size === 0) Mat3.set(m, this.mats[0]);\n    else Mat3.multiply(this.mats[this.size - 1], m, this.mats[this.size]);\n\n    this.size++;\n  }\n\n  pop() {\n    if (this.size > 0) this.size--;\n  }\n\n  top() {\n    return this.mats[this.size - 1];\n  }\n}\n","import Mat3 from '../math/Mat3';\nimport BaseRenderer from './BaseRenderer';\n\nimport Util from '../utils/Util';\nimport ImgUtil from '../utils/ImgUtil';\nimport MStack from '../utils/MStack';\nimport DomUtil from '../utils/DomUtil';\nimport WebGLUtil from '../utils/WebGLUtil';\nimport MathUtil from '../math/MathUtil';\n\nexport default class WebGLRenderer extends BaseRenderer {\n\n    constructor(element) {\n        super(element);\n\n        this.gl = this.element.getContext('experimental-webgl', { antialias: true, stencil: false, depth: false });\n        if (!this.gl) alert('Sorry your browser do not suppest WebGL!');\n\n        this.initVar();\n        this.setMaxRadius();\n        this.initShaders();\n        this.initBuffers();\n\n        this.gl.blendEquation(this.gl.FUNC_ADD);\n        this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n        this.gl.enable(this.gl.BLEND);\n\n        this.addImg2Body = this.addImg2Body.bind(this);\n\n        this.name = 'WebGLRenderer';\n    }\n\n    init(proton) {\n        super.init(proton);\n        this.resize(this.element.width, this.element.height);\n    }\n\n    resize(width, height) {\n        this.umat[4] = -2;\n        this.umat[7] = 1;\n\n        this.smat[0] = 1 / width;\n        this.smat[4] = 1 / height;\n\n        this.mstack.set(this.umat, 0);\n        this.mstack.set(this.smat, 1);\n\n        this.gl.viewport(0, 0, width, height);\n        this.element.width = width;\n        this.element.height = height;\n    }\n\n    setMaxRadius(radius) {\n        this.circleCanvasURL = this.createCircle(radius);\n    }\n\n    getVertexShader() {\n        const vsSource = ['uniform vec2 viewport;', 'attribute vec2 aVertexPosition;', 'attribute vec2 aTextureCoord;', 'uniform mat3 tMat;', 'varying vec2 vTextureCoord;', 'varying float alpha;', 'void main() {', 'vec3 v = tMat * vec3(aVertexPosition, 1.0);', 'gl_Position = vec4(v.x, v.y, 0, 1);', 'vTextureCoord = aTextureCoord;', 'alpha = tMat[0][2];', '}'].join('\\n');\n        return vsSource;\n    }\n\n    getFragmentShader() {\n        const fsSource = ['precision mediump float;', 'varying vec2 vTextureCoord;', 'varying float alpha;', 'uniform sampler2D uSampler;', 'uniform vec4 color;', 'uniform bool useTexture;', 'uniform vec3 uColor;', 'void main() {', 'vec4 textureColor = texture2D(uSampler, vTextureCoord);', 'gl_FragColor = textureColor * vec4(uColor, 1.0);', 'gl_FragColor.w *= alpha;', '}'].join('\\n');\n        return fsSource;\n    }\n\n    initVar() {\n        this.mstack = new MStack();\n        this.umat = Mat3.create([2, 0, 1, 0, -2, 0, -1, 1, 1]);\n        this.smat = Mat3.create([1 / 100, 0, 1, 0, 1 / 100, 0, 0, 0, 1]);\n        this.texturebuffers = {};\n    }\n\n    blendEquation(A) {\n        this.gl.blendEquation(this.gl[A]);\n    }\n\n    blendFunc(A, B) {\n        this.gl.blendFunc(this.gl[A], this.gl[B]);\n    }\n\n    getShader(gl, str, fs) {\n        const shader = fs ? gl.createShader(gl.FRAGMENT_SHADER) : gl.createShader(gl.VERTEX_SHADER);\n\n        gl.shaderSource(shader, str);\n        gl.compileShader(shader);\n\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n            alert(gl.getShaderInfoLog(shader));\n            return null;\n        }\n\n        return shader;\n    }\n\n    initShaders() {\n        const fragmentShader = this.getShader(this.gl, this.getFragmentShader(), true);\n        const vertexShader = this.getShader(this.gl, this.getVertexShader(), false);\n\n        this.sprogram = this.gl.createProgram();\n        this.gl.attachShader(this.sprogram, vertexShader);\n        this.gl.attachShader(this.sprogram, fragmentShader);\n        this.gl.linkProgram(this.sprogram);\n\n        if (!this.gl.getProgramParameter(this.sprogram, this.gl.LINK_STATUS))\n            alert('Could not initialise shaders');\n\n        this.gl.useProgram(this.sprogram);\n        this.sprogram.vpa = this.gl.getAttribLocation(this.sprogram, 'aVertexPosition');\n        this.sprogram.tca = this.gl.getAttribLocation(this.sprogram, 'aTextureCoord');\n        this.gl.enableVertexAttribArray(this.sprogram.tca);\n        this.gl.enableVertexAttribArray(this.sprogram.vpa);\n\n        this.sprogram.tMatUniform = this.gl.getUniformLocation(this.sprogram, 'tMat');\n        this.sprogram.samplerUniform = this.gl.getUniformLocation(this.sprogram, 'uSampler');\n        this.sprogram.useTex = this.gl.getUniformLocation(this.sprogram, 'useTexture');\n        this.sprogram.color = this.gl.getUniformLocation(this.sprogram, 'uColor');\n        this.gl.uniform1i(this.sprogram.useTex, 1);\n    };\n\n    initBuffers() {\n        const vs = [0, 3, 1, 0, 2, 3];\n        let idx;\n\n        this.unitIBuffer = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitIBuffer);\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(vs), this.gl.STATIC_DRAW);\n\n        let i;\n        let ids = [];\n        for (i = 0; i < 100; i++) ids.push(i);\n        idx = new Uint16Array(ids);\n\n        this.unitI33 = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitI33);\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, idx, this.gl.STATIC_DRAW);\n\n        ids = [];\n        for (i = 0; i < 100; i++) ids.push(i, i + 1, i + 2);\n        idx = new Uint16Array(ids);\n\n        this.stripBuffer = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.stripBuffer);\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, idx, this.gl.STATIC_DRAW);\n    };\n\n    createCircle(raidus) {\n        this.circleCanvasRadius = WebGLUtil.nhpot(Util.initValue(raidus, 32));\n        const canvas = DomUtil.createCanvas('circle_canvas', this.circleCanvasRadius * 2, this.circleCanvasRadius * 2);\n        const context = canvas.getContext('2d');\n\n        context.beginPath();\n        context.arc(this.circleCanvasRadius, this.circleCanvasRadius, this.circleCanvasRadius, 0, Math.PI * 2, true);\n        context.closePath();\n        context.fillStyle = '#FFF';\n        context.fill();\n\n        return canvas.toDataURL();\n    };\n\n    drawImg2Canvas(particle) {\n        const _w = particle.body.width;\n        const _h = particle.body.height;\n\n        const _width = WebGLUtil.nhpot(particle.body.width);\n        const _height = WebGLUtil.nhpot(particle.body.height);\n\n        const _scaleX = particle.body.width / _width;\n        const _scaleY = particle.body.height / _height;\n\n        if (!this.texturebuffers[particle.data.src])\n            this.texturebuffers[particle.data.src] = [this.gl.createTexture(), this.gl.createBuffer(), this.gl.createBuffer()];\n\n        particle.data.texture = this.texturebuffers[particle.data.src][0];\n        particle.data.vcBuffer = this.texturebuffers[particle.data.src][1];\n        particle.data.tcBuffer = this.texturebuffers[particle.data.src][2];\n\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.data.tcBuffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, _scaleX, 0.0, 0.0, _scaleY, _scaleY, _scaleY]), this.gl.STATIC_DRAW);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.data.vcBuffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, _w, 0.0, 0.0, _h, _w, _h]), this.gl.STATIC_DRAW);\n\n        const context = particle.data.canvas.getContext('2d');\n        const data = context.getImageData(0, 0, _width, _height);\n\n        this.gl.bindTexture(this.gl.TEXTURE_2D, particle.data.texture);\n        this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, data);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR_MIPMAP_NEAREST);\n        this.gl.generateMipmap(this.gl.TEXTURE_2D);\n\n        particle.data.textureLoaded = true;\n        particle.data.textureWidth = _w;\n        particle.data.textureHeight = _h;\n    }\n\n    onProtonUpdate() {\n        // this.gl.clearColor(0, 0, 0, 1);\n        // this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n    }\n\n    onParticleCreated(particle) {\n        particle.data.textureLoaded = false;\n        particle.data.tmat = Mat3.create();\n        particle.data.tmat[8] = 1;\n        particle.data.imat = Mat3.create();\n        particle.data.imat[8] = 1;\n\n        if (particle.body) {\n            ImgUtil.getImgFromCache(particle.body, this.addImg2Body, particle);\n        } else {\n            ImgUtil.getImgFromCache(this.circleCanvasURL, this.addImg2Body, particle);\n            particle.data.oldScale = particle.radius / this.circleCanvasRadius;\n        }\n    }\n\n    // private\n    addImg2Body(img, particle) {\n        if (particle.dead) return;\n        particle.body = img;\n        particle.data.src = img.src;\n        particle.data.canvas = ImgUtil.getCanvasFromCache(img);\n        particle.data.oldScale = 1;\n\n        this.drawImg2Canvas(particle);\n    }\n\n    onParticleUpdate(particle) {\n        if (particle.data.textureLoaded) {\n            this.updateMatrix(particle);\n\n            this.gl.uniform3f(this.sprogram.color, particle.rgb.r / 255, particle.rgb.g / 255, particle.rgb.b / 255);\n            this.gl.uniformMatrix3fv(this.sprogram.tMatUniform, false, this.mstack.top());\n\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.data.vcBuffer);\n            this.gl.vertexAttribPointer(this.sprogram.vpa, 2, this.gl.FLOAT, false, 0, 0);\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.data.tcBuffer);\n            this.gl.vertexAttribPointer(this.sprogram.tca, 2, this.gl.FLOAT, false, 0, 0);\n            this.gl.bindTexture(this.gl.TEXTURE_2D, particle.data.texture);\n            this.gl.uniform1i(this.sprogram.samplerUniform, 0);\n            this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitIBuffer);\n\n            this.gl.drawElements(this.gl.TRIANGLES, 6, this.gl.UNSIGNED_SHORT, 0);\n\n            this.mstack.pop();\n        }\n    }\n\n    onParticleDead(particle) { }\n\n    updateMatrix(particle) {\n        const moveOriginMatrix = WebGLUtil.makeTranslation(-particle.data.textureWidth / 2, -particle.data.textureHeight / 2);\n        const translationMatrix = WebGLUtil.makeTranslation(particle.p.x, particle.p.y);\n\n        const angel = particle.rotation * (MathUtil.PI_180);\n        const rotationMatrix = WebGLUtil.makeRotation(angel);\n\n        const scale = particle.scale * particle.data.oldScale;\n        const scaleMatrix = WebGLUtil.makeScale(scale, scale);\n        let matrix = WebGLUtil.matrixMultiply(moveOriginMatrix, scaleMatrix);\n\n        matrix = WebGLUtil.matrixMultiply(matrix, rotationMatrix);\n        matrix = WebGLUtil.matrixMultiply(matrix, translationMatrix);\n\n        Mat3.inverse(matrix, particle.data.imat);\n        matrix[2] = particle.alpha;\n\n        this.mstack.push(matrix);\n    }\n}","import BaseRenderer from \"./BaseRenderer\";\n\nexport default class CustomRenderer extends BaseRenderer {\n  constructor(element) {\n    super(element);\n\n    this.name = \"CustomRenderer\";\n  }\n}\n","import Zone from \"./Zone\";\nimport Util from \"../utils/Util\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class LineZone extends Zone {\n  constructor(x1, y1, x2, y2, direction) {\n    super();\n\n    if (x2 - x1 >= 0) {\n      this.x1 = x1;\n      this.y1 = y1;\n      this.x2 = x2;\n      this.y2 = y2;\n    } else {\n      this.x1 = x2;\n      this.y1 = y2;\n      this.x2 = x1;\n      this.y2 = y1;\n    }\n\n    this.dx = this.x2 - this.x1;\n    this.dy = this.y2 - this.y1;\n\n    this.minx = Math.min(this.x1, this.x2);\n    this.miny = Math.min(this.y1, this.y2);\n    this.maxx = Math.max(this.x1, this.x2);\n    this.maxy = Math.max(this.y1, this.y2);\n\n    this.dot = this.x2 * this.y1 - this.x1 * this.y2;\n    this.xxyy = this.dx * this.dx + this.dy * this.dy;\n\n    this.gradient = this.getGradient();\n    this.length = this.getLength();\n    this.direction = Util.initValue(direction, \">\");\n  }\n\n  getPosition() {\n    this.random = Math.random();\n\n    this.vector.x =\n      this.x1 + this.random * this.length * Math.cos(this.gradient);\n    this.vector.y =\n      this.y1 + this.random * this.length * Math.sin(this.gradient);\n\n    return this.vector;\n  }\n\n  getDirection(x, y) {\n    const A = this.dy;\n    const B = -this.dx;\n    const C = this.dot;\n    const D = B === 0 ? 1 : B;\n\n    if ((A * x + B * y + C) * D > 0) return true;\n    else return false;\n  }\n\n  getDistance(x, y) {\n    const A = this.dy;\n    const B = -this.dx;\n    const C = this.dot;\n    const D = A * x + B * y + C;\n\n    return D / Math.sqrt(this.xxyy);\n  }\n\n  getSymmetric(v) {\n    const tha2 = v.getGradient();\n    const tha1 = this.getGradient();\n    const tha = 2 * (tha1 - tha2);\n\n    const oldx = v.x;\n    const oldy = v.y;\n\n    v.x = oldx * Math.cos(tha) - oldy * Math.sin(tha);\n    v.y = oldx * Math.sin(tha) + oldy * Math.cos(tha);\n\n    return v;\n  }\n\n  getGradient() {\n    return Math.atan2(this.dy, this.dx);\n  }\n\n  rangeOut(particle) {\n    const angle = Math.abs(this.getGradient());\n\n    if (angle <= MathUtil.PI / 4) {\n      if (particle.p.x <= this.maxx && particle.p.x >= this.minx) return true;\n    } else {\n      if (particle.p.y <= this.maxy && particle.p.y >= this.miny) return true;\n    }\n\n    return false;\n  }\n\n  getLength() {\n    return Math.sqrt(this.dx * this.dx + this.dy * this.dy);\n  }\n\n  crossing(particle) {\n    if (this.crossType === \"dead\") {\n      if (\n        this.direction === \">\" ||\n        this.direction === \"R\" ||\n        this.direction === \"right\" ||\n        this.direction === \"down\"\n      ) {\n        if (!this.rangeOut(particle)) return;\n        if (this.getDirection(particle.p.x, particle.p.y)) particle.dead = true;\n      } else {\n        if (!this.rangeOut(particle)) return;\n        if (!this.getDirection(particle.p.x, particle.p.y))\n          particle.dead = true;\n      }\n    } else if (this.crossType === \"bound\") {\n      if (!this.rangeOut(particle)) return;\n\n      if (this.getDistance(particle.p.x, particle.p.y) <= particle.radius) {\n        if (this.dx === 0) {\n          particle.v.x *= -1;\n        } else if (this.dy === 0) {\n          particle.v.y *= -1;\n        } else {\n          this.getSymmetric(particle.v);\n        }\n      }\n    } else if (this.crossType === \"cross\") {\n      if (this.alert) {\n        console.error(\"Sorry, LineZone does not support cross method!\");\n        this.alert = false;\n      }\n    }\n  }\n}\n","import Zone from \"./Zone\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class CircleZone extends Zone {\n  constructor(x, y, radius) {\n    super();\n\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n\n    this.angle = 0;\n    this.center = { x, y };\n  }\n\n  getPosition() {\n    this.angle = MathUtil.PIx2 * Math.random();\n    this.randomRadius = Math.random() * this.radius;\n\n    this.vector.x = this.x + this.randomRadius * Math.cos(this.angle);\n    this.vector.y = this.y + this.randomRadius * Math.sin(this.angle);\n\n    return this.vector;\n  }\n\n  setCenter(x, y) {\n    this.center.x = x;\n    this.center.y = y;\n  }\n\n  crossing(particle) {\n    const d = particle.p.distanceTo(this.center);\n\n    if (this.crossType === \"dead\") {\n      if (d - particle.radius > this.radius) particle.dead = true;\n    } else if (this.crossType === \"bound\") {\n      if (d + particle.radius >= this.radius) this.getSymmetric(particle);\n    } else if (this.crossType === \"cross\") {\n      if (this.alert) {\n        console.error(\"Sorry, CircleZone does not support cross method!\");\n        this.alert = false;\n      }\n    }\n  }\n\n  getSymmetric(particle) {\n    let tha2 = particle.v.getGradient();\n    let tha1 = this.getGradient(particle);\n\n    let tha = 2 * (tha1 - tha2);\n    let oldx = particle.v.x;\n    let oldy = particle.v.y;\n\n    particle.v.x = oldx * Math.cos(tha) - oldy * Math.sin(tha);\n    particle.v.y = oldx * Math.sin(tha) + oldy * Math.cos(tha);\n  }\n\n  getGradient(particle) {\n    return (\n      -MathUtil.PI_2 +\n      Math.atan2(particle.p.y - this.center.y, particle.p.x - this.center.x)\n    );\n  }\n}\n","import Zone from \"./Zone\";\n\nexport default class RectZone extends Zone {\n  constructor(x, y, width, height) {\n    super();\n\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  getPosition() {\n    this.vector.x = this.x + Math.random() * this.width;\n    this.vector.y = this.y + Math.random() * this.height;\n\n    return this.vector;\n  }\n\n  crossing(particle) {\n    // particle dead zone\n    if (this.crossType === \"dead\") {\n      if (particle.p.x + particle.radius < this.x) particle.dead = true;\n      else if (particle.p.x - particle.radius > this.x + this.width)\n        particle.dead = true;\n\n      if (particle.p.y + particle.radius < this.y) particle.dead = true;\n      else if (particle.p.y - particle.radius > this.y + this.height)\n        particle.dead = true;\n    }\n\n    // particle bound zone\n    else if (this.crossType === \"bound\") {\n      if (particle.p.x - particle.radius < this.x) {\n        particle.p.x = this.x + particle.radius;\n        particle.v.x *= -1;\n      } else if (particle.p.x + particle.radius > this.x + this.width) {\n        particle.p.x = this.x + this.width - particle.radius;\n        particle.v.x *= -1;\n      }\n\n      if (particle.p.y - particle.radius < this.y) {\n        particle.p.y = this.y + particle.radius;\n        particle.v.y *= -1;\n      } else if (particle.p.y + particle.radius > this.y + this.height) {\n        particle.p.y = this.y + this.height - particle.radius;\n        particle.v.y *= -1;\n      }\n    }\n\n    // particle cross zone\n    else if (this.crossType === \"cross\") {\n      if (particle.p.x + particle.radius < this.x && particle.v.x <= 0)\n        particle.p.x = this.x + this.width + particle.radius;\n      else if (\n        particle.p.x - particle.radius > this.x + this.width &&\n        particle.v.x >= 0\n      )\n        particle.p.x = this.x - particle.radius;\n\n      if (particle.p.y + particle.radius < this.y && particle.v.y <= 0)\n        particle.p.y = this.y + this.height + particle.radius;\n      else if (\n        particle.p.y - particle.radius > this.y + this.height &&\n        particle.v.y >= 0\n      )\n        particle.p.y = this.y - particle.radius;\n    }\n  }\n}\n","import Zone from \"./Zone\";\nimport Util from \"../utils/Util\";\n\nexport default class ImageZone extends Zone {\n  constructor(imageData, x, y, d) {\n    super();\n\n    this.reset(imageData, x, y, d);\n  }\n\n  reset(imageData, x, y, d) {\n    this.imageData = imageData;\n    this.x = Util.initValue(x, 0);\n    this.y = Util.initValue(y, 0);\n    this.d = Util.initValue(d, 2);\n\n    this.vectors = [];\n    this.setVectors();\n  }\n\n  setVectors() {\n    let i, j;\n    const length1 = this.imageData.width;\n    const length2 = this.imageData.height;\n\n    for (i = 0; i < length1; i += this.d) {\n      for (j = 0; j < length2; j += this.d) {\n        let index = ((j >> 0) * length1 + (i >> 0)) * 4;\n\n        if (this.imageData.data[index + 3] > 0) {\n          this.vectors.push({ x: i + this.x, y: j + this.y });\n        }\n      }\n    }\n\n    return this.vector;\n  }\n\n  getBound(x, y) {\n    var index = ((y >> 0) * this.imageData.width + (x >> 0)) * 4;\n    if (this.imageData.data[index + 3] > 0) return true;\n    else return false;\n  }\n\n  getPosition() {\n    const vector = Util.getRandFromArray(this.vectors);\n    return this.vector.copy(vector);\n  }\n\n  getColor(x, y) {\n    x -= this.x;\n    y -= this.y;\n    var i = ((y >> 0) * this.imageData.width + (x >> 0)) * 4;\n\n    return {\n      r: this.imageData.data[i],\n      g: this.imageData.data[i + 1],\n      b: this.imageData.data[i + 2],\n      a: this.imageData.data[i + 3]\n    };\n  }\n\n  crossing(particle) {\n    if (this.crossType === \"dead\") {\n      if (this.getBound(particle.p.x - this.x, particle.p.y - this.y))\n        particle.dead = true;\n      else particle.dead = false;\n    } else if (this.crossType === \"bound\") {\n      if (!this.getBound(particle.p.x - this.x, particle.p.y - this.y))\n        particle.v.negate();\n    }\n  }\n}\n","import ColorUtil from \"../utils/ColorUtil\";\nimport CircleZone from \"../zone/CircleZone\";\nimport PointZone from \"../zone/PointZone\";\nimport LineZone from \"../zone/LineZone\";\nimport RectZone from \"../zone/RectZone\";\n\nexport default {\n  addEventListener(proton, func) {\n    proton.addEventListener(\"PROTON_UPDATE_AFTER\", () => func());\n  },\n\n  getStyle(color = \"#ff0000\") {\n    const rgb = ColorUtil.hexToRgb(color);\n    return `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, 0.5)`;\n  },\n\n  drawZone(proton, canvas, zone, clear) {\n    const context = canvas.getContext(\"2d\");\n    const style = this.getStyle();\n\n    this.addEventListener(proton, () => {\n      if (clear) context.clearRect(0, 0, canvas.width, canvas.height);\n\n      if (zone instanceof PointZone) {\n        context.beginPath();\n        context.fillStyle = style;\n        context.arc(zone.x, zone.y, 10, 0, Math.PI * 2, true);\n        context.fill();\n        context.closePath();\n      } else if (zone instanceof LineZone) {\n        context.beginPath();\n        context.strokeStyle = style;\n        context.moveTo(zone.x1, zone.y1);\n        context.lineTo(zone.x2, zone.y2);\n        context.stroke();\n        context.closePath();\n      } else if (zone instanceof RectZone) {\n        context.beginPath();\n        context.strokeStyle = style;\n        context.drawRect(zone.x, zone.y, zone.width, zone.height);\n        context.stroke();\n        context.closePath();\n      } else if (zone instanceof CircleZone) {\n        context.beginPath();\n        context.strokeStyle = style;\n        context.arc(zone.x, zone.y, zone.radius, 0, Math.PI * 2, true);\n        context.stroke();\n        context.closePath();\n      }\n    });\n  },\n\n  drawEmitter(proton, canvas, emitter, clear) {\n    const context = canvas.getContext(\"2d\");\n    const style = this.getStyle();\n\n    this.addEventListener(proton, () => {\n      if (clear) context.clearRect(0, 0, canvas.width, canvas.height);\n\n      context.beginPath();\n      context.fillStyle = style;\n      context.arc(emitter.p.x, emitter.p.y, 10, 0, Math.PI * 2, true);\n      context.fill();\n      context.closePath();\n    });\n  }\n};\n","import Proton from \"./core/Proton\";\nimport Particle from \"./core/Particle\";\nimport Pool from \"./core/Pool\";\n\nimport Util from \"./utils/Util\";\nimport ColorUtil from \"./utils/ColorUtil\";\nimport MathUtil from \"./math/MathUtil\";\nimport Vector2D from \"./math/Vector2D\";\nimport Polar2D from \"./math/Polar2D\";\nimport Mat3 from \"./math/Mat3\";\nimport Span from \"./math/Span\";\nimport ArraySpan from \"./math/ArraySpan\";\nimport Rectangle from \"./math/Rectangle\";\nimport ease from \"./math/ease\";\n\nimport Rate from \"./initialize/Rate\";\nimport Initialize from \"./initialize/Initialize\";\nimport Life from \"./initialize/Life\";\nimport Position from \"./initialize/Position\";\nimport Velocity from \"./initialize/Velocity\";\nimport Mass from \"./initialize/Mass\";\nimport Radius from \"./initialize/Radius\";\nimport Body from \"./initialize/Body\";\n\nimport Behaviour from \"./behaviour/Behaviour\";\nimport Force from \"./behaviour/Force\";\nimport Attraction from \"./behaviour/Attraction\";\nimport RandomDrift from \"./behaviour/RandomDrift\";\nimport Gravity from \"./behaviour/Gravity\";\nimport Collision from \"./behaviour/Collision\";\nimport CrossZone from \"./behaviour/CrossZone\";\nimport Alpha from \"./behaviour/Alpha\";\nimport Scale from \"./behaviour/Scale\";\nimport Rotate from \"./behaviour/Rotate\";\nimport Color from \"./behaviour/Color\";\nimport Cyclone from \"./behaviour/Cyclone\";\nimport Repulsion from \"./behaviour/Repulsion\";\nimport GravityWell from \"./behaviour/GravityWell\";\n\nimport Emitter from \"./emitter/Emitter\";\nimport BehaviourEmitter from \"./emitter/BehaviourEmitter\";\nimport FollowEmitter from \"./emitter/FollowEmitter\";\n\nimport CanvasRenderer from \"./render/CanvasRenderer\";\nimport DomRenderer from \"./render/DomRenderer\";\nimport EaselRenderer from \"./render/EaselRenderer\";\nimport PixelRenderer from \"./render/PixelRenderer\";\nimport PixiRenderer from \"./render/PixiRenderer\";\nimport WebGLRenderer from \"./render/WebGLRenderer\";\nimport CustomRenderer from \"./render/CustomRenderer\";\n\nimport Zone from \"./zone/Zone\";\nimport LineZone from \"./zone/LineZone\";\nimport CircleZone from \"./zone/CircleZone\";\nimport PointZone from \"./zone/PointZone\";\nimport RectZone from \"./zone/RectZone\";\nimport ImageZone from \"./zone/ImageZone\";\n\nimport Debug from \"./debug/Debug\";\n\n// namespace\nProton.Particle = Particle;\nProton.Pool = Pool;\n\nProton.Util = Util;\nProton.ColorUtil = ColorUtil;\nProton.MathUtil = MathUtil;\nProton.Vector2D = Proton.Vector = Vector2D;\nProton.Polar2D = Proton.Polar = Polar2D;\nProton.ArraySpan = ArraySpan;\nProton.Rectangle = Rectangle;\nProton.Rate = Rate;\nProton.ease = ease;\nProton.Span = Span;\nProton.Mat3 = Mat3;\nProton.getSpan = (a, b, center) => new Span(a, b, center);\nProton.createArraySpan = ArraySpan.createArraySpan;\n\nProton.Initialize = Proton.Init = Initialize;\nProton.Life = Proton.L = Life;\nProton.Position = Proton.P = Position;\nProton.Velocity = Proton.V = Velocity;\nProton.Mass = Proton.M = Mass;\nProton.Radius = Proton.R = Radius;\nProton.Body = Proton.B = Body;\n\nProton.Behaviour = Behaviour;\nProton.Force = Proton.F = Force;\nProton.Attraction = Proton.A = Attraction;\nProton.RandomDrift = Proton.RD = RandomDrift;\nProton.Gravity = Proton.G = Gravity;\nProton.Collision = Collision;\nProton.CrossZone = CrossZone;\nProton.Alpha = Alpha;\nProton.Scale = Proton.S = Scale;\nProton.Rotate = Rotate;\nProton.Color = Color;\nProton.Repulsion = Repulsion;\nProton.Cyclone = Cyclone;\nProton.GravityWell = GravityWell;\n\nProton.Emitter = Emitter;\nProton.BehaviourEmitter = BehaviourEmitter;\nProton.FollowEmitter = FollowEmitter;\n\nProton.Zone = Zone;\nProton.LineZone = LineZone;\nProton.CircleZone = CircleZone;\nProton.PointZone = PointZone;\nProton.RectZone = RectZone;\nProton.ImageZone = ImageZone;\n\nProton.CanvasRenderer = CanvasRenderer;\nProton.DomRenderer = DomRenderer;\nProton.EaselRenderer = EaselRenderer;\nProton.PixiRenderer = PixiRenderer;\nProton.PixelRenderer = PixelRenderer;\nProton.WebGLRenderer = Proton.WebGlRenderer = WebGLRenderer;\nProton.CustomRenderer = CustomRenderer;\n\nProton.Debug = Debug;\nUtil.assign(Proton, ease);\n\n// export\nexport default Proton;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}